=Grammar:

_blankspace:/[\u0020\u0009\u000a\u000b\u000c\u000d\u0085\u200e\u200f\u2028\u2029]/
_comment:
   '//' /.*/
access_mode:
   'read'
 | 'read_write'
 | 'write'
additive_expression:
   additive_expression additive_operator multiplicative_expression
 | multiplicative_expression
additive_operator:
   '+'
 | '-'
address_space:
   'function'
 | 'private'
 | 'storage'
 | 'uniform'
 | 'workgroup'
argument_expression_list:
   '(' expression_comma_list ? ')'
array_type_specifier:
   'array' '<' type_specifier ( ',' element_count_expression )? '>'
assignment_statement:
   '_' '=' expression
 | lhs_expression ( '=' | compound_assignment_operator ) expression
assignment_statement/0.1:
   '='
 | compound_assignment_operator
attrib_end:
   ',' ? ')'
attribute:
   '@' 'align' '(' expression attrib_end
 | '@' 'binding' '(' expression attrib_end
 | '@' 'builtin' '(' builtin_value_name attrib_end
 | '@' 'compute'
 | '@' 'const'
 | '@' 'fragment'
 | '@' 'group' '(' expression attrib_end
 | '@' 'id' '(' expression attrib_end
 | '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end
 | '@' 'interpolate' '(' interpolation_type_name attrib_end
 | '@' 'invariant'
 | '@' 'location' '(' expression attrib_end
 | '@' 'size' '(' expression attrib_end
 | '@' 'vertex'
 | '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end
 | '@' 'workgroup_size' '(' expression ',' expression attrib_end
 | '@' 'workgroup_size' '(' expression attrib_end
binary_and_expression:
   binary_and_expression '&' unary_expression
 | unary_expression
binary_or_expression:
   binary_or_expression '|' unary_expression
 | unary_expression
binary_xor_expression:
   binary_xor_expression '^' unary_expression
 | unary_expression
bitwise_expression:
   binary_and_expression '&' unary_expression
 | binary_or_expression '|' unary_expression
 | binary_xor_expression '^' unary_expression
bool_literal:
   'false'
 | 'true'
break_if_statement:
   'break' 'if' expression ';'
break_statement:'break'
builtin_value_name:
   'frag_depth'
 | 'front_facing'
 | 'global_invocation_id'
 | 'instance_index'
 | 'local_invocation_id'
 | 'local_invocation_index'
 | 'num_workgroups'
 | 'position'
 | 'sample_index'
 | 'sample_mask'
 | 'vertex_index'
 | 'workgroup_id'
callable:
   'array'
 | ident
 | mat_prefix
 | type_specifier_without_ident
 | vec_prefix
case_clause:
   'case' case_selectors ':' ? compound_statement
case_selector:
   'default'
 | expression
case_selectors:
   case_selector ( ',' case_selector ) * ? ',' ?
case_selectors/0.1/0/0.0:
   ',' case_selector
component_or_swizzle_specifier:
   '.' member_ident component_or_swizzle_specifier ?
 | '.' swizzle_name component_or_swizzle_specifier ?
 | '[' expression ']' component_or_swizzle_specifier ?
compound_assignment_operator:
   '%='
 | '&='
 | '*='
 | '+='
 | '-='
 | '/='
 | '<<='
 | '>>='
 | '^='
 | '|='
compound_statement:
   '{' statement * ? '}'
continue_statement:'continue'
continuing_compound_statement:
   '{' statement * ? break_if_statement ? '}'
continuing_statement:
   'continuing' continuing_compound_statement
core_lhs_expression:
   '(' lhs_expression ')'
 | ident
decimal_float_literal:
   /0[fh]/
 | /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/
 | /[0-9]+[eE][+-]?[0-9]+[fh]?/
 | /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/
 | /[1-9][0-9]*[fh]/
decimal_int_literal:
   /0[iu]?/
 | /[1-9][0-9]*[iu]?/
decrement_statement:
   lhs_expression '--'
default_alone_clause:
   'default' ':' ? compound_statement
depth_texture_type:
   'texture_depth_2d'
 | 'texture_depth_2d_array'
 | 'texture_depth_cube'
 | 'texture_depth_cube_array'
 | 'texture_depth_multisampled_2d'
element_count_expression:
   additive_expression
 | bitwise_expression
else_clause:
   'else' compound_statement
else_if_clause:
   'else' 'if' expression compound_statement
enable_directive:
   'enable' extension_name ';'
expression:
   bitwise_expression
 | relational_expression
 | short_circuit_and_expression '&&' relational_expression
 | short_circuit_or_expression '||' relational_expression
expression_comma_list:
   expression ( ',' expression ) * ? ',' ?
expression_comma_list/0.1/0/0.0:
   ',' expression
extension_name:'f16'
float_literal:
   decimal_float_literal
 | hex_float_literal
for_header:
   for_init ? ';' expression ? ';' for_update ?
for_init:
   func_call_statement
 | variable_statement
 | variable_updating_statement
for_statement:
   'for' '(' for_header ')' compound_statement
for_update:
   func_call_statement
 | variable_updating_statement
func_call_statement:
   ident argument_expression_list
function_decl:
   attribute * ? function_header compound_statement
function_header:
   'fn' ident '(' param_list ? ')' ( '->' attribute * ? type_specifier )?
global_constant_decl:
   'const' optionally_typed_ident '=' expression
 | attribute * ? 'override' optionally_typed_ident ( '=' expression )?
global_decl:
   ';'
 | function_decl
 | global_constant_decl ';'
 | global_variable_decl ';'
 | static_assert_statement ';'
 | struct_decl
 | type_alias_decl ';'
global_directive:enable_directive
global_variable_decl:
   attribute * ? variable_decl ( '=' expression )?
hex_float_literal:
   /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/
 | /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/
 | /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/
hex_int_literal:/0[xX][0-9a-fA-F]+[iu]?/
ident:ident_pattern_token
ident_pattern_token:/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/
if_clause:
   'if' expression compound_statement
if_statement:
   if_clause else_if_clause * ? else_clause ?
increment_statement:
   lhs_expression '++'
int_literal:
   decimal_int_literal
 | hex_int_literal
interpolation_sample_name:
   'center'
 | 'centroid'
 | 'sample'
interpolation_type_name:
   'flat'
 | 'linear'
 | 'perspective'
lhs_expression:
   '&' lhs_expression
 | '*' lhs_expression
 | core_lhs_expression component_or_swizzle_specifier ?
literal:
   bool_literal
 | float_literal
 | int_literal
loop_statement:
   'loop' '{' statement * ? continuing_statement ? '}'
mat_prefix:
   'mat2x2'
 | 'mat2x3'
 | 'mat2x4'
 | 'mat3x2'
 | 'mat3x3'
 | 'mat3x4'
 | 'mat4x2'
 | 'mat4x3'
 | 'mat4x4'
member_ident:ident_pattern_token
multiplicative_expression:
   multiplicative_expression multiplicative_operator unary_expression
 | unary_expression
multiplicative_operator:
   '%'
 | '*'
 | '/'
multisampled_texture_type:'texture_multisampled_2d'
optionally_typed_ident:
   ident ( ':' type_specifier )?
param:
   attribute * ? ident ':' type_specifier
param_list:
   param ( ',' param ) * ? ',' ?
param_list/0.1/0/0.0:
   ',' param
paren_expression:
   '(' expression ')'
primary_expression:
   'bitcast' '<' type_specifier '>' paren_expression
 | callable argument_expression_list
 | ident
 | literal
 | paren_expression
relational_expression:
   shift_expression
 | shift_expression '!=' shift_expression
 | shift_expression '<' shift_expression
 | shift_expression '<=' shift_expression
 | shift_expression '==' shift_expression
 | shift_expression '>' shift_expression
 | shift_expression '>=' shift_expression
return_statement:
   'return' expression ?
sampled_texture_type:
   'texture_1d'
 | 'texture_2d'
 | 'texture_2d_array'
 | 'texture_3d'
 | 'texture_cube'
 | 'texture_cube_array'
sampler_type:
   'sampler'
 | 'sampler_comparison'
shift_expression:
   additive_expression
 | unary_expression '<<' unary_expression
 | unary_expression '>>' unary_expression
short_circuit_and_expression:
   relational_expression
 | short_circuit_and_expression '&&' relational_expression
short_circuit_or_expression:
   relational_expression
 | short_circuit_or_expression '||' relational_expression
singular_expression:
   primary_expression component_or_swizzle_specifier ?
statement:
   ';'
 | 'discard' ';'
 | break_statement ';'
 | compound_statement
 | continue_statement ';'
 | for_statement
 | func_call_statement ';'
 | if_statement
 | loop_statement
 | return_statement ';'
 | static_assert_statement ';'
 | switch_statement
 | variable_statement ';'
 | variable_updating_statement ';'
 | while_statement
static_assert_statement:
   'static_assert' expression
storage_texture_type:
   'texture_storage_1d'
 | 'texture_storage_2d'
 | 'texture_storage_2d_array'
 | 'texture_storage_3d'
struct_body_decl:
   '{' struct_member ( ',' struct_member ) * ? ',' ? '}'
struct_body_decl/0.2/0/0.0:
   ',' struct_member
struct_decl:
   'struct' ident struct_body_decl
struct_member:
   attribute * ? member_ident ':' type_specifier
switch_body:
   case_clause
 | default_alone_clause
switch_statement:
   'switch' expression '{' ( switch_body * ) '}'
switch_statement/0.3:
   switch_body *
swizzle_name:
   '/[rgba]/'
 | '/[rgba][rgba]/'
 | '/[rgba][rgba][rgba]/'
 | '/[rgba][rgba][rgba][rgba]/'
 | '/[xyzw]/'
 | '/[xyzw][xyzw]/'
 | '/[xyzw][xyzw][xyzw]/'
 | '/[xyzw][xyzw][xyzw][xyzw]/'
texel_format:
   'bgra8unorm'
 | 'r32float'
 | 'r32sint'
 | 'r32uint'
 | 'rg32float'
 | 'rg32sint'
 | 'rg32uint'
 | 'rgba16float'
 | 'rgba16sint'
 | 'rgba16uint'
 | 'rgba32float'
 | 'rgba32sint'
 | 'rgba32uint'
 | 'rgba8sint'
 | 'rgba8snorm'
 | 'rgba8uint'
 | 'rgba8unorm'
texture_and_sampler_types:
   depth_texture_type
 | multisampled_texture_type '<' type_specifier '>'
 | sampled_texture_type '<' type_specifier '>'
 | sampler_type
 | storage_texture_type '<' texel_format ',' access_mode '>'
translation_unit:
   global_directive * ? global_decl * ?
type_alias_decl:
   'type' ident '=' type_specifier
type_specifier:
   ident
 | type_specifier_without_ident
type_specifier_without_ident:
   'atomic' '<' type_specifier '>'
 | 'bool'
 | 'f16'
 | 'f32'
 | 'i32'
 | 'ptr' '<' address_space ',' type_specifier ( ',' access_mode )? '>'
 | 'u32'
 | array_type_specifier
 | mat_prefix '<' type_specifier '>'
 | texture_and_sampler_types
 | vec_prefix '<' type_specifier '>'
unary_expression:
   '!' unary_expression
 | '&' unary_expression
 | '*' unary_expression
 | '-' unary_expression
 | '~' unary_expression
 | singular_expression
variable_decl:
   'var' variable_qualifier ? optionally_typed_ident
variable_qualifier:
   '<' address_space ( ',' access_mode )? '>'
variable_statement:
   'const' optionally_typed_ident '=' expression
 | 'let' optionally_typed_ident '=' expression
 | variable_decl
 | variable_decl '=' expression
variable_updating_statement:
   assignment_statement
 | decrement_statement
 | increment_statement
vec_prefix:
   'vec2'
 | 'vec3'
 | 'vec4'
while_statement:
   'while' expression compound_statement
=LALR1 item sets:
#0
language -> · translation_unit EndOfText : {EndOfText}
global_directive -> · 'enable' extension_name ';' : {EndOfText}
translation_unit -> · translation_unit/0.0 translation_unit/0.1 : {EndOfText}
translation_unit/0.0 -> · translation_unit/0.0/0 : {EndOfText}
translation_unit/0.0/0 -> · global_directive translation_unit/0.0/0 : {EndOfText}

#1
language -> translation_unit · EndOfText : {EndOfText}

#2
translation_unit -> translation_unit/0.0 · translation_unit/0.1 : {EndOfText}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
function_decl -> · function_decl/0.0 function_header compound_statement : {EndOfText}
function_decl/0.0 -> · function_decl/0.0/0 : {}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {}
global_constant_decl -> · 'const' optionally_typed_ident '=' expression : {}
global_constant_decl -> · global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 : {}
global_constant_decl/1.0 -> · global_constant_decl/1.0/0 : {}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {}
global_decl -> · ';' : {EndOfText}
global_decl -> · function_decl : {EndOfText}
global_decl -> · global_constant_decl ';' : {EndOfText}
global_decl -> · global_variable_decl ';' : {EndOfText}
global_decl -> · static_assert_statement ';' : {EndOfText}
global_decl -> · struct_decl : {EndOfText}
global_decl -> · type_alias_decl ';' : {EndOfText}
global_variable_decl -> · global_variable_decl/0.0 variable_decl global_variable_decl/0.2 : {}
global_variable_decl/0.0 -> · global_variable_decl/0.0/0 : {}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {}
static_assert_statement -> · 'static_assert' expression : {}
struct_decl -> · 'struct' ident struct_body_decl : {EndOfText}
translation_unit/0.1 -> · translation_unit/0.1/0 : {EndOfText}
translation_unit/0.1/0 -> · global_decl translation_unit/0.1/0 : {EndOfText}
type_alias_decl -> · 'type' ident '=' type_specifier : {}

#3
translation_unit/0.0 -> translation_unit/0.0/0 · : {EndOfText}

#4
translation_unit/0.0/0 -> global_directive · translation_unit/0.0/0 : {EndOfText}
global_directive -> · 'enable' extension_name ';' : {EndOfText}
translation_unit/0.0/0 -> · global_directive translation_unit/0.0/0 : {EndOfText}

#5
global_directive -> 'enable' · extension_name ';' : {EndOfText}
extension_name -> · 'f16' : {}

#6
global_directive -> 'enable' extension_name · ';' : {EndOfText}

#7
extension_name -> 'f16' · : {}

#8
translation_unit/0.0/0 -> global_directive translation_unit/0.0/0 · : {EndOfText}

#9
translation_unit -> translation_unit/0.0 translation_unit/0.1 · : {EndOfText}

#10
translation_unit/0.1 -> translation_unit/0.1/0 · : {EndOfText}

#11
translation_unit/0.1/0 -> global_decl · translation_unit/0.1/0 : {EndOfText}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
function_decl -> · function_decl/0.0 function_header compound_statement : {EndOfText}
function_decl/0.0 -> · function_decl/0.0/0 : {}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {}
global_constant_decl -> · 'const' optionally_typed_ident '=' expression : {}
global_constant_decl -> · global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 : {}
global_constant_decl/1.0 -> · global_constant_decl/1.0/0 : {}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {}
global_decl -> · ';' : {EndOfText}
global_decl -> · function_decl : {EndOfText}
global_decl -> · global_constant_decl ';' : {EndOfText}
global_decl -> · global_variable_decl ';' : {EndOfText}
global_decl -> · static_assert_statement ';' : {EndOfText}
global_decl -> · struct_decl : {EndOfText}
global_decl -> · type_alias_decl ';' : {EndOfText}
global_variable_decl -> · global_variable_decl/0.0 variable_decl global_variable_decl/0.2 : {}
global_variable_decl/0.0 -> · global_variable_decl/0.0/0 : {}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {}
static_assert_statement -> · 'static_assert' expression : {}
struct_decl -> · 'struct' ident struct_body_decl : {EndOfText}
translation_unit/0.1/0 -> · global_decl translation_unit/0.1/0 : {EndOfText}
type_alias_decl -> · 'type' ident '=' type_specifier : {}

#12
global_decl -> ';' · : {EndOfText}

#13
global_decl -> global_variable_decl · ';' : {EndOfText}

#14
global_decl -> global_constant_decl · ';' : {EndOfText}

#15
global_decl -> type_alias_decl · ';' : {EndOfText}

#16
global_decl -> struct_decl · : {EndOfText}

#17
global_decl -> function_decl · : {EndOfText}

#18
global_decl -> static_assert_statement · ';' : {EndOfText}

#19
global_variable_decl -> global_variable_decl/0.0 · variable_decl global_variable_decl/0.2 : {}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}

#20
global_constant_decl -> 'const' · optionally_typed_ident '=' expression : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {}

#21
global_constant_decl -> global_constant_decl/1.0 · 'override' optionally_typed_ident global_constant_decl/1.3 : {}

#22
type_alias_decl -> 'type' · ident '=' type_specifier : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}

#23
struct_decl -> 'struct' · ident struct_body_decl : {EndOfText}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}

#24
function_decl -> function_decl/0.0 · function_header compound_statement : {EndOfText}
function_header -> · 'fn' ident '(' function_header/0.3 ')' function_header/0.5 : {}

#25
static_assert_statement -> 'static_assert' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#26
global_variable_decl/0.0 -> global_variable_decl/0.0/0 · : {}

#27
global_constant_decl/1.0 -> global_constant_decl/1.0/0 · : {}

#28
function_decl/0.0 -> function_decl/0.0/0 · : {}

#29
function_decl/0.0/0 -> attribute · function_decl/0.0/0 : {}
global_constant_decl/1.0/0 -> attribute · global_constant_decl/1.0/0 : {}
global_variable_decl/0.0/0 -> attribute · global_variable_decl/0.0/0 : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {}

#30
attribute -> '@' · 'align' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'binding' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'builtin' '(' builtin_value_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'compute' : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'const' : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'fragment' : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'group' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'id' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'interpolate' '(' interpolation_type_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'invariant' : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'location' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'vertex' : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'workgroup_size' '(' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'workgroup_size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}

#31
attribute -> '@' 'align' · '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}

#32
attribute -> '@' 'binding' · '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}

#33
attribute -> '@' 'builtin' · '(' builtin_value_name attrib_end : {'f16' 'texture_multisampled_2d'}

#34
attribute -> '@' 'const' · : {'f16' 'texture_multisampled_2d'}

#35
attribute -> '@' 'group' · '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}

#36
attribute -> '@' 'id' · '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}

#37
attribute -> '@' 'interpolate' · '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'interpolate' · '(' interpolation_type_name attrib_end : {'f16' 'texture_multisampled_2d'}

#38
attribute -> '@' 'invariant' · : {'f16' 'texture_multisampled_2d'}

#39
attribute -> '@' 'location' · '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}

#40
attribute -> '@' 'size' · '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}

#41
attribute -> '@' 'workgroup_size' · '(' expression ',' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'workgroup_size' · '(' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'workgroup_size' · '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}

#42
attribute -> '@' 'vertex' · : {'f16' 'texture_multisampled_2d'}

#43
attribute -> '@' 'fragment' · : {'f16' 'texture_multisampled_2d'}

#44
attribute -> '@' 'compute' · : {'f16' 'texture_multisampled_2d'}

#45
global_variable_decl/0.0/0 -> attribute global_variable_decl/0.0/0 · : {}

#46
global_constant_decl/1.0/0 -> attribute global_constant_decl/1.0/0 · : {}

#47
function_decl/0.0/0 -> attribute function_decl/0.0/0 · : {}

#48
static_assert_statement -> 'static_assert' expression · : {}

#49
expression -> relational_expression · : {}
short_circuit_and_expression -> relational_expression · : {}
short_circuit_or_expression -> relational_expression · : {}

#50
expression -> short_circuit_or_expression · '||' relational_expression : {}
short_circuit_or_expression -> short_circuit_or_expression · '||' relational_expression : {}

#51
expression -> short_circuit_and_expression · '&&' relational_expression : {}
short_circuit_and_expression -> short_circuit_and_expression · '&&' relational_expression : {}

#52
expression -> bitwise_expression · : {}

#53
relational_expression -> shift_expression · '!=' shift_expression : {}
relational_expression -> shift_expression · '<' shift_expression : {}
relational_expression -> shift_expression · '<=' shift_expression : {}
relational_expression -> shift_expression · '==' shift_expression : {}
relational_expression -> shift_expression · '>' shift_expression : {}
relational_expression -> shift_expression · '>=' shift_expression : {}
relational_expression -> shift_expression · : {}

#54
binary_and_expression -> binary_and_expression · '&' unary_expression : {}
bitwise_expression -> binary_and_expression · '&' unary_expression : {}

#55
binary_or_expression -> binary_or_expression · '|' unary_expression : {}
bitwise_expression -> binary_or_expression · '|' unary_expression : {}

#56
binary_xor_expression -> binary_xor_expression · '^' unary_expression : {}
bitwise_expression -> binary_xor_expression · '^' unary_expression : {}

#57
additive_expression -> additive_expression · additive_operator multiplicative_expression : {}
shift_expression -> additive_expression · : {}
additive_operator -> · '+' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
additive_operator -> · '-' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#58
binary_and_expression -> unary_expression · : {}
binary_or_expression -> unary_expression · : {}
binary_xor_expression -> unary_expression · : {}
multiplicative_expression -> unary_expression · : {}
shift_expression -> unary_expression · '<<' unary_expression : {}
shift_expression -> unary_expression · '>>' unary_expression : {}

#59
additive_expression -> multiplicative_expression · : {}
multiplicative_expression -> multiplicative_expression · multiplicative_operator unary_expression : {}
multiplicative_operator -> · '%' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_operator -> · '*' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_operator -> · '/' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#60
unary_expression -> singular_expression · : {}

#61
unary_expression -> '-' · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#62
unary_expression -> '!' · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#63
unary_expression -> '~' · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#64
unary_expression -> '*' · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#65
unary_expression -> '&' · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#66
singular_expression -> primary_expression · singular_expression/0.1 : {}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {}
singular_expression/0.1 -> · component_or_swizzle_specifier : {}

#67
callable -> ident · : {}
primary_expression -> ident · : {}

#68
primary_expression -> callable · argument_expression_list : {}
argument_expression_list -> · '(' argument_expression_list/0.1 ')' : {}

#69
primary_expression -> literal · : {}

#70
primary_expression -> paren_expression · : {}

#71
primary_expression -> 'bitcast' · '<' type_specifier '>' paren_expression : {}

#72
ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ · : {}

#73
callable -> type_specifier_without_ident · : {}

#74
callable -> vec_prefix · : {}
type_specifier_without_ident -> vec_prefix · '<' type_specifier '>' : {}

#75
callable -> mat_prefix · : {}
type_specifier_without_ident -> mat_prefix · '<' type_specifier '>' : {}

#76
array_type_specifier -> 'array' · '<' type_specifier array_type_specifier/0.3 '>' : {}
callable -> 'array' · : {}

#77
literal -> int_literal · : {}

#78
literal -> float_literal · : {}

#79
literal -> bool_literal · : {}

#80
paren_expression -> '(' · expression ')' : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#81
type_specifier_without_ident -> 'bool' · : {}

#82
type_specifier_without_ident -> 'f32' · : {}

#83
type_specifier_without_ident -> 'f16' · : {}

#84
type_specifier_without_ident -> 'i32' · : {}

#85
type_specifier_without_ident -> 'u32' · : {}

#86
type_specifier_without_ident -> 'ptr' · '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}

#87
type_specifier_without_ident -> array_type_specifier · : {}

#88
type_specifier_without_ident -> 'atomic' · '<' type_specifier '>' : {}

#89
type_specifier_without_ident -> texture_and_sampler_types · : {}

#90
vec_prefix -> 'vec2' · : {}

#91
vec_prefix -> 'vec3' · : {}

#92
vec_prefix -> 'vec4' · : {}

#93
mat_prefix -> 'mat2x2' · : {}

#94
mat_prefix -> 'mat2x3' · : {}

#95
mat_prefix -> 'mat2x4' · : {}

#96
mat_prefix -> 'mat3x2' · : {}

#97
mat_prefix -> 'mat3x3' · : {}

#98
mat_prefix -> 'mat3x4' · : {}

#99
mat_prefix -> 'mat4x2' · : {}

#100
mat_prefix -> 'mat4x3' · : {}

#101
mat_prefix -> 'mat4x4' · : {}

#102
int_literal -> decimal_int_literal · : {}

#103
int_literal -> hex_int_literal · : {}

#104
float_literal -> decimal_float_literal · : {}

#105
float_literal -> hex_float_literal · : {}

#106
bool_literal -> 'true' · : {}

#107
bool_literal -> 'false' · : {}

#108
texture_and_sampler_types -> sampler_type · : {}

#109
texture_and_sampler_types -> depth_texture_type · : {}

#110
texture_and_sampler_types -> sampled_texture_type · '<' type_specifier '>' : {}

#111
texture_and_sampler_types -> multisampled_texture_type · '<' type_specifier '>' : {}

#112
texture_and_sampler_types -> storage_texture_type · '<' texel_format ',' access_mode '>' : {}

#113
decimal_int_literal -> /0[iu]?/ · : {}

#114
decimal_int_literal -> /[1-9][0-9]*[iu]?/ · : {}

#115
hex_int_literal -> /0[xX][0-9a-fA-F]+[iu]?/ · : {}

#116
decimal_float_literal -> /0[fh]/ · : {}

#117
decimal_float_literal -> /[1-9][0-9]*[fh]/ · : {}

#118
decimal_float_literal -> /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ · : {}

#119
decimal_float_literal -> /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ · : {}

#120
decimal_float_literal -> /[0-9]+[eE][+-]?[0-9]+[fh]?/ · : {}

#121
hex_float_literal -> /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ · : {}

#122
hex_float_literal -> /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ · : {}

#123
hex_float_literal -> /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ · : {}

#124
sampler_type -> 'sampler' · : {}

#125
sampler_type -> 'sampler_comparison' · : {}

#126
depth_texture_type -> 'texture_depth_2d' · : {}

#127
depth_texture_type -> 'texture_depth_2d_array' · : {}

#128
depth_texture_type -> 'texture_depth_cube' · : {}

#129
depth_texture_type -> 'texture_depth_cube_array' · : {}

#130
depth_texture_type -> 'texture_depth_multisampled_2d' · : {}

#131
sampled_texture_type -> 'texture_1d' · : {}

#132
sampled_texture_type -> 'texture_2d' · : {}

#133
sampled_texture_type -> 'texture_2d_array' · : {}

#134
sampled_texture_type -> 'texture_3d' · : {}

#135
sampled_texture_type -> 'texture_cube' · : {}

#136
sampled_texture_type -> 'texture_cube_array' · : {}

#137
multisampled_texture_type -> 'texture_multisampled_2d' · : {}

#138
storage_texture_type -> 'texture_storage_1d' · : {}

#139
storage_texture_type -> 'texture_storage_2d' · : {}

#140
storage_texture_type -> 'texture_storage_2d_array' · : {}

#141
storage_texture_type -> 'texture_storage_3d' · : {}

#142
function_decl -> function_decl/0.0 function_header · compound_statement : {EndOfText}
compound_statement -> · '{' compound_statement/0.1 '}' : {EndOfText}

#143
function_header -> 'fn' · ident '(' function_header/0.3 ')' function_header/0.5 : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}

#144
struct_decl -> 'struct' ident · struct_body_decl : {EndOfText}
struct_body_decl -> · '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' : {EndOfText}

#145
type_alias_decl -> 'type' ident · '=' type_specifier : {}

#146
global_constant_decl -> global_constant_decl/1.0 'override' · optionally_typed_ident global_constant_decl/1.3 : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {}

#147
global_constant_decl -> 'const' optionally_typed_ident · '=' expression : {}

#148
optionally_typed_ident -> ident · optionally_typed_ident/0.1 : {}
optionally_typed_ident/0.1 -> · ':' type_specifier : {}

#149
global_variable_decl -> global_variable_decl/0.0 variable_decl · global_variable_decl/0.2 : {}
global_variable_decl/0.2 -> · '=' expression : {}

#150
variable_decl -> 'var' · variable_decl/0.1 optionally_typed_ident : {}
variable_decl/0.1 -> · variable_qualifier : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_qualifier -> · '<' address_space variable_qualifier/0.2 '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#151
global_decl -> static_assert_statement ';' · : {EndOfText}

#152
global_decl -> type_alias_decl ';' · : {EndOfText}

#153
global_decl -> global_constant_decl ';' · : {EndOfText}

#154
global_decl -> global_variable_decl ';' · : {EndOfText}

#155
translation_unit/0.1/0 -> global_decl translation_unit/0.1/0 · : {EndOfText}

#156
global_directive -> 'enable' extension_name ';' · : {EndOfText}

#157
variable_decl -> 'var' variable_decl/0.1 · optionally_typed_ident : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {}

#158
variable_decl/0.1 -> variable_qualifier · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#159
variable_qualifier -> '<' · address_space variable_qualifier/0.2 '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
address_space -> · 'function' : {}
address_space -> · 'private' : {}
address_space -> · 'storage' : {}
address_space -> · 'uniform' : {}
address_space -> · 'workgroup' : {}

#160
global_variable_decl -> global_variable_decl/0.0 variable_decl global_variable_decl/0.2 · : {}

#161
global_variable_decl/0.2 -> '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#162
optionally_typed_ident -> ident optionally_typed_ident/0.1 · : {}

#163
optionally_typed_ident/0.1 -> ':' · type_specifier : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#164
global_constant_decl -> 'const' optionally_typed_ident '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#165
global_constant_decl -> global_constant_decl/1.0 'override' optionally_typed_ident · global_constant_decl/1.3 : {}
global_constant_decl/1.3 -> · '=' expression : {}

#166
type_alias_decl -> 'type' ident '=' · type_specifier : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#167
struct_decl -> 'struct' ident struct_body_decl · : {EndOfText}

#168
struct_body_decl -> '{' · struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' : {EndOfText}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
struct_member -> · struct_member/0.0 member_ident ':' type_specifier : {}
struct_member/0.0 -> · struct_member/0.0/0 : {}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#169
function_header -> 'fn' ident · '(' function_header/0.3 ')' function_header/0.5 : {}

#170
function_decl -> function_decl/0.0 function_header compound_statement · : {EndOfText}

#171
compound_statement -> '{' · compound_statement/0.1 '}' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
break_statement -> · 'break' : {}
compound_statement -> · '{' compound_statement/0.1 '}' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.1 -> · compound_statement/0.1/0 : {}
compound_statement/0.1/0 -> · statement compound_statement/0.1/0 : {}
continue_statement -> · 'continue' : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
decrement_statement -> · lhs_expression '--' : {}
for_statement -> · 'for' '(' for_header ')' compound_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
if_clause -> · 'if' expression compound_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}
loop_statement -> · 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
return_statement -> · 'return' return_statement/0.1 : {}
statement -> · ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · 'discard' ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'static_assert' expression : {}
switch_statement -> · 'switch' expression '{' switch_statement/0.3 '}' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
while_statement -> · 'while' expression compound_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#172
texture_and_sampler_types -> storage_texture_type '<' · texel_format ',' access_mode '>' : {}
texel_format -> · 'bgra8unorm' : {}
texel_format -> · 'r32float' : {}
texel_format -> · 'r32sint' : {}
texel_format -> · 'r32uint' : {}
texel_format -> · 'rg32float' : {}
texel_format -> · 'rg32sint' : {}
texel_format -> · 'rg32uint' : {}
texel_format -> · 'rgba16float' : {}
texel_format -> · 'rgba16sint' : {}
texel_format -> · 'rgba16uint' : {}
texel_format -> · 'rgba32float' : {}
texel_format -> · 'rgba32sint' : {}
texel_format -> · 'rgba32uint' : {}
texel_format -> · 'rgba8sint' : {}
texel_format -> · 'rgba8snorm' : {}
texel_format -> · 'rgba8uint' : {}
texel_format -> · 'rgba8unorm' : {}

#173
texture_and_sampler_types -> multisampled_texture_type '<' · type_specifier '>' : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#174
texture_and_sampler_types -> sampled_texture_type '<' · type_specifier '>' : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#175
type_specifier_without_ident -> 'atomic' '<' · type_specifier '>' : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#176
type_specifier_without_ident -> 'ptr' '<' · address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
address_space -> · 'function' : {}
address_space -> · 'private' : {}
address_space -> · 'storage' : {}
address_space -> · 'uniform' : {}
address_space -> · 'workgroup' : {}

#177
paren_expression -> '(' expression · ')' : {}

#178
array_type_specifier -> 'array' '<' · type_specifier array_type_specifier/0.3 '>' : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#179
type_specifier_without_ident -> mat_prefix '<' · type_specifier '>' : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#180
type_specifier_without_ident -> vec_prefix '<' · type_specifier '>' : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#181
primary_expression -> 'bitcast' '<' · type_specifier '>' paren_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#182
primary_expression -> callable argument_expression_list · : {}

#183
argument_expression_list -> '(' · argument_expression_list/0.1 ')' : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
argument_expression_list/0.1 -> · expression_comma_list : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
expression_comma_list -> · expression expression_comma_list/0.1 expression_comma_list/0.2 : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#184
singular_expression -> primary_expression singular_expression/0.1 · : {}

#185
singular_expression/0.1 -> component_or_swizzle_specifier · : {}

#186
component_or_swizzle_specifier -> '[' · expression ']' component_or_swizzle_specifier/0.3 : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#187
component_or_swizzle_specifier -> '.' · member_ident component_or_swizzle_specifier/1.2 : {}
component_or_swizzle_specifier -> '.' · swizzle_name component_or_swizzle_specifier/2.2 : {}
member_ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
swizzle_name -> · '/[rgba]/' : {}
swizzle_name -> · '/[rgba][rgba]/' : {}
swizzle_name -> · '/[rgba][rgba][rgba]/' : {}
swizzle_name -> · '/[rgba][rgba][rgba][rgba]/' : {}
swizzle_name -> · '/[xyzw]/' : {}
swizzle_name -> · '/[xyzw][xyzw]/' : {}
swizzle_name -> · '/[xyzw][xyzw][xyzw]/' : {}
swizzle_name -> · '/[xyzw][xyzw][xyzw][xyzw]/' : {}

#188
unary_expression -> '&' unary_expression · : {}

#189
unary_expression -> '*' unary_expression · : {}

#190
unary_expression -> '~' unary_expression · : {}

#191
unary_expression -> '!' unary_expression · : {}

#192
unary_expression -> '-' unary_expression · : {}

#193
multiplicative_expression -> multiplicative_expression multiplicative_operator · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#194
multiplicative_operator -> '*' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#195
multiplicative_operator -> '/' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#196
multiplicative_operator -> '%' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#197
shift_expression -> unary_expression '<<' · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#198
shift_expression -> unary_expression '>>' · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#199
additive_expression -> additive_expression additive_operator · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#200
additive_operator -> '+' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#201
additive_operator -> '-' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#202
binary_xor_expression -> binary_xor_expression '^' · unary_expression : {}
bitwise_expression -> binary_xor_expression '^' · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#203
binary_or_expression -> binary_or_expression '|' · unary_expression : {}
bitwise_expression -> binary_or_expression '|' · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#204
binary_and_expression -> binary_and_expression '&' · unary_expression : {}
bitwise_expression -> binary_and_expression '&' · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#205
relational_expression -> shift_expression '<' · shift_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#206
relational_expression -> shift_expression '>' · shift_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#207
relational_expression -> shift_expression '<=' · shift_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#208
relational_expression -> shift_expression '>=' · shift_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#209
relational_expression -> shift_expression '==' · shift_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#210
relational_expression -> shift_expression '!=' · shift_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#211
expression -> short_circuit_and_expression '&&' · relational_expression : {}
short_circuit_and_expression -> short_circuit_and_expression '&&' · relational_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#212
expression -> short_circuit_or_expression '||' · relational_expression : {}
short_circuit_or_expression -> short_circuit_or_expression '||' · relational_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#213
attribute -> '@' 'workgroup_size' '(' · expression ',' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'workgroup_size' '(' · expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'workgroup_size' '(' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#214
attribute -> '@' 'size' '(' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#215
attribute -> '@' 'location' '(' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#216
attribute -> '@' 'interpolate' '(' · interpolation_type_name ',' interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'interpolate' '(' · interpolation_type_name attrib_end : {'f16' 'texture_multisampled_2d'}
interpolation_type_name -> · 'flat' : {}
interpolation_type_name -> · 'linear' : {}
interpolation_type_name -> · 'perspective' : {}

#217
attribute -> '@' 'id' '(' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#218
attribute -> '@' 'group' '(' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#219
attribute -> '@' 'builtin' '(' · builtin_value_name attrib_end : {'f16' 'texture_multisampled_2d'}
builtin_value_name -> · 'frag_depth' : {}
builtin_value_name -> · 'front_facing' : {}
builtin_value_name -> · 'global_invocation_id' : {}
builtin_value_name -> · 'instance_index' : {}
builtin_value_name -> · 'local_invocation_id' : {}
builtin_value_name -> · 'local_invocation_index' : {}
builtin_value_name -> · 'num_workgroups' : {}
builtin_value_name -> · 'position' : {}
builtin_value_name -> · 'sample_index' : {}
builtin_value_name -> · 'sample_mask' : {}
builtin_value_name -> · 'vertex_index' : {}
builtin_value_name -> · 'workgroup_id' : {}

#220
attribute -> '@' 'binding' '(' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#221
attribute -> '@' 'align' '(' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#222
attribute -> '@' 'align' '(' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#223
attribute -> '@' 'binding' '(' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#224
attribute -> '@' 'builtin' '(' builtin_value_name · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#225
builtin_value_name -> 'vertex_index' · : {}

#226
builtin_value_name -> 'instance_index' · : {}

#227
builtin_value_name -> 'position' · : {}

#228
builtin_value_name -> 'front_facing' · : {}

#229
builtin_value_name -> 'frag_depth' · : {}

#230
builtin_value_name -> 'local_invocation_id' · : {}

#231
builtin_value_name -> 'local_invocation_index' · : {}

#232
builtin_value_name -> 'global_invocation_id' · : {}

#233
builtin_value_name -> 'workgroup_id' · : {}

#234
builtin_value_name -> 'num_workgroups' · : {}

#235
builtin_value_name -> 'sample_index' · : {}

#236
builtin_value_name -> 'sample_mask' · : {}

#237
attribute -> '@' 'group' '(' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#238
attribute -> '@' 'id' '(' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#239
attribute -> '@' 'interpolate' '(' interpolation_type_name · ',' interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'interpolate' '(' interpolation_type_name · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#240
interpolation_type_name -> 'perspective' · : {}

#241
interpolation_type_name -> 'linear' · : {}

#242
interpolation_type_name -> 'flat' · : {}

#243
attribute -> '@' 'location' '(' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#244
attribute -> '@' 'size' '(' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#245
attribute -> '@' 'workgroup_size' '(' expression · ',' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'workgroup_size' '(' expression · ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'workgroup_size' '(' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#246
expression -> short_circuit_or_expression '||' relational_expression · : {}
short_circuit_or_expression -> short_circuit_or_expression '||' relational_expression · : {}

#247
multiplicative_expression -> unary_expression · : {}
shift_expression -> unary_expression · '<<' unary_expression : {}
shift_expression -> unary_expression · '>>' unary_expression : {}

#248
expression -> short_circuit_and_expression '&&' relational_expression · : {}
short_circuit_and_expression -> short_circuit_and_expression '&&' relational_expression · : {}

#249
relational_expression -> shift_expression '!=' shift_expression · : {}

#250
relational_expression -> shift_expression '==' shift_expression · : {}

#251
relational_expression -> shift_expression '>=' shift_expression · : {}

#252
relational_expression -> shift_expression '<=' shift_expression · : {}

#253
relational_expression -> shift_expression '>' shift_expression · : {}

#254
relational_expression -> shift_expression '<' shift_expression · : {}

#255
binary_and_expression -> binary_and_expression '&' unary_expression · : {}
bitwise_expression -> binary_and_expression '&' unary_expression · : {}

#256
binary_or_expression -> binary_or_expression '|' unary_expression · : {}
bitwise_expression -> binary_or_expression '|' unary_expression · : {}

#257
binary_xor_expression -> binary_xor_expression '^' unary_expression · : {}
bitwise_expression -> binary_xor_expression '^' unary_expression · : {}

#258
additive_expression -> additive_expression additive_operator multiplicative_expression · : {}
multiplicative_expression -> multiplicative_expression · multiplicative_operator unary_expression : {}
multiplicative_operator -> · '%' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_operator -> · '*' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_operator -> · '/' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#259
multiplicative_expression -> unary_expression · : {}

#260
shift_expression -> unary_expression '>>' unary_expression · : {}

#261
shift_expression -> unary_expression '<<' unary_expression · : {}

#262
multiplicative_expression -> multiplicative_expression multiplicative_operator unary_expression · : {}

#263
component_or_swizzle_specifier -> '.' member_ident · component_or_swizzle_specifier/1.2 : {}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {}
component_or_swizzle_specifier/1.2 -> · component_or_swizzle_specifier : {}

#264
component_or_swizzle_specifier -> '.' swizzle_name · component_or_swizzle_specifier/2.2 : {}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {}
component_or_swizzle_specifier/2.2 -> · component_or_swizzle_specifier : {}

#265
member_ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ · : {}

#266
swizzle_name -> '/[rgba]/' · : {}

#267
swizzle_name -> '/[rgba][rgba]/' · : {}

#268
swizzle_name -> '/[rgba][rgba][rgba]/' · : {}

#269
swizzle_name -> '/[rgba][rgba][rgba][rgba]/' · : {}

#270
swizzle_name -> '/[xyzw]/' · : {}

#271
swizzle_name -> '/[xyzw][xyzw]/' · : {}

#272
swizzle_name -> '/[xyzw][xyzw][xyzw]/' · : {}

#273
swizzle_name -> '/[xyzw][xyzw][xyzw][xyzw]/' · : {}

#274
component_or_swizzle_specifier -> '[' expression · ']' component_or_swizzle_specifier/0.3 : {}

#275
argument_expression_list -> '(' argument_expression_list/0.1 · ')' : {}

#276
argument_expression_list/0.1 -> expression_comma_list · : {}

#277
expression_comma_list -> expression · expression_comma_list/0.1 expression_comma_list/0.2 : {}
expression_comma_list/0.1 -> · expression_comma_list/0.1/0 : {}
expression_comma_list/0.1/0 -> · expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 : {}
expression_comma_list/0.1/0/0.0 -> · ',' expression : {}

#278
primary_expression -> 'bitcast' '<' type_specifier · '>' paren_expression : {}

#279
type_specifier -> ident · : {}

#280
type_specifier -> type_specifier_without_ident · : {}

#281
type_specifier_without_ident -> vec_prefix · '<' type_specifier '>' : {}

#282
type_specifier_without_ident -> mat_prefix · '<' type_specifier '>' : {}

#283
array_type_specifier -> 'array' · '<' type_specifier array_type_specifier/0.3 '>' : {}

#284
type_specifier_without_ident -> vec_prefix '<' type_specifier · '>' : {}

#285
type_specifier_without_ident -> mat_prefix '<' type_specifier · '>' : {}

#286
array_type_specifier -> 'array' '<' type_specifier · array_type_specifier/0.3 '>' : {}
array_type_specifier/0.3 -> · ',' element_count_expression : {}

#287
paren_expression -> '(' expression ')' · : {}

#288
type_specifier_without_ident -> 'ptr' '<' address_space · ',' type_specifier type_specifier_without_ident/7.5 '>' : {}

#289
address_space -> 'function' · : {}

#290
address_space -> 'private' · : {}

#291
address_space -> 'workgroup' · : {}

#292
address_space -> 'uniform' · : {}

#293
address_space -> 'storage' · : {}

#294
type_specifier_without_ident -> 'atomic' '<' type_specifier · '>' : {}

#295
texture_and_sampler_types -> sampled_texture_type '<' type_specifier · '>' : {}

#296
texture_and_sampler_types -> multisampled_texture_type '<' type_specifier · '>' : {}

#297
texture_and_sampler_types -> storage_texture_type '<' texel_format · ',' access_mode '>' : {}

#298
texel_format -> 'rgba8unorm' · : {}

#299
texel_format -> 'rgba8snorm' · : {}

#300
texel_format -> 'rgba8uint' · : {}

#301
texel_format -> 'rgba8sint' · : {}

#302
texel_format -> 'rgba16uint' · : {}

#303
texel_format -> 'rgba16sint' · : {}

#304
texel_format -> 'rgba16float' · : {}

#305
texel_format -> 'r32uint' · : {}

#306
texel_format -> 'r32sint' · : {}

#307
texel_format -> 'r32float' · : {}

#308
texel_format -> 'rg32uint' · : {}

#309
texel_format -> 'rg32sint' · : {}

#310
texel_format -> 'rg32float' · : {}

#311
texel_format -> 'rgba32uint' · : {}

#312
texel_format -> 'rgba32sint' · : {}

#313
texel_format -> 'rgba32float' · : {}

#314
texel_format -> 'bgra8unorm' · : {}

#315
compound_statement -> '{' compound_statement/0.1 · '}' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}

#316
compound_statement/0.1 -> compound_statement/0.1/0 · : {}

#317
compound_statement/0.1/0 -> statement · compound_statement/0.1/0 : {}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
break_statement -> · 'break' : {}
compound_statement -> · '{' compound_statement/0.1 '}' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.1/0 -> · statement compound_statement/0.1/0 : {}
continue_statement -> · 'continue' : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
decrement_statement -> · lhs_expression '--' : {}
for_statement -> · 'for' '(' for_header ')' compound_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
if_clause -> · 'if' expression compound_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}
loop_statement -> · 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
return_statement -> · 'return' return_statement/0.1 : {}
statement -> · ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · 'discard' ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'static_assert' expression : {}
switch_statement -> · 'switch' expression '{' switch_statement/0.3 '}' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
while_statement -> · 'while' expression compound_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#318
statement -> ';' · : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#319
statement -> return_statement · ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#320
statement -> if_statement · : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#321
statement -> switch_statement · : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#322
statement -> loop_statement · : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#323
statement -> for_statement · : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#324
statement -> while_statement · : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#325
statement -> func_call_statement · ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#326
statement -> variable_statement · ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#327
statement -> break_statement · ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#328
statement -> continue_statement · ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#329
statement -> 'discard' · ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#330
statement -> variable_updating_statement · ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#331
statement -> compound_statement · : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#332
statement -> static_assert_statement · ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#333
return_statement -> 'return' · return_statement/0.1 : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
return_statement/0.1 -> · expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#334
if_statement -> if_clause · if_statement/0.1 if_statement/0.2 : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_if_clause -> · 'else' 'if' expression compound_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.1 -> · if_statement/0.1/0 : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.1/0 -> · else_if_clause if_statement/0.1/0 : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#335
switch_statement -> 'switch' · expression '{' switch_statement/0.3 '}' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#336
loop_statement -> 'loop' · '{' loop_statement/0.2 loop_statement/0.3 '}' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#337
for_statement -> 'for' · '(' for_header ')' compound_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#338
while_statement -> 'while' · expression compound_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#339
core_lhs_expression -> ident · : {}
func_call_statement -> ident · argument_expression_list : {}
argument_expression_list -> · '(' argument_expression_list/0.1 ')' : {}

#340
variable_statement -> variable_decl · '=' expression : {}
variable_statement -> variable_decl · : {}

#341
variable_statement -> 'let' · optionally_typed_ident '=' expression : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {}

#342
variable_statement -> 'const' · optionally_typed_ident '=' expression : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {}

#343
break_statement -> 'break' · : {}

#344
continue_statement -> 'continue' · : {}

#345
variable_updating_statement -> assignment_statement · : {}

#346
variable_updating_statement -> increment_statement · : {}

#347
variable_updating_statement -> decrement_statement · : {}

#348
if_clause -> 'if' · expression compound_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#349
assignment_statement -> lhs_expression · assignment_statement/0.1 expression : {}
decrement_statement -> lhs_expression · '--' : {}
increment_statement -> lhs_expression · '++' : {}
assignment_statement/0.1 -> · '=' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
assignment_statement/0.1 -> · compound_assignment_operator : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '%=' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '&=' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '*=' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '+=' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '-=' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '/=' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '<<=' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '>>=' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '^=' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '|=' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#350
assignment_statement -> '_' · '=' expression : {}

#351
lhs_expression -> core_lhs_expression · lhs_expression/0.1 : {}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {}
lhs_expression/0.1 -> · component_or_swizzle_specifier : {}

#352
lhs_expression -> '*' · lhs_expression : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}

#353
lhs_expression -> '&' · lhs_expression : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}

#354
core_lhs_expression -> '(' · lhs_expression ')' : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}

#355
function_header -> 'fn' ident '(' · function_header/0.3 ')' function_header/0.5 : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
function_header/0.3 -> · param_list : {}
param -> · param/0.0 ident ':' type_specifier : {}
param/0.0 -> · param/0.0/0 : {}
param/0.0/0 -> · attribute param/0.0/0 : {}
param_list -> · param param_list/0.1 param_list/0.2 : {}

#356
struct_body_decl -> '{' struct_member · struct_body_decl/0.2 struct_body_decl/0.3 '}' : {EndOfText}
struct_body_decl/0.2 -> · struct_body_decl/0.2/0 : {}
struct_body_decl/0.2/0 -> · struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 : {}
struct_body_decl/0.2/0/0.0 -> · ',' struct_member : {}

#357
struct_member -> struct_member/0.0 · member_ident ':' type_specifier : {}
member_ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}

#358
struct_member/0.0 -> struct_member/0.0/0 · : {}

#359
struct_member/0.0/0 -> attribute · struct_member/0.0/0 : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#360
type_alias_decl -> 'type' ident '=' type_specifier · : {}

#361
global_constant_decl -> global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 · : {}

#362
global_constant_decl/1.3 -> '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#363
global_constant_decl -> 'const' optionally_typed_ident '=' expression · : {}

#364
optionally_typed_ident/0.1 -> ':' type_specifier · : {}

#365
global_variable_decl/0.2 -> '=' expression · : {}

#366
variable_qualifier -> '<' address_space · variable_qualifier/0.2 '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_qualifier/0.2 -> · ',' access_mode : {}

#367
variable_decl -> 'var' variable_decl/0.1 optionally_typed_ident · : {}

#368
variable_qualifier -> '<' address_space variable_qualifier/0.2 · '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#369
variable_qualifier/0.2 -> ',' · access_mode : {}
access_mode -> · 'read' : {}
access_mode -> · 'read_write' : {}
access_mode -> · 'write' : {}

#370
global_constant_decl/1.3 -> '=' expression · : {}

#371
struct_member/0.0/0 -> attribute struct_member/0.0/0 · : {}

#372
struct_member -> struct_member/0.0 member_ident · ':' type_specifier : {}

#373
struct_body_decl -> '{' struct_member struct_body_decl/0.2 · struct_body_decl/0.3 '}' : {EndOfText}
struct_body_decl/0.3 -> · ',' : {}

#374
struct_body_decl/0.2 -> struct_body_decl/0.2/0 · : {}

#375
struct_body_decl/0.2/0 -> struct_body_decl/0.2/0/0.0 · struct_body_decl/0.2/0 : {}
struct_body_decl/0.2/0 -> · struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 : {}
struct_body_decl/0.2/0/0.0 -> · ',' struct_member : {}

#376
struct_body_decl/0.2/0/0.0 -> ',' · struct_member : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
struct_member -> · struct_member/0.0 member_ident ':' type_specifier : {}
struct_member/0.0 -> · struct_member/0.0/0 : {}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#377
function_header -> 'fn' ident '(' function_header/0.3 · ')' function_header/0.5 : {}

#378
function_header/0.3 -> param_list · : {}

#379
param_list -> param · param_list/0.1 param_list/0.2 : {}
param_list/0.1 -> · param_list/0.1/0 : {}
param_list/0.1/0 -> · param_list/0.1/0/0.0 param_list/0.1/0 : {}
param_list/0.1/0/0.0 -> · ',' param : {}

#380
param -> param/0.0 · ident ':' type_specifier : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}

#381
param/0.0 -> param/0.0/0 · : {}

#382
param/0.0/0 -> attribute · param/0.0/0 : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
param/0.0/0 -> · attribute param/0.0/0 : {}

#383
core_lhs_expression -> '(' lhs_expression · ')' : {}

#384
core_lhs_expression -> ident · : {}

#385
lhs_expression -> '&' lhs_expression · : {}

#386
lhs_expression -> '*' lhs_expression · : {}

#387
lhs_expression -> core_lhs_expression lhs_expression/0.1 · : {}

#388
lhs_expression/0.1 -> component_or_swizzle_specifier · : {}

#389
assignment_statement -> '_' '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#390
assignment_statement -> lhs_expression assignment_statement/0.1 · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#391
increment_statement -> lhs_expression '++' · : {}

#392
decrement_statement -> lhs_expression '--' · : {}

#393
assignment_statement/0.1 -> '=' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#394
assignment_statement/0.1 -> compound_assignment_operator · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#395
compound_assignment_operator -> '+=' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#396
compound_assignment_operator -> '-=' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#397
compound_assignment_operator -> '*=' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#398
compound_assignment_operator -> '/=' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#399
compound_assignment_operator -> '%=' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#400
compound_assignment_operator -> '&=' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#401
compound_assignment_operator -> '|=' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#402
compound_assignment_operator -> '^=' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#403
compound_assignment_operator -> '>>=' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#404
compound_assignment_operator -> '<<=' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#405
if_clause -> 'if' expression · compound_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · '{' compound_statement/0.1 '}' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#406
variable_statement -> 'const' optionally_typed_ident · '=' expression : {}

#407
variable_statement -> 'let' optionally_typed_ident · '=' expression : {}

#408
variable_statement -> variable_decl '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#409
func_call_statement -> ident argument_expression_list · : {}

#410
while_statement -> 'while' expression · compound_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · '{' compound_statement/0.1 '}' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#411
for_statement -> 'for' '(' · for_header ')' compound_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
decrement_statement -> · lhs_expression '--' : {}
for_header -> · for_header/0.0 ';' for_header/0.2 ';' for_header/0.4 : {}
for_header/0.0 -> · for_init : {}
for_init -> · func_call_statement : {}
for_init -> · variable_statement : {}
for_init -> · variable_updating_statement : {}
func_call_statement -> · ident argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}

#412
loop_statement -> 'loop' '{' · loop_statement/0.2 loop_statement/0.3 '}' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
break_statement -> · 'break' : {}
compound_statement -> · '{' compound_statement/0.1 '}' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continue_statement -> · 'continue' : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
decrement_statement -> · lhs_expression '--' : {}
for_statement -> · 'for' '(' for_header ')' compound_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
if_clause -> · 'if' expression compound_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}
loop_statement -> · 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement/0.2 -> · loop_statement/0.2/0 : {}
loop_statement/0.2/0 -> · statement loop_statement/0.2/0 : {}
return_statement -> · 'return' return_statement/0.1 : {}
statement -> · ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · 'discard' ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'static_assert' expression : {}
switch_statement -> · 'switch' expression '{' switch_statement/0.3 '}' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
while_statement -> · 'while' expression compound_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#413
switch_statement -> 'switch' expression · '{' switch_statement/0.3 '}' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#414
if_statement -> if_clause if_statement/0.1 · if_statement/0.2 : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_clause -> · 'else' compound_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.2 -> · else_clause : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#415
if_statement/0.1 -> if_statement/0.1/0 · : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#416
if_statement/0.1/0 -> else_if_clause · if_statement/0.1/0 : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_if_clause -> · 'else' 'if' expression compound_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.1/0 -> · else_if_clause if_statement/0.1/0 : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#417
else_if_clause -> 'else' · 'if' expression compound_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#418
return_statement -> 'return' return_statement/0.1 · : {}

#419
return_statement/0.1 -> expression · : {}

#420
statement -> static_assert_statement ';' · : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#421
statement -> variable_updating_statement ';' · : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#422
statement -> 'discard' ';' · : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#423
statement -> continue_statement ';' · : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#424
statement -> break_statement ';' · : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#425
statement -> variable_statement ';' · : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#426
statement -> func_call_statement ';' · : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#427
statement -> return_statement ';' · : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#428
compound_statement/0.1/0 -> statement compound_statement/0.1/0 · : {}

#429
compound_statement -> '{' compound_statement/0.1 '}' · : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}

#430
texture_and_sampler_types -> storage_texture_type '<' texel_format ',' · access_mode '>' : {}
access_mode -> · 'read' : {}
access_mode -> · 'read_write' : {}
access_mode -> · 'write' : {}

#431
texture_and_sampler_types -> multisampled_texture_type '<' type_specifier '>' · : {}

#432
texture_and_sampler_types -> sampled_texture_type '<' type_specifier '>' · : {}

#433
type_specifier_without_ident -> 'atomic' '<' type_specifier '>' · : {}

#434
type_specifier_without_ident -> 'ptr' '<' address_space ',' · type_specifier type_specifier_without_ident/7.5 '>' : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#435
array_type_specifier -> 'array' '<' type_specifier array_type_specifier/0.3 · '>' : {}

#436
array_type_specifier/0.3 -> ',' · element_count_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
element_count_expression -> · additive_expression : {}
element_count_expression -> · bitwise_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#437
type_specifier_without_ident -> mat_prefix '<' type_specifier '>' · : {}

#438
type_specifier_without_ident -> vec_prefix '<' type_specifier '>' · : {}

#439
primary_expression -> 'bitcast' '<' type_specifier '>' · paren_expression : {}
paren_expression -> · '(' expression ')' : {}

#440
expression_comma_list -> expression expression_comma_list/0.1 · expression_comma_list/0.2 : {}
expression_comma_list/0.2 -> · ',' : {}

#441
expression_comma_list/0.1 -> expression_comma_list/0.1/0 · : {}

#442
expression_comma_list/0.1/0 -> expression_comma_list/0.1/0/0.0 · expression_comma_list/0.1/0 : {}
expression_comma_list/0.1/0 -> · expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 : {}
expression_comma_list/0.1/0/0.0 -> · ',' expression : {}

#443
expression_comma_list/0.1/0/0.0 -> ',' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#444
argument_expression_list -> '(' argument_expression_list/0.1 ')' · : {}

#445
component_or_swizzle_specifier -> '[' expression ']' · component_or_swizzle_specifier/0.3 : {}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {}
component_or_swizzle_specifier/0.3 -> · component_or_swizzle_specifier : {}

#446
component_or_swizzle_specifier -> '.' swizzle_name component_or_swizzle_specifier/2.2 · : {}

#447
component_or_swizzle_specifier/2.2 -> component_or_swizzle_specifier · : {}

#448
component_or_swizzle_specifier -> '.' member_ident component_or_swizzle_specifier/1.2 · : {}

#449
component_or_swizzle_specifier/1.2 -> component_or_swizzle_specifier · : {}

#450
attribute -> '@' 'workgroup_size' '(' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#451
attrib_end/0.0 -> ',' · : {}
attribute -> '@' 'workgroup_size' '(' expression ',' · expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'workgroup_size' '(' expression ',' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#452
attrib_end -> attrib_end/0.0 · ')' : {'f16' 'texture_multisampled_2d'}

#453
attribute -> '@' 'size' '(' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#454
attrib_end/0.0 -> ',' · : {}

#455
attribute -> '@' 'location' '(' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#456
attribute -> '@' 'interpolate' '(' interpolation_type_name attrib_end · : {'f16' 'texture_multisampled_2d'}

#457
attrib_end/0.0 -> ',' · : {}
attribute -> '@' 'interpolate' '(' interpolation_type_name ',' · interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
interpolation_sample_name -> · 'center' : {}
interpolation_sample_name -> · 'centroid' : {}
interpolation_sample_name -> · 'sample' : {}

#458
attribute -> '@' 'id' '(' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#459
attribute -> '@' 'group' '(' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#460
attribute -> '@' 'builtin' '(' builtin_value_name attrib_end · : {'f16' 'texture_multisampled_2d'}

#461
attribute -> '@' 'binding' '(' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#462
attribute -> '@' 'align' '(' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#463
attribute -> '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#464
interpolation_sample_name -> 'center' · : {}

#465
interpolation_sample_name -> 'centroid' · : {}

#466
interpolation_sample_name -> 'sample' · : {}

#467
attrib_end -> attrib_end/0.0 ')' · : {'f16' 'texture_multisampled_2d'}

#468
attribute -> '@' 'workgroup_size' '(' expression ',' expression · ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'workgroup_size' '(' expression ',' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#469
component_or_swizzle_specifier -> '[' expression ']' component_or_swizzle_specifier/0.3 · : {}

#470
component_or_swizzle_specifier/0.3 -> component_or_swizzle_specifier · : {}

#471
expression_comma_list/0.1/0/0.0 -> ',' expression · : {}

#472
expression_comma_list/0.1/0 -> expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 · : {}

#473
expression_comma_list -> expression expression_comma_list/0.1 expression_comma_list/0.2 · : {}

#474
expression_comma_list/0.2 -> ',' · : {}

#475
primary_expression -> 'bitcast' '<' type_specifier '>' paren_expression · : {}

#476
array_type_specifier/0.3 -> ',' element_count_expression · : {}

#477
additive_expression -> additive_expression · additive_operator multiplicative_expression : {}
element_count_expression -> additive_expression · : {}
additive_operator -> · '+' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
additive_operator -> · '-' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#478
element_count_expression -> bitwise_expression · : {}

#479
binary_and_expression -> unary_expression · : {}
binary_or_expression -> unary_expression · : {}
binary_xor_expression -> unary_expression · : {}
multiplicative_expression -> unary_expression · : {}

#480
array_type_specifier -> 'array' '<' type_specifier array_type_specifier/0.3 '>' · : {}

#481
type_specifier_without_ident -> 'ptr' '<' address_space ',' type_specifier · type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident/7.5 -> · ',' access_mode : {}

#482
texture_and_sampler_types -> storage_texture_type '<' texel_format ',' access_mode · '>' : {}

#483
access_mode -> 'read' · : {}

#484
access_mode -> 'write' · : {}

#485
access_mode -> 'read_write' · : {}

#486
else_if_clause -> 'else' 'if' · expression compound_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#487
if_statement/0.1/0 -> else_if_clause if_statement/0.1/0 · : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#488
if_statement -> if_clause if_statement/0.1 if_statement/0.2 · : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#489
if_statement/0.2 -> else_clause · : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#490
else_clause -> 'else' · compound_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · '{' compound_statement/0.1 '}' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#491
switch_statement -> 'switch' expression '{' · switch_statement/0.3 '}' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
case_clause -> · 'case' case_selectors case_clause/0.2 compound_statement : {}
default_alone_clause -> · 'default' default_alone_clause/0.1 compound_statement : {}
switch_body -> · case_clause : {}
switch_body -> · default_alone_clause : {}
switch_statement/0.3 -> · switch_statement/0.3/0 : {}
switch_statement/0.3/0 -> · switch_body switch_statement/0.3/0 : {}

#492
loop_statement -> 'loop' '{' loop_statement/0.2 · loop_statement/0.3 '}' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continuing_statement -> · 'continuing' continuing_compound_statement : {}
loop_statement/0.3 -> · continuing_statement : {}

#493
loop_statement/0.2 -> loop_statement/0.2/0 · : {}

#494
loop_statement/0.2/0 -> statement · loop_statement/0.2/0 : {}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
break_statement -> · 'break' : {}
compound_statement -> · '{' compound_statement/0.1 '}' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continue_statement -> · 'continue' : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
decrement_statement -> · lhs_expression '--' : {}
for_statement -> · 'for' '(' for_header ')' compound_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
if_clause -> · 'if' expression compound_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}
loop_statement -> · 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement/0.2/0 -> · statement loop_statement/0.2/0 : {}
return_statement -> · 'return' return_statement/0.1 : {}
statement -> · ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · 'discard' ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'static_assert' expression : {}
switch_statement -> · 'switch' expression '{' switch_statement/0.3 '}' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
while_statement -> · 'while' expression compound_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#495
for_statement -> 'for' '(' for_header · ')' compound_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#496
for_header -> for_header/0.0 · ';' for_header/0.2 ';' for_header/0.4 : {}

#497
for_header/0.0 -> for_init · : {}

#498
for_init -> variable_statement · : {}

#499
for_init -> variable_updating_statement · : {}

#500
for_init -> func_call_statement · : {}

#501
while_statement -> 'while' expression compound_statement · : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#502
variable_statement -> variable_decl '=' expression · : {}

#503
variable_statement -> 'let' optionally_typed_ident '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#504
variable_statement -> 'const' optionally_typed_ident '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#505
if_clause -> 'if' expression compound_statement · : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#506
assignment_statement -> lhs_expression assignment_statement/0.1 expression · : {}

#507
assignment_statement -> '_' '=' expression · : {}

#508
core_lhs_expression -> '(' lhs_expression ')' · : {}

#509
param/0.0/0 -> attribute param/0.0/0 · : {}

#510
param -> param/0.0 ident · ':' type_specifier : {}

#511
param_list -> param param_list/0.1 · param_list/0.2 : {}
param_list/0.2 -> · ',' : {}

#512
param_list/0.1 -> param_list/0.1/0 · : {}

#513
param_list/0.1/0 -> param_list/0.1/0/0.0 · param_list/0.1/0 : {}
param_list/0.1/0 -> · param_list/0.1/0/0.0 param_list/0.1/0 : {}
param_list/0.1/0/0.0 -> · ',' param : {}

#514
param_list/0.1/0/0.0 -> ',' · param : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
param -> · param/0.0 ident ':' type_specifier : {}
param/0.0 -> · param/0.0/0 : {}
param/0.0/0 -> · attribute param/0.0/0 : {}

#515
function_header -> 'fn' ident '(' function_header/0.3 ')' · function_header/0.5 : {}
function_header/0.5 -> · '->' function_header/0.5/0.1 type_specifier : {}

#516
struct_body_decl/0.2/0/0.0 -> ',' struct_member · : {}

#517
struct_body_decl/0.2/0 -> struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 · : {}

#518
struct_body_decl -> '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 · '}' : {EndOfText}

#519
struct_body_decl/0.3 -> ',' · : {}

#520
struct_member -> struct_member/0.0 member_ident ':' · type_specifier : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#521
variable_qualifier/0.2 -> ',' access_mode · : {}

#522
variable_qualifier -> '<' address_space variable_qualifier/0.2 '>' · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#523
struct_member -> struct_member/0.0 member_ident ':' type_specifier · : {}

#524
struct_body_decl -> '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' · : {EndOfText}

#525
function_header -> 'fn' ident '(' function_header/0.3 ')' function_header/0.5 · : {}

#526
function_header/0.5 -> '->' · function_header/0.5/0.1 type_specifier : {}
attribute -> · '@' 'align' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'compute' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'const' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'fragment' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'group' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'id' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'invariant' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'location' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'vertex' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
function_header/0.5/0.1 -> · function_header/0.5/0.1/0 : {'f16' 'texture_multisampled_2d'}
function_header/0.5/0.1/0 -> · attribute function_header/0.5/0.1/0 : {'f16' 'texture_multisampled_2d'}

#527
param_list/0.1/0/0.0 -> ',' param · : {}

#528
param_list/0.1/0 -> param_list/0.1/0/0.0 param_list/0.1/0 · : {}

#529
param_list -> param param_list/0.1 param_list/0.2 · : {}

#530
param_list/0.2 -> ',' · : {}

#531
param -> param/0.0 ident ':' · type_specifier : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#532
variable_statement -> 'const' optionally_typed_ident '=' expression · : {}

#533
variable_statement -> 'let' optionally_typed_ident '=' expression · : {}

#534
for_header -> for_header/0.0 ';' · for_header/0.2 ';' for_header/0.4 : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
for_header/0.2 -> · expression : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#535
for_statement -> 'for' '(' for_header ')' · compound_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · '{' compound_statement/0.1 '}' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#536
loop_statement/0.2/0 -> statement loop_statement/0.2/0 · : {}

#537
loop_statement -> 'loop' '{' loop_statement/0.2 loop_statement/0.3 · '}' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#538
loop_statement/0.3 -> continuing_statement · : {}

#539
continuing_statement -> 'continuing' · continuing_compound_statement : {}
continuing_compound_statement -> · '{' continuing_compound_statement/0.1 continuing_compound_statement/0.2 '}' : {}

#540
switch_statement -> 'switch' expression '{' switch_statement/0.3 · '}' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#541
switch_statement/0.3 -> switch_statement/0.3/0 · : {}

#542
switch_statement/0.3/0 -> switch_body · switch_statement/0.3/0 : {}
case_clause -> · 'case' case_selectors case_clause/0.2 compound_statement : {}
default_alone_clause -> · 'default' default_alone_clause/0.1 compound_statement : {}
switch_body -> · case_clause : {}
switch_body -> · default_alone_clause : {}
switch_statement/0.3/0 -> · switch_body switch_statement/0.3/0 : {}

#543
switch_body -> case_clause · : {}

#544
switch_body -> default_alone_clause · : {}

#545
case_clause -> 'case' · case_selectors case_clause/0.2 compound_statement : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
case_selector -> · 'default' : {}
case_selector -> · expression : {}
case_selectors -> · case_selector case_selectors/0.1 case_selectors/0.2 : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#546
default_alone_clause -> 'default' · default_alone_clause/0.1 compound_statement : {}
default_alone_clause/0.1 -> · ':' : {}

#547
else_clause -> 'else' compound_statement · : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#548
else_if_clause -> 'else' 'if' expression · compound_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · '{' compound_statement/0.1 '}' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#549
texture_and_sampler_types -> storage_texture_type '<' texel_format ',' access_mode '>' · : {}

#550
type_specifier_without_ident -> 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 · '>' : {}

#551
type_specifier_without_ident/7.5 -> ',' · access_mode : {}
access_mode -> · 'read' : {}
access_mode -> · 'read_write' : {}
access_mode -> · 'write' : {}

#552
attribute -> '@' 'workgroup_size' '(' expression ',' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#553
attrib_end/0.0 -> ',' · : {}
attribute -> '@' 'workgroup_size' '(' expression ',' expression ',' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#554
attribute -> '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end · : {'f16' 'texture_multisampled_2d'}

#555
attribute -> '@' 'workgroup_size' '(' expression ',' expression ',' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#556
type_specifier_without_ident/7.5 -> ',' access_mode · : {}

#557
type_specifier_without_ident -> 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' · : {}

#558
else_if_clause -> 'else' 'if' expression compound_statement · : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#559
default_alone_clause -> 'default' default_alone_clause/0.1 · compound_statement : {}
compound_statement -> · '{' compound_statement/0.1 '}' : {}

#560
default_alone_clause/0.1 -> ':' · : {}

#561
case_clause -> 'case' case_selectors · case_clause/0.2 compound_statement : {}
case_clause/0.2 -> · ':' : {}

#562
case_selectors -> case_selector · case_selectors/0.1 case_selectors/0.2 : {}
case_selectors/0.1 -> · case_selectors/0.1/0 : {}
case_selectors/0.1/0 -> · case_selectors/0.1/0/0.0 case_selectors/0.1/0 : {}
case_selectors/0.1/0/0.0 -> · ',' case_selector : {}

#563
case_selector -> 'default' · : {}

#564
case_selector -> expression · : {}

#565
switch_statement/0.3/0 -> switch_body switch_statement/0.3/0 · : {}

#566
switch_statement -> 'switch' expression '{' switch_statement/0.3 '}' · : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#567
continuing_statement -> 'continuing' continuing_compound_statement · : {}

#568
continuing_compound_statement -> '{' · continuing_compound_statement/0.1 continuing_compound_statement/0.2 '}' : {}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
break_statement -> · 'break' : {}
compound_statement -> · '{' compound_statement/0.1 '}' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continue_statement -> · 'continue' : {}
continuing_compound_statement/0.1 -> · continuing_compound_statement/0.1/0 : {'break'}
continuing_compound_statement/0.1/0 -> · statement continuing_compound_statement/0.1/0 : {'break'}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
decrement_statement -> · lhs_expression '--' : {}
for_statement -> · 'for' '(' for_header ')' compound_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
if_clause -> · 'if' expression compound_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}
loop_statement -> · 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
return_statement -> · 'return' return_statement/0.1 : {}
statement -> · ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · 'discard' ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'static_assert' expression : {}
switch_statement -> · 'switch' expression '{' switch_statement/0.3 '}' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
while_statement -> · 'while' expression compound_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#569
loop_statement -> 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' · : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#570
for_statement -> 'for' '(' for_header ')' compound_statement · : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#571
for_header -> for_header/0.0 ';' for_header/0.2 · ';' for_header/0.4 : {}

#572
for_header/0.2 -> expression · : {}

#573
param -> param/0.0 ident ':' type_specifier · : {}

#574
function_header/0.5 -> '->' function_header/0.5/0.1 · type_specifier : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#575
function_header/0.5/0.1 -> function_header/0.5/0.1/0 · : {'f16' 'texture_multisampled_2d'}

#576
function_header/0.5/0.1/0 -> attribute · function_header/0.5/0.1/0 : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'align' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'compute' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'const' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'fragment' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'group' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'id' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'invariant' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'location' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'vertex' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
function_header/0.5/0.1/0 -> · attribute function_header/0.5/0.1/0 : {'f16' 'texture_multisampled_2d'}

#577
function_header/0.5/0.1/0 -> attribute function_header/0.5/0.1/0 · : {'f16' 'texture_multisampled_2d'}

#578
function_header/0.5 -> '->' function_header/0.5/0.1 type_specifier · : {}

#579
for_header -> for_header/0.0 ';' for_header/0.2 ';' · for_header/0.4 : {}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
decrement_statement -> · lhs_expression '--' : {}
for_header/0.4 -> · for_update : {}
for_update -> · func_call_statement : {}
for_update -> · variable_updating_statement : {}
func_call_statement -> · ident argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}

#580
continuing_compound_statement -> '{' continuing_compound_statement/0.1 · continuing_compound_statement/0.2 '}' : {}
break_if_statement -> · 'break' 'if' expression ';' : {}
continuing_compound_statement/0.2 -> · break_if_statement : {}

#581
continuing_compound_statement/0.1 -> continuing_compound_statement/0.1/0 · : {'break'}

#582
continuing_compound_statement/0.1/0 -> statement · continuing_compound_statement/0.1/0 : {'break'}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
break_statement -> · 'break' : {}
compound_statement -> · '{' compound_statement/0.1 '}' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continue_statement -> · 'continue' : {}
continuing_compound_statement/0.1/0 -> · statement continuing_compound_statement/0.1/0 : {'break'}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
decrement_statement -> · lhs_expression '--' : {}
for_statement -> · 'for' '(' for_header ')' compound_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
if_clause -> · 'if' expression compound_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}
loop_statement -> · 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
return_statement -> · 'return' return_statement/0.1 : {}
statement -> · ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · 'discard' ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement ';' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'static_assert' expression : {}
switch_statement -> · 'switch' expression '{' switch_statement/0.3 '}' : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
while_statement -> · 'while' expression compound_statement : {'break' 'continue' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#583
case_selectors -> case_selector case_selectors/0.1 · case_selectors/0.2 : {}
case_selectors/0.2 -> · ',' : {}

#584
case_selectors/0.1 -> case_selectors/0.1/0 · : {}

#585
case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 · case_selectors/0.1/0 : {}
case_selectors/0.1/0 -> · case_selectors/0.1/0/0.0 case_selectors/0.1/0 : {}
case_selectors/0.1/0/0.0 -> · ',' case_selector : {}

#586
case_selectors/0.1/0/0.0 -> ',' · case_selector : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
case_selector -> · 'default' : {}
case_selector -> · expression : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#587
case_clause -> 'case' case_selectors case_clause/0.2 · compound_statement : {}
compound_statement -> · '{' compound_statement/0.1 '}' : {}

#588
case_clause/0.2 -> ':' · : {}

#589
default_alone_clause -> 'default' default_alone_clause/0.1 compound_statement · : {}

#590
attribute -> '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#591
case_clause -> 'case' case_selectors case_clause/0.2 compound_statement · : {}

#592
case_selectors/0.1/0/0.0 -> ',' case_selector · : {}

#593
case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 case_selectors/0.1/0 · : {}

#594
case_selectors -> case_selector case_selectors/0.1 case_selectors/0.2 · : {}

#595
case_selectors/0.2 -> ',' · : {}

#596
continuing_compound_statement/0.1/0 -> statement continuing_compound_statement/0.1/0 · : {'break'}

#597
continuing_compound_statement -> '{' continuing_compound_statement/0.1 continuing_compound_statement/0.2 · '}' : {}

#598
continuing_compound_statement/0.2 -> break_if_statement · : {}

#599
break_if_statement -> 'break' · 'if' expression ';' : {}

#600
for_header -> for_header/0.0 ';' for_header/0.2 ';' for_header/0.4 · : {}

#601
for_header/0.4 -> for_update · : {}

#602
for_update -> variable_updating_statement · : {}

#603
for_update -> func_call_statement · : {}

#604
break_if_statement -> 'break' 'if' · expression ';' : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#605
continuing_compound_statement -> '{' continuing_compound_statement/0.1 continuing_compound_statement/0.2 '}' · : {}

#606
break_if_statement -> 'break' 'if' expression · ';' : {}

#607
break_if_statement -> 'break' 'if' expression ';' · : {}


=Reductions:
r#0 translation_unit/0.0 -> translation_unit/0.0/0 ·
r#1 translation_unit/0.0/0 -> global_directive translation_unit/0.0/0 ·
r#2 translation_unit -> translation_unit/0.0 translation_unit/0.1 ·
r#3 translation_unit/0.1 -> translation_unit/0.1/0 ·
r#4 global_decl -> ';' ·
r#5 global_decl -> struct_decl ·
r#6 global_decl -> function_decl ·
r#7 attribute -> '@' 'const' ·
r#8 attribute -> '@' 'invariant' ·
r#9 attribute -> '@' 'vertex' ·
r#10 attribute -> '@' 'fragment' ·
r#11 attribute -> '@' 'compute' ·
r#12 global_decl -> static_assert_statement ';' ·
r#13 global_decl -> type_alias_decl ';' ·
r#14 global_decl -> global_constant_decl ';' ·
r#15 global_decl -> global_variable_decl ';' ·
r#16 translation_unit/0.1/0 -> global_decl translation_unit/0.1/0 ·
r#17 global_directive -> 'enable' extension_name ';' ·
r#18 variable_decl/0.1 -> variable_qualifier ·
r#19 struct_decl -> 'struct' ident struct_body_decl ·
r#20 function_decl -> function_decl/0.0 function_header compound_statement ·
r#21 multiplicative_operator -> '*' ·
r#22 multiplicative_operator -> '/' ·
r#23 multiplicative_operator -> '%' ·
r#24 additive_operator -> '+' ·
r#25 additive_operator -> '-' ·
r#26 statement -> ';' ·
r#27 statement -> if_statement ·
r#28 statement -> switch_statement ·
r#29 statement -> loop_statement ·
r#30 statement -> for_statement ·
r#31 statement -> while_statement ·
r#32 statement -> compound_statement ·
r#33 assignment_statement/0.1 -> '=' ·
r#34 assignment_statement/0.1 -> compound_assignment_operator ·
r#35 compound_assignment_operator -> '+=' ·
r#36 compound_assignment_operator -> '-=' ·
r#37 compound_assignment_operator -> '*=' ·
r#38 compound_assignment_operator -> '/=' ·
r#39 compound_assignment_operator -> '%=' ·
r#40 compound_assignment_operator -> '&=' ·
r#41 compound_assignment_operator -> '|=' ·
r#42 compound_assignment_operator -> '^=' ·
r#43 compound_assignment_operator -> '>>=' ·
r#44 compound_assignment_operator -> '<<=' ·
r#45 if_statement/0.1 -> if_statement/0.1/0 ·
r#46 statement -> static_assert_statement ';' ·
r#47 statement -> variable_updating_statement ';' ·
r#48 statement -> 'discard' ';' ·
r#49 statement -> continue_statement ';' ·
r#50 statement -> break_statement ';' ·
r#51 statement -> variable_statement ';' ·
r#52 statement -> func_call_statement ';' ·
r#53 statement -> return_statement ';' ·
r#54 compound_statement -> '{' compound_statement/0.1 '}' ·
r#55 attribute -> '@' 'workgroup_size' '(' expression attrib_end ·
r#56 attribute -> '@' 'size' '(' expression attrib_end ·
r#57 attribute -> '@' 'location' '(' expression attrib_end ·
r#58 attribute -> '@' 'interpolate' '(' interpolation_type_name attrib_end ·
r#59 attribute -> '@' 'id' '(' expression attrib_end ·
r#60 attribute -> '@' 'group' '(' expression attrib_end ·
r#61 attribute -> '@' 'builtin' '(' builtin_value_name attrib_end ·
r#62 attribute -> '@' 'binding' '(' expression attrib_end ·
r#63 attribute -> '@' 'align' '(' expression attrib_end ·
r#64 attrib_end -> attrib_end/0.0 ')' ·
r#65 if_statement/0.1/0 -> else_if_clause if_statement/0.1/0 ·
r#66 if_statement -> if_clause if_statement/0.1 if_statement/0.2 ·
r#67 if_statement/0.2 -> else_clause ·
r#68 while_statement -> 'while' expression compound_statement ·
r#69 if_clause -> 'if' expression compound_statement ·
r#70 variable_qualifier -> '<' address_space variable_qualifier/0.2 '>' ·
r#71 struct_body_decl -> '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' ·
r#72 else_clause -> 'else' compound_statement ·
r#73 attribute -> '@' 'workgroup_size' '(' expression ',' expression attrib_end ·
r#74 attribute -> '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end ·
r#75 else_if_clause -> 'else' 'if' expression compound_statement ·
r#76 switch_statement -> 'switch' expression '{' switch_statement/0.3 '}' ·
r#77 loop_statement -> 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' ·
r#78 for_statement -> 'for' '(' for_header ')' compound_statement ·
r#79 function_header/0.5/0.1 -> function_header/0.5/0.1/0 ·
r#80 function_header/0.5/0.1/0 -> attribute function_header/0.5/0.1/0 ·
r#81 continuing_compound_statement/0.1 -> continuing_compound_statement/0.1/0 ·
r#82 attribute -> '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end ·
r#83 continuing_compound_statement/0.1/0 -> statement continuing_compound_statement/0.1/0 ·

=Action:
[#0 'enable']: s#5
[#1 EndOfText]: acc
[#2 ';']: s#12
[#2 '@']: s#30
[#2 'const']: s#20
[#2 'static_assert']: s#25
[#2 'struct']: s#23
[#2 'type']: s#22
[#3 EndOfText]: r#0
[#4 'enable']: s#5
[#5 'f16']: s#7
[#6 ';']: s#156
[#8 EndOfText]: r#1
[#9 EndOfText]: r#2
[#10 EndOfText]: r#3
[#11 ';']: s#12
[#11 '@']: s#30
[#11 'const']: s#20
[#11 'static_assert']: s#25
[#11 'struct']: s#23
[#11 'type']: s#22
[#12 EndOfText]: r#4
[#13 ';']: s#154
[#14 ';']: s#153
[#15 ';']: s#152
[#16 EndOfText]: r#5
[#17 EndOfText]: r#6
[#18 ';']: s#151
[#19 'var']: s#150
[#20 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#21 'override']: s#146
[#22 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#23 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#24 'fn']: s#143
[#25 '!']: s#62
[#25 '&']: s#65
[#25 '(']: s#80
[#25 '*']: s#64
[#25 '-']: s#61
[#25 'array']: s#76
[#25 'atomic']: s#88
[#25 'bitcast']: s#71
[#25 'bool']: s#81
[#25 'f16']: s#83
[#25 'f32']: s#82
[#25 'false']: s#107
[#25 'i32']: s#84
[#25 'mat2x2']: s#93
[#25 'mat2x3']: s#94
[#25 'mat2x4']: s#95
[#25 'mat3x2']: s#96
[#25 'mat3x3']: s#97
[#25 'mat3x4']: s#98
[#25 'mat4x2']: s#99
[#25 'mat4x3']: s#100
[#25 'mat4x4']: s#101
[#25 'ptr']: s#86
[#25 'sampler']: s#124
[#25 'sampler_comparison']: s#125
[#25 'texture_1d']: s#131
[#25 'texture_2d']: s#132
[#25 'texture_2d_array']: s#133
[#25 'texture_3d']: s#134
[#25 'texture_cube']: s#135
[#25 'texture_cube_array']: s#136
[#25 'texture_depth_2d']: s#126
[#25 'texture_depth_2d_array']: s#127
[#25 'texture_depth_cube']: s#128
[#25 'texture_depth_cube_array']: s#129
[#25 'texture_depth_multisampled_2d']: s#130
[#25 'texture_multisampled_2d']: s#137
[#25 'texture_storage_1d']: s#138
[#25 'texture_storage_2d']: s#139
[#25 'texture_storage_2d_array']: s#140
[#25 'texture_storage_3d']: s#141
[#25 'true']: s#106
[#25 'u32']: s#85
[#25 'vec2']: s#90
[#25 'vec3']: s#91
[#25 'vec4']: s#92
[#25 '~']: s#63
[#25 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#25 /0[fh]/]: s#116
[#25 /0[iu]?/]: s#113
[#25 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#25 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#25 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#25 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#25 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#25 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#25 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#25 /[1-9][0-9]*[fh]/]: s#117
[#25 /[1-9][0-9]*[iu]?/]: s#114
[#29 '@']: s#30
[#30 'align']: s#31
[#30 'binding']: s#32
[#30 'builtin']: s#33
[#30 'compute']: s#44
[#30 'const']: s#34
[#30 'fragment']: s#43
[#30 'group']: s#35
[#30 'id']: s#36
[#30 'interpolate']: s#37
[#30 'invariant']: s#38
[#30 'location']: s#39
[#30 'size']: s#40
[#30 'vertex']: s#42
[#30 'workgroup_size']: s#41
[#31 '(']: s#221
[#32 '(']: s#220
[#33 '(']: s#219
[#34 'f16']: r#7
[#34 'texture_multisampled_2d']: r#7
[#35 '(']: s#218
[#36 '(']: s#217
[#37 '(']: s#216
[#38 'f16']: r#8
[#38 'texture_multisampled_2d']: r#8
[#39 '(']: s#215
[#40 '(']: s#214
[#41 '(']: s#213
[#42 'f16']: r#9
[#42 'texture_multisampled_2d']: r#9
[#43 'f16']: r#10
[#43 'texture_multisampled_2d']: r#10
[#44 'f16']: r#11
[#44 'texture_multisampled_2d']: r#11
[#50 '||']: s#212
[#51 '&&']: s#211
[#53 '!=']: s#210
[#53 '<']: s#205
[#53 '<=']: s#207
[#53 '==']: s#209
[#53 '>']: s#206
[#53 '>=']: s#208
[#54 '&']: s#204
[#55 '|']: s#203
[#56 '^']: s#202
[#57 '+']: s#200
[#57 '-']: s#201
[#58 '<<']: s#197
[#58 '>>']: s#198
[#59 '%']: s#196
[#59 '*']: s#194
[#59 '/']: s#195
[#61 '!']: s#62
[#61 '&']: s#65
[#61 '(']: s#80
[#61 '*']: s#64
[#61 '-']: s#61
[#61 'array']: s#76
[#61 'atomic']: s#88
[#61 'bitcast']: s#71
[#61 'bool']: s#81
[#61 'f16']: s#83
[#61 'f32']: s#82
[#61 'false']: s#107
[#61 'i32']: s#84
[#61 'mat2x2']: s#93
[#61 'mat2x3']: s#94
[#61 'mat2x4']: s#95
[#61 'mat3x2']: s#96
[#61 'mat3x3']: s#97
[#61 'mat3x4']: s#98
[#61 'mat4x2']: s#99
[#61 'mat4x3']: s#100
[#61 'mat4x4']: s#101
[#61 'ptr']: s#86
[#61 'sampler']: s#124
[#61 'sampler_comparison']: s#125
[#61 'texture_1d']: s#131
[#61 'texture_2d']: s#132
[#61 'texture_2d_array']: s#133
[#61 'texture_3d']: s#134
[#61 'texture_cube']: s#135
[#61 'texture_cube_array']: s#136
[#61 'texture_depth_2d']: s#126
[#61 'texture_depth_2d_array']: s#127
[#61 'texture_depth_cube']: s#128
[#61 'texture_depth_cube_array']: s#129
[#61 'texture_depth_multisampled_2d']: s#130
[#61 'texture_multisampled_2d']: s#137
[#61 'texture_storage_1d']: s#138
[#61 'texture_storage_2d']: s#139
[#61 'texture_storage_2d_array']: s#140
[#61 'texture_storage_3d']: s#141
[#61 'true']: s#106
[#61 'u32']: s#85
[#61 'vec2']: s#90
[#61 'vec3']: s#91
[#61 'vec4']: s#92
[#61 '~']: s#63
[#61 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#61 /0[fh]/]: s#116
[#61 /0[iu]?/]: s#113
[#61 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#61 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#61 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#61 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#61 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#61 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#61 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#61 /[1-9][0-9]*[fh]/]: s#117
[#61 /[1-9][0-9]*[iu]?/]: s#114
[#62 '!']: s#62
[#62 '&']: s#65
[#62 '(']: s#80
[#62 '*']: s#64
[#62 '-']: s#61
[#62 'array']: s#76
[#62 'atomic']: s#88
[#62 'bitcast']: s#71
[#62 'bool']: s#81
[#62 'f16']: s#83
[#62 'f32']: s#82
[#62 'false']: s#107
[#62 'i32']: s#84
[#62 'mat2x2']: s#93
[#62 'mat2x3']: s#94
[#62 'mat2x4']: s#95
[#62 'mat3x2']: s#96
[#62 'mat3x3']: s#97
[#62 'mat3x4']: s#98
[#62 'mat4x2']: s#99
[#62 'mat4x3']: s#100
[#62 'mat4x4']: s#101
[#62 'ptr']: s#86
[#62 'sampler']: s#124
[#62 'sampler_comparison']: s#125
[#62 'texture_1d']: s#131
[#62 'texture_2d']: s#132
[#62 'texture_2d_array']: s#133
[#62 'texture_3d']: s#134
[#62 'texture_cube']: s#135
[#62 'texture_cube_array']: s#136
[#62 'texture_depth_2d']: s#126
[#62 'texture_depth_2d_array']: s#127
[#62 'texture_depth_cube']: s#128
[#62 'texture_depth_cube_array']: s#129
[#62 'texture_depth_multisampled_2d']: s#130
[#62 'texture_multisampled_2d']: s#137
[#62 'texture_storage_1d']: s#138
[#62 'texture_storage_2d']: s#139
[#62 'texture_storage_2d_array']: s#140
[#62 'texture_storage_3d']: s#141
[#62 'true']: s#106
[#62 'u32']: s#85
[#62 'vec2']: s#90
[#62 'vec3']: s#91
[#62 'vec4']: s#92
[#62 '~']: s#63
[#62 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#62 /0[fh]/]: s#116
[#62 /0[iu]?/]: s#113
[#62 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#62 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#62 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#62 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#62 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#62 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#62 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#62 /[1-9][0-9]*[fh]/]: s#117
[#62 /[1-9][0-9]*[iu]?/]: s#114
[#63 '!']: s#62
[#63 '&']: s#65
[#63 '(']: s#80
[#63 '*']: s#64
[#63 '-']: s#61
[#63 'array']: s#76
[#63 'atomic']: s#88
[#63 'bitcast']: s#71
[#63 'bool']: s#81
[#63 'f16']: s#83
[#63 'f32']: s#82
[#63 'false']: s#107
[#63 'i32']: s#84
[#63 'mat2x2']: s#93
[#63 'mat2x3']: s#94
[#63 'mat2x4']: s#95
[#63 'mat3x2']: s#96
[#63 'mat3x3']: s#97
[#63 'mat3x4']: s#98
[#63 'mat4x2']: s#99
[#63 'mat4x3']: s#100
[#63 'mat4x4']: s#101
[#63 'ptr']: s#86
[#63 'sampler']: s#124
[#63 'sampler_comparison']: s#125
[#63 'texture_1d']: s#131
[#63 'texture_2d']: s#132
[#63 'texture_2d_array']: s#133
[#63 'texture_3d']: s#134
[#63 'texture_cube']: s#135
[#63 'texture_cube_array']: s#136
[#63 'texture_depth_2d']: s#126
[#63 'texture_depth_2d_array']: s#127
[#63 'texture_depth_cube']: s#128
[#63 'texture_depth_cube_array']: s#129
[#63 'texture_depth_multisampled_2d']: s#130
[#63 'texture_multisampled_2d']: s#137
[#63 'texture_storage_1d']: s#138
[#63 'texture_storage_2d']: s#139
[#63 'texture_storage_2d_array']: s#140
[#63 'texture_storage_3d']: s#141
[#63 'true']: s#106
[#63 'u32']: s#85
[#63 'vec2']: s#90
[#63 'vec3']: s#91
[#63 'vec4']: s#92
[#63 '~']: s#63
[#63 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#63 /0[fh]/]: s#116
[#63 /0[iu]?/]: s#113
[#63 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#63 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#63 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#63 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#63 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#63 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#63 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#63 /[1-9][0-9]*[fh]/]: s#117
[#63 /[1-9][0-9]*[iu]?/]: s#114
[#64 '!']: s#62
[#64 '&']: s#65
[#64 '(']: s#80
[#64 '*']: s#64
[#64 '-']: s#61
[#64 'array']: s#76
[#64 'atomic']: s#88
[#64 'bitcast']: s#71
[#64 'bool']: s#81
[#64 'f16']: s#83
[#64 'f32']: s#82
[#64 'false']: s#107
[#64 'i32']: s#84
[#64 'mat2x2']: s#93
[#64 'mat2x3']: s#94
[#64 'mat2x4']: s#95
[#64 'mat3x2']: s#96
[#64 'mat3x3']: s#97
[#64 'mat3x4']: s#98
[#64 'mat4x2']: s#99
[#64 'mat4x3']: s#100
[#64 'mat4x4']: s#101
[#64 'ptr']: s#86
[#64 'sampler']: s#124
[#64 'sampler_comparison']: s#125
[#64 'texture_1d']: s#131
[#64 'texture_2d']: s#132
[#64 'texture_2d_array']: s#133
[#64 'texture_3d']: s#134
[#64 'texture_cube']: s#135
[#64 'texture_cube_array']: s#136
[#64 'texture_depth_2d']: s#126
[#64 'texture_depth_2d_array']: s#127
[#64 'texture_depth_cube']: s#128
[#64 'texture_depth_cube_array']: s#129
[#64 'texture_depth_multisampled_2d']: s#130
[#64 'texture_multisampled_2d']: s#137
[#64 'texture_storage_1d']: s#138
[#64 'texture_storage_2d']: s#139
[#64 'texture_storage_2d_array']: s#140
[#64 'texture_storage_3d']: s#141
[#64 'true']: s#106
[#64 'u32']: s#85
[#64 'vec2']: s#90
[#64 'vec3']: s#91
[#64 'vec4']: s#92
[#64 '~']: s#63
[#64 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#64 /0[fh]/]: s#116
[#64 /0[iu]?/]: s#113
[#64 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#64 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#64 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#64 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#64 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#64 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#64 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#64 /[1-9][0-9]*[fh]/]: s#117
[#64 /[1-9][0-9]*[iu]?/]: s#114
[#65 '!']: s#62
[#65 '&']: s#65
[#65 '(']: s#80
[#65 '*']: s#64
[#65 '-']: s#61
[#65 'array']: s#76
[#65 'atomic']: s#88
[#65 'bitcast']: s#71
[#65 'bool']: s#81
[#65 'f16']: s#83
[#65 'f32']: s#82
[#65 'false']: s#107
[#65 'i32']: s#84
[#65 'mat2x2']: s#93
[#65 'mat2x3']: s#94
[#65 'mat2x4']: s#95
[#65 'mat3x2']: s#96
[#65 'mat3x3']: s#97
[#65 'mat3x4']: s#98
[#65 'mat4x2']: s#99
[#65 'mat4x3']: s#100
[#65 'mat4x4']: s#101
[#65 'ptr']: s#86
[#65 'sampler']: s#124
[#65 'sampler_comparison']: s#125
[#65 'texture_1d']: s#131
[#65 'texture_2d']: s#132
[#65 'texture_2d_array']: s#133
[#65 'texture_3d']: s#134
[#65 'texture_cube']: s#135
[#65 'texture_cube_array']: s#136
[#65 'texture_depth_2d']: s#126
[#65 'texture_depth_2d_array']: s#127
[#65 'texture_depth_cube']: s#128
[#65 'texture_depth_cube_array']: s#129
[#65 'texture_depth_multisampled_2d']: s#130
[#65 'texture_multisampled_2d']: s#137
[#65 'texture_storage_1d']: s#138
[#65 'texture_storage_2d']: s#139
[#65 'texture_storage_2d_array']: s#140
[#65 'texture_storage_3d']: s#141
[#65 'true']: s#106
[#65 'u32']: s#85
[#65 'vec2']: s#90
[#65 'vec3']: s#91
[#65 'vec4']: s#92
[#65 '~']: s#63
[#65 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#65 /0[fh]/]: s#116
[#65 /0[iu]?/]: s#113
[#65 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#65 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#65 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#65 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#65 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#65 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#65 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#65 /[1-9][0-9]*[fh]/]: s#117
[#65 /[1-9][0-9]*[iu]?/]: s#114
[#66 '.']: s#187
[#66 '[']: s#186
[#68 '(']: s#183
[#71 '<']: s#181
[#74 '<']: s#180
[#75 '<']: s#179
[#76 '<']: s#178
[#80 '!']: s#62
[#80 '&']: s#65
[#80 '(']: s#80
[#80 '*']: s#64
[#80 '-']: s#61
[#80 'array']: s#76
[#80 'atomic']: s#88
[#80 'bitcast']: s#71
[#80 'bool']: s#81
[#80 'f16']: s#83
[#80 'f32']: s#82
[#80 'false']: s#107
[#80 'i32']: s#84
[#80 'mat2x2']: s#93
[#80 'mat2x3']: s#94
[#80 'mat2x4']: s#95
[#80 'mat3x2']: s#96
[#80 'mat3x3']: s#97
[#80 'mat3x4']: s#98
[#80 'mat4x2']: s#99
[#80 'mat4x3']: s#100
[#80 'mat4x4']: s#101
[#80 'ptr']: s#86
[#80 'sampler']: s#124
[#80 'sampler_comparison']: s#125
[#80 'texture_1d']: s#131
[#80 'texture_2d']: s#132
[#80 'texture_2d_array']: s#133
[#80 'texture_3d']: s#134
[#80 'texture_cube']: s#135
[#80 'texture_cube_array']: s#136
[#80 'texture_depth_2d']: s#126
[#80 'texture_depth_2d_array']: s#127
[#80 'texture_depth_cube']: s#128
[#80 'texture_depth_cube_array']: s#129
[#80 'texture_depth_multisampled_2d']: s#130
[#80 'texture_multisampled_2d']: s#137
[#80 'texture_storage_1d']: s#138
[#80 'texture_storage_2d']: s#139
[#80 'texture_storage_2d_array']: s#140
[#80 'texture_storage_3d']: s#141
[#80 'true']: s#106
[#80 'u32']: s#85
[#80 'vec2']: s#90
[#80 'vec3']: s#91
[#80 'vec4']: s#92
[#80 '~']: s#63
[#80 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#80 /0[fh]/]: s#116
[#80 /0[iu]?/]: s#113
[#80 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#80 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#80 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#80 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#80 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#80 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#80 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#80 /[1-9][0-9]*[fh]/]: s#117
[#80 /[1-9][0-9]*[iu]?/]: s#114
[#86 '<']: s#176
[#88 '<']: s#175
[#110 '<']: s#174
[#111 '<']: s#173
[#112 '<']: s#172
[#142 '{']: s#171
[#143 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#144 '{']: s#168
[#145 '=']: s#166
[#146 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#147 '=']: s#164
[#148 ':']: s#163
[#149 '=']: s#161
[#150 '<']: s#159
[#151 EndOfText]: r#12
[#152 EndOfText]: r#13
[#153 EndOfText]: r#14
[#154 EndOfText]: r#15
[#155 EndOfText]: r#16
[#156 EndOfText]: r#17
[#157 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#158 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#18
[#159 'function']: s#289
[#159 'private']: s#290
[#159 'storage']: s#293
[#159 'uniform']: s#292
[#159 'workgroup']: s#291
[#161 '!']: s#62
[#161 '&']: s#65
[#161 '(']: s#80
[#161 '*']: s#64
[#161 '-']: s#61
[#161 'array']: s#76
[#161 'atomic']: s#88
[#161 'bitcast']: s#71
[#161 'bool']: s#81
[#161 'f16']: s#83
[#161 'f32']: s#82
[#161 'false']: s#107
[#161 'i32']: s#84
[#161 'mat2x2']: s#93
[#161 'mat2x3']: s#94
[#161 'mat2x4']: s#95
[#161 'mat3x2']: s#96
[#161 'mat3x3']: s#97
[#161 'mat3x4']: s#98
[#161 'mat4x2']: s#99
[#161 'mat4x3']: s#100
[#161 'mat4x4']: s#101
[#161 'ptr']: s#86
[#161 'sampler']: s#124
[#161 'sampler_comparison']: s#125
[#161 'texture_1d']: s#131
[#161 'texture_2d']: s#132
[#161 'texture_2d_array']: s#133
[#161 'texture_3d']: s#134
[#161 'texture_cube']: s#135
[#161 'texture_cube_array']: s#136
[#161 'texture_depth_2d']: s#126
[#161 'texture_depth_2d_array']: s#127
[#161 'texture_depth_cube']: s#128
[#161 'texture_depth_cube_array']: s#129
[#161 'texture_depth_multisampled_2d']: s#130
[#161 'texture_multisampled_2d']: s#137
[#161 'texture_storage_1d']: s#138
[#161 'texture_storage_2d']: s#139
[#161 'texture_storage_2d_array']: s#140
[#161 'texture_storage_3d']: s#141
[#161 'true']: s#106
[#161 'u32']: s#85
[#161 'vec2']: s#90
[#161 'vec3']: s#91
[#161 'vec4']: s#92
[#161 '~']: s#63
[#161 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#161 /0[fh]/]: s#116
[#161 /0[iu]?/]: s#113
[#161 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#161 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#161 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#161 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#161 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#161 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#161 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#161 /[1-9][0-9]*[fh]/]: s#117
[#161 /[1-9][0-9]*[iu]?/]: s#114
[#163 'array']: s#283
[#163 'atomic']: s#88
[#163 'bool']: s#81
[#163 'f16']: s#83
[#163 'f32']: s#82
[#163 'i32']: s#84
[#163 'mat2x2']: s#93
[#163 'mat2x3']: s#94
[#163 'mat2x4']: s#95
[#163 'mat3x2']: s#96
[#163 'mat3x3']: s#97
[#163 'mat3x4']: s#98
[#163 'mat4x2']: s#99
[#163 'mat4x3']: s#100
[#163 'mat4x4']: s#101
[#163 'ptr']: s#86
[#163 'sampler']: s#124
[#163 'sampler_comparison']: s#125
[#163 'texture_1d']: s#131
[#163 'texture_2d']: s#132
[#163 'texture_2d_array']: s#133
[#163 'texture_3d']: s#134
[#163 'texture_cube']: s#135
[#163 'texture_cube_array']: s#136
[#163 'texture_depth_2d']: s#126
[#163 'texture_depth_2d_array']: s#127
[#163 'texture_depth_cube']: s#128
[#163 'texture_depth_cube_array']: s#129
[#163 'texture_depth_multisampled_2d']: s#130
[#163 'texture_multisampled_2d']: s#137
[#163 'texture_storage_1d']: s#138
[#163 'texture_storage_2d']: s#139
[#163 'texture_storage_2d_array']: s#140
[#163 'texture_storage_3d']: s#141
[#163 'u32']: s#85
[#163 'vec2']: s#90
[#163 'vec3']: s#91
[#163 'vec4']: s#92
[#163 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#164 '!']: s#62
[#164 '&']: s#65
[#164 '(']: s#80
[#164 '*']: s#64
[#164 '-']: s#61
[#164 'array']: s#76
[#164 'atomic']: s#88
[#164 'bitcast']: s#71
[#164 'bool']: s#81
[#164 'f16']: s#83
[#164 'f32']: s#82
[#164 'false']: s#107
[#164 'i32']: s#84
[#164 'mat2x2']: s#93
[#164 'mat2x3']: s#94
[#164 'mat2x4']: s#95
[#164 'mat3x2']: s#96
[#164 'mat3x3']: s#97
[#164 'mat3x4']: s#98
[#164 'mat4x2']: s#99
[#164 'mat4x3']: s#100
[#164 'mat4x4']: s#101
[#164 'ptr']: s#86
[#164 'sampler']: s#124
[#164 'sampler_comparison']: s#125
[#164 'texture_1d']: s#131
[#164 'texture_2d']: s#132
[#164 'texture_2d_array']: s#133
[#164 'texture_3d']: s#134
[#164 'texture_cube']: s#135
[#164 'texture_cube_array']: s#136
[#164 'texture_depth_2d']: s#126
[#164 'texture_depth_2d_array']: s#127
[#164 'texture_depth_cube']: s#128
[#164 'texture_depth_cube_array']: s#129
[#164 'texture_depth_multisampled_2d']: s#130
[#164 'texture_multisampled_2d']: s#137
[#164 'texture_storage_1d']: s#138
[#164 'texture_storage_2d']: s#139
[#164 'texture_storage_2d_array']: s#140
[#164 'texture_storage_3d']: s#141
[#164 'true']: s#106
[#164 'u32']: s#85
[#164 'vec2']: s#90
[#164 'vec3']: s#91
[#164 'vec4']: s#92
[#164 '~']: s#63
[#164 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#164 /0[fh]/]: s#116
[#164 /0[iu]?/]: s#113
[#164 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#164 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#164 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#164 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#164 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#164 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#164 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#164 /[1-9][0-9]*[fh]/]: s#117
[#164 /[1-9][0-9]*[iu]?/]: s#114
[#165 '=']: s#362
[#166 'array']: s#283
[#166 'atomic']: s#88
[#166 'bool']: s#81
[#166 'f16']: s#83
[#166 'f32']: s#82
[#166 'i32']: s#84
[#166 'mat2x2']: s#93
[#166 'mat2x3']: s#94
[#166 'mat2x4']: s#95
[#166 'mat3x2']: s#96
[#166 'mat3x3']: s#97
[#166 'mat3x4']: s#98
[#166 'mat4x2']: s#99
[#166 'mat4x3']: s#100
[#166 'mat4x4']: s#101
[#166 'ptr']: s#86
[#166 'sampler']: s#124
[#166 'sampler_comparison']: s#125
[#166 'texture_1d']: s#131
[#166 'texture_2d']: s#132
[#166 'texture_2d_array']: s#133
[#166 'texture_3d']: s#134
[#166 'texture_cube']: s#135
[#166 'texture_cube_array']: s#136
[#166 'texture_depth_2d']: s#126
[#166 'texture_depth_2d_array']: s#127
[#166 'texture_depth_cube']: s#128
[#166 'texture_depth_cube_array']: s#129
[#166 'texture_depth_multisampled_2d']: s#130
[#166 'texture_multisampled_2d']: s#137
[#166 'texture_storage_1d']: s#138
[#166 'texture_storage_2d']: s#139
[#166 'texture_storage_2d_array']: s#140
[#166 'texture_storage_3d']: s#141
[#166 'u32']: s#85
[#166 'vec2']: s#90
[#166 'vec3']: s#91
[#166 'vec4']: s#92
[#166 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#167 EndOfText]: r#19
[#168 '@']: s#30
[#169 '(']: s#355
[#170 EndOfText]: r#20
[#171 '&']: s#353
[#171 '(']: s#354
[#171 '*']: s#352
[#171 ';']: s#318
[#171 '_']: s#350
[#171 'break']: s#343
[#171 'const']: s#342
[#171 'continue']: s#344
[#171 'discard']: s#329
[#171 'for']: s#337
[#171 'if']: s#348
[#171 'let']: s#341
[#171 'loop']: s#336
[#171 'return']: s#333
[#171 'static_assert']: s#25
[#171 'switch']: s#335
[#171 'var']: s#150
[#171 'while']: s#338
[#171 '{']: s#171
[#171 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#172 'bgra8unorm']: s#314
[#172 'r32float']: s#307
[#172 'r32sint']: s#306
[#172 'r32uint']: s#305
[#172 'rg32float']: s#310
[#172 'rg32sint']: s#309
[#172 'rg32uint']: s#308
[#172 'rgba16float']: s#304
[#172 'rgba16sint']: s#303
[#172 'rgba16uint']: s#302
[#172 'rgba32float']: s#313
[#172 'rgba32sint']: s#312
[#172 'rgba32uint']: s#311
[#172 'rgba8sint']: s#301
[#172 'rgba8snorm']: s#299
[#172 'rgba8uint']: s#300
[#172 'rgba8unorm']: s#298
[#173 'array']: s#283
[#173 'atomic']: s#88
[#173 'bool']: s#81
[#173 'f16']: s#83
[#173 'f32']: s#82
[#173 'i32']: s#84
[#173 'mat2x2']: s#93
[#173 'mat2x3']: s#94
[#173 'mat2x4']: s#95
[#173 'mat3x2']: s#96
[#173 'mat3x3']: s#97
[#173 'mat3x4']: s#98
[#173 'mat4x2']: s#99
[#173 'mat4x3']: s#100
[#173 'mat4x4']: s#101
[#173 'ptr']: s#86
[#173 'sampler']: s#124
[#173 'sampler_comparison']: s#125
[#173 'texture_1d']: s#131
[#173 'texture_2d']: s#132
[#173 'texture_2d_array']: s#133
[#173 'texture_3d']: s#134
[#173 'texture_cube']: s#135
[#173 'texture_cube_array']: s#136
[#173 'texture_depth_2d']: s#126
[#173 'texture_depth_2d_array']: s#127
[#173 'texture_depth_cube']: s#128
[#173 'texture_depth_cube_array']: s#129
[#173 'texture_depth_multisampled_2d']: s#130
[#173 'texture_multisampled_2d']: s#137
[#173 'texture_storage_1d']: s#138
[#173 'texture_storage_2d']: s#139
[#173 'texture_storage_2d_array']: s#140
[#173 'texture_storage_3d']: s#141
[#173 'u32']: s#85
[#173 'vec2']: s#90
[#173 'vec3']: s#91
[#173 'vec4']: s#92
[#173 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#174 'array']: s#283
[#174 'atomic']: s#88
[#174 'bool']: s#81
[#174 'f16']: s#83
[#174 'f32']: s#82
[#174 'i32']: s#84
[#174 'mat2x2']: s#93
[#174 'mat2x3']: s#94
[#174 'mat2x4']: s#95
[#174 'mat3x2']: s#96
[#174 'mat3x3']: s#97
[#174 'mat3x4']: s#98
[#174 'mat4x2']: s#99
[#174 'mat4x3']: s#100
[#174 'mat4x4']: s#101
[#174 'ptr']: s#86
[#174 'sampler']: s#124
[#174 'sampler_comparison']: s#125
[#174 'texture_1d']: s#131
[#174 'texture_2d']: s#132
[#174 'texture_2d_array']: s#133
[#174 'texture_3d']: s#134
[#174 'texture_cube']: s#135
[#174 'texture_cube_array']: s#136
[#174 'texture_depth_2d']: s#126
[#174 'texture_depth_2d_array']: s#127
[#174 'texture_depth_cube']: s#128
[#174 'texture_depth_cube_array']: s#129
[#174 'texture_depth_multisampled_2d']: s#130
[#174 'texture_multisampled_2d']: s#137
[#174 'texture_storage_1d']: s#138
[#174 'texture_storage_2d']: s#139
[#174 'texture_storage_2d_array']: s#140
[#174 'texture_storage_3d']: s#141
[#174 'u32']: s#85
[#174 'vec2']: s#90
[#174 'vec3']: s#91
[#174 'vec4']: s#92
[#174 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#175 'array']: s#283
[#175 'atomic']: s#88
[#175 'bool']: s#81
[#175 'f16']: s#83
[#175 'f32']: s#82
[#175 'i32']: s#84
[#175 'mat2x2']: s#93
[#175 'mat2x3']: s#94
[#175 'mat2x4']: s#95
[#175 'mat3x2']: s#96
[#175 'mat3x3']: s#97
[#175 'mat3x4']: s#98
[#175 'mat4x2']: s#99
[#175 'mat4x3']: s#100
[#175 'mat4x4']: s#101
[#175 'ptr']: s#86
[#175 'sampler']: s#124
[#175 'sampler_comparison']: s#125
[#175 'texture_1d']: s#131
[#175 'texture_2d']: s#132
[#175 'texture_2d_array']: s#133
[#175 'texture_3d']: s#134
[#175 'texture_cube']: s#135
[#175 'texture_cube_array']: s#136
[#175 'texture_depth_2d']: s#126
[#175 'texture_depth_2d_array']: s#127
[#175 'texture_depth_cube']: s#128
[#175 'texture_depth_cube_array']: s#129
[#175 'texture_depth_multisampled_2d']: s#130
[#175 'texture_multisampled_2d']: s#137
[#175 'texture_storage_1d']: s#138
[#175 'texture_storage_2d']: s#139
[#175 'texture_storage_2d_array']: s#140
[#175 'texture_storage_3d']: s#141
[#175 'u32']: s#85
[#175 'vec2']: s#90
[#175 'vec3']: s#91
[#175 'vec4']: s#92
[#175 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#176 'function']: s#289
[#176 'private']: s#290
[#176 'storage']: s#293
[#176 'uniform']: s#292
[#176 'workgroup']: s#291
[#177 ')']: s#287
[#178 'array']: s#283
[#178 'atomic']: s#88
[#178 'bool']: s#81
[#178 'f16']: s#83
[#178 'f32']: s#82
[#178 'i32']: s#84
[#178 'mat2x2']: s#93
[#178 'mat2x3']: s#94
[#178 'mat2x4']: s#95
[#178 'mat3x2']: s#96
[#178 'mat3x3']: s#97
[#178 'mat3x4']: s#98
[#178 'mat4x2']: s#99
[#178 'mat4x3']: s#100
[#178 'mat4x4']: s#101
[#178 'ptr']: s#86
[#178 'sampler']: s#124
[#178 'sampler_comparison']: s#125
[#178 'texture_1d']: s#131
[#178 'texture_2d']: s#132
[#178 'texture_2d_array']: s#133
[#178 'texture_3d']: s#134
[#178 'texture_cube']: s#135
[#178 'texture_cube_array']: s#136
[#178 'texture_depth_2d']: s#126
[#178 'texture_depth_2d_array']: s#127
[#178 'texture_depth_cube']: s#128
[#178 'texture_depth_cube_array']: s#129
[#178 'texture_depth_multisampled_2d']: s#130
[#178 'texture_multisampled_2d']: s#137
[#178 'texture_storage_1d']: s#138
[#178 'texture_storage_2d']: s#139
[#178 'texture_storage_2d_array']: s#140
[#178 'texture_storage_3d']: s#141
[#178 'u32']: s#85
[#178 'vec2']: s#90
[#178 'vec3']: s#91
[#178 'vec4']: s#92
[#178 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#179 'array']: s#283
[#179 'atomic']: s#88
[#179 'bool']: s#81
[#179 'f16']: s#83
[#179 'f32']: s#82
[#179 'i32']: s#84
[#179 'mat2x2']: s#93
[#179 'mat2x3']: s#94
[#179 'mat2x4']: s#95
[#179 'mat3x2']: s#96
[#179 'mat3x3']: s#97
[#179 'mat3x4']: s#98
[#179 'mat4x2']: s#99
[#179 'mat4x3']: s#100
[#179 'mat4x4']: s#101
[#179 'ptr']: s#86
[#179 'sampler']: s#124
[#179 'sampler_comparison']: s#125
[#179 'texture_1d']: s#131
[#179 'texture_2d']: s#132
[#179 'texture_2d_array']: s#133
[#179 'texture_3d']: s#134
[#179 'texture_cube']: s#135
[#179 'texture_cube_array']: s#136
[#179 'texture_depth_2d']: s#126
[#179 'texture_depth_2d_array']: s#127
[#179 'texture_depth_cube']: s#128
[#179 'texture_depth_cube_array']: s#129
[#179 'texture_depth_multisampled_2d']: s#130
[#179 'texture_multisampled_2d']: s#137
[#179 'texture_storage_1d']: s#138
[#179 'texture_storage_2d']: s#139
[#179 'texture_storage_2d_array']: s#140
[#179 'texture_storage_3d']: s#141
[#179 'u32']: s#85
[#179 'vec2']: s#90
[#179 'vec3']: s#91
[#179 'vec4']: s#92
[#179 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#180 'array']: s#283
[#180 'atomic']: s#88
[#180 'bool']: s#81
[#180 'f16']: s#83
[#180 'f32']: s#82
[#180 'i32']: s#84
[#180 'mat2x2']: s#93
[#180 'mat2x3']: s#94
[#180 'mat2x4']: s#95
[#180 'mat3x2']: s#96
[#180 'mat3x3']: s#97
[#180 'mat3x4']: s#98
[#180 'mat4x2']: s#99
[#180 'mat4x3']: s#100
[#180 'mat4x4']: s#101
[#180 'ptr']: s#86
[#180 'sampler']: s#124
[#180 'sampler_comparison']: s#125
[#180 'texture_1d']: s#131
[#180 'texture_2d']: s#132
[#180 'texture_2d_array']: s#133
[#180 'texture_3d']: s#134
[#180 'texture_cube']: s#135
[#180 'texture_cube_array']: s#136
[#180 'texture_depth_2d']: s#126
[#180 'texture_depth_2d_array']: s#127
[#180 'texture_depth_cube']: s#128
[#180 'texture_depth_cube_array']: s#129
[#180 'texture_depth_multisampled_2d']: s#130
[#180 'texture_multisampled_2d']: s#137
[#180 'texture_storage_1d']: s#138
[#180 'texture_storage_2d']: s#139
[#180 'texture_storage_2d_array']: s#140
[#180 'texture_storage_3d']: s#141
[#180 'u32']: s#85
[#180 'vec2']: s#90
[#180 'vec3']: s#91
[#180 'vec4']: s#92
[#180 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#181 'array']: s#283
[#181 'atomic']: s#88
[#181 'bool']: s#81
[#181 'f16']: s#83
[#181 'f32']: s#82
[#181 'i32']: s#84
[#181 'mat2x2']: s#93
[#181 'mat2x3']: s#94
[#181 'mat2x4']: s#95
[#181 'mat3x2']: s#96
[#181 'mat3x3']: s#97
[#181 'mat3x4']: s#98
[#181 'mat4x2']: s#99
[#181 'mat4x3']: s#100
[#181 'mat4x4']: s#101
[#181 'ptr']: s#86
[#181 'sampler']: s#124
[#181 'sampler_comparison']: s#125
[#181 'texture_1d']: s#131
[#181 'texture_2d']: s#132
[#181 'texture_2d_array']: s#133
[#181 'texture_3d']: s#134
[#181 'texture_cube']: s#135
[#181 'texture_cube_array']: s#136
[#181 'texture_depth_2d']: s#126
[#181 'texture_depth_2d_array']: s#127
[#181 'texture_depth_cube']: s#128
[#181 'texture_depth_cube_array']: s#129
[#181 'texture_depth_multisampled_2d']: s#130
[#181 'texture_multisampled_2d']: s#137
[#181 'texture_storage_1d']: s#138
[#181 'texture_storage_2d']: s#139
[#181 'texture_storage_2d_array']: s#140
[#181 'texture_storage_3d']: s#141
[#181 'u32']: s#85
[#181 'vec2']: s#90
[#181 'vec3']: s#91
[#181 'vec4']: s#92
[#181 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#183 '!']: s#62
[#183 '&']: s#65
[#183 '(']: s#80
[#183 '*']: s#64
[#183 '-']: s#61
[#183 'array']: s#76
[#183 'atomic']: s#88
[#183 'bitcast']: s#71
[#183 'bool']: s#81
[#183 'f16']: s#83
[#183 'f32']: s#82
[#183 'false']: s#107
[#183 'i32']: s#84
[#183 'mat2x2']: s#93
[#183 'mat2x3']: s#94
[#183 'mat2x4']: s#95
[#183 'mat3x2']: s#96
[#183 'mat3x3']: s#97
[#183 'mat3x4']: s#98
[#183 'mat4x2']: s#99
[#183 'mat4x3']: s#100
[#183 'mat4x4']: s#101
[#183 'ptr']: s#86
[#183 'sampler']: s#124
[#183 'sampler_comparison']: s#125
[#183 'texture_1d']: s#131
[#183 'texture_2d']: s#132
[#183 'texture_2d_array']: s#133
[#183 'texture_3d']: s#134
[#183 'texture_cube']: s#135
[#183 'texture_cube_array']: s#136
[#183 'texture_depth_2d']: s#126
[#183 'texture_depth_2d_array']: s#127
[#183 'texture_depth_cube']: s#128
[#183 'texture_depth_cube_array']: s#129
[#183 'texture_depth_multisampled_2d']: s#130
[#183 'texture_multisampled_2d']: s#137
[#183 'texture_storage_1d']: s#138
[#183 'texture_storage_2d']: s#139
[#183 'texture_storage_2d_array']: s#140
[#183 'texture_storage_3d']: s#141
[#183 'true']: s#106
[#183 'u32']: s#85
[#183 'vec2']: s#90
[#183 'vec3']: s#91
[#183 'vec4']: s#92
[#183 '~']: s#63
[#183 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#183 /0[fh]/]: s#116
[#183 /0[iu]?/]: s#113
[#183 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#183 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#183 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#183 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#183 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#183 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#183 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#183 /[1-9][0-9]*[fh]/]: s#117
[#183 /[1-9][0-9]*[iu]?/]: s#114
[#186 '!']: s#62
[#186 '&']: s#65
[#186 '(']: s#80
[#186 '*']: s#64
[#186 '-']: s#61
[#186 'array']: s#76
[#186 'atomic']: s#88
[#186 'bitcast']: s#71
[#186 'bool']: s#81
[#186 'f16']: s#83
[#186 'f32']: s#82
[#186 'false']: s#107
[#186 'i32']: s#84
[#186 'mat2x2']: s#93
[#186 'mat2x3']: s#94
[#186 'mat2x4']: s#95
[#186 'mat3x2']: s#96
[#186 'mat3x3']: s#97
[#186 'mat3x4']: s#98
[#186 'mat4x2']: s#99
[#186 'mat4x3']: s#100
[#186 'mat4x4']: s#101
[#186 'ptr']: s#86
[#186 'sampler']: s#124
[#186 'sampler_comparison']: s#125
[#186 'texture_1d']: s#131
[#186 'texture_2d']: s#132
[#186 'texture_2d_array']: s#133
[#186 'texture_3d']: s#134
[#186 'texture_cube']: s#135
[#186 'texture_cube_array']: s#136
[#186 'texture_depth_2d']: s#126
[#186 'texture_depth_2d_array']: s#127
[#186 'texture_depth_cube']: s#128
[#186 'texture_depth_cube_array']: s#129
[#186 'texture_depth_multisampled_2d']: s#130
[#186 'texture_multisampled_2d']: s#137
[#186 'texture_storage_1d']: s#138
[#186 'texture_storage_2d']: s#139
[#186 'texture_storage_2d_array']: s#140
[#186 'texture_storage_3d']: s#141
[#186 'true']: s#106
[#186 'u32']: s#85
[#186 'vec2']: s#90
[#186 'vec3']: s#91
[#186 'vec4']: s#92
[#186 '~']: s#63
[#186 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#186 /0[fh]/]: s#116
[#186 /0[iu]?/]: s#113
[#186 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#186 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#186 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#186 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#186 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#186 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#186 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#186 /[1-9][0-9]*[fh]/]: s#117
[#186 /[1-9][0-9]*[iu]?/]: s#114
[#187 '/[rgba]/']: s#266
[#187 '/[rgba][rgba]/']: s#267
[#187 '/[rgba][rgba][rgba]/']: s#268
[#187 '/[rgba][rgba][rgba][rgba]/']: s#269
[#187 '/[xyzw]/']: s#270
[#187 '/[xyzw][xyzw]/']: s#271
[#187 '/[xyzw][xyzw][xyzw]/']: s#272
[#187 '/[xyzw][xyzw][xyzw][xyzw]/']: s#273
[#187 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#265
[#193 '!']: s#62
[#193 '&']: s#65
[#193 '(']: s#80
[#193 '*']: s#64
[#193 '-']: s#61
[#193 'array']: s#76
[#193 'atomic']: s#88
[#193 'bitcast']: s#71
[#193 'bool']: s#81
[#193 'f16']: s#83
[#193 'f32']: s#82
[#193 'false']: s#107
[#193 'i32']: s#84
[#193 'mat2x2']: s#93
[#193 'mat2x3']: s#94
[#193 'mat2x4']: s#95
[#193 'mat3x2']: s#96
[#193 'mat3x3']: s#97
[#193 'mat3x4']: s#98
[#193 'mat4x2']: s#99
[#193 'mat4x3']: s#100
[#193 'mat4x4']: s#101
[#193 'ptr']: s#86
[#193 'sampler']: s#124
[#193 'sampler_comparison']: s#125
[#193 'texture_1d']: s#131
[#193 'texture_2d']: s#132
[#193 'texture_2d_array']: s#133
[#193 'texture_3d']: s#134
[#193 'texture_cube']: s#135
[#193 'texture_cube_array']: s#136
[#193 'texture_depth_2d']: s#126
[#193 'texture_depth_2d_array']: s#127
[#193 'texture_depth_cube']: s#128
[#193 'texture_depth_cube_array']: s#129
[#193 'texture_depth_multisampled_2d']: s#130
[#193 'texture_multisampled_2d']: s#137
[#193 'texture_storage_1d']: s#138
[#193 'texture_storage_2d']: s#139
[#193 'texture_storage_2d_array']: s#140
[#193 'texture_storage_3d']: s#141
[#193 'true']: s#106
[#193 'u32']: s#85
[#193 'vec2']: s#90
[#193 'vec3']: s#91
[#193 'vec4']: s#92
[#193 '~']: s#63
[#193 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#193 /0[fh]/]: s#116
[#193 /0[iu]?/]: s#113
[#193 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#193 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#193 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#193 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#193 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#193 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#193 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#193 /[1-9][0-9]*[fh]/]: s#117
[#193 /[1-9][0-9]*[iu]?/]: s#114
[#194 'f16']: r#21
[#194 'texture_multisampled_2d']: r#21
[#194 /0[xX][0-9a-fA-F]+[iu]?/]: r#21
[#195 'f16']: r#22
[#195 'texture_multisampled_2d']: r#22
[#195 /0[xX][0-9a-fA-F]+[iu]?/]: r#22
[#196 'f16']: r#23
[#196 'texture_multisampled_2d']: r#23
[#196 /0[xX][0-9a-fA-F]+[iu]?/]: r#23
[#197 '!']: s#62
[#197 '&']: s#65
[#197 '(']: s#80
[#197 '*']: s#64
[#197 '-']: s#61
[#197 'array']: s#76
[#197 'atomic']: s#88
[#197 'bitcast']: s#71
[#197 'bool']: s#81
[#197 'f16']: s#83
[#197 'f32']: s#82
[#197 'false']: s#107
[#197 'i32']: s#84
[#197 'mat2x2']: s#93
[#197 'mat2x3']: s#94
[#197 'mat2x4']: s#95
[#197 'mat3x2']: s#96
[#197 'mat3x3']: s#97
[#197 'mat3x4']: s#98
[#197 'mat4x2']: s#99
[#197 'mat4x3']: s#100
[#197 'mat4x4']: s#101
[#197 'ptr']: s#86
[#197 'sampler']: s#124
[#197 'sampler_comparison']: s#125
[#197 'texture_1d']: s#131
[#197 'texture_2d']: s#132
[#197 'texture_2d_array']: s#133
[#197 'texture_3d']: s#134
[#197 'texture_cube']: s#135
[#197 'texture_cube_array']: s#136
[#197 'texture_depth_2d']: s#126
[#197 'texture_depth_2d_array']: s#127
[#197 'texture_depth_cube']: s#128
[#197 'texture_depth_cube_array']: s#129
[#197 'texture_depth_multisampled_2d']: s#130
[#197 'texture_multisampled_2d']: s#137
[#197 'texture_storage_1d']: s#138
[#197 'texture_storage_2d']: s#139
[#197 'texture_storage_2d_array']: s#140
[#197 'texture_storage_3d']: s#141
[#197 'true']: s#106
[#197 'u32']: s#85
[#197 'vec2']: s#90
[#197 'vec3']: s#91
[#197 'vec4']: s#92
[#197 '~']: s#63
[#197 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#197 /0[fh]/]: s#116
[#197 /0[iu]?/]: s#113
[#197 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#197 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#197 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#197 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#197 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#197 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#197 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#197 /[1-9][0-9]*[fh]/]: s#117
[#197 /[1-9][0-9]*[iu]?/]: s#114
[#198 '!']: s#62
[#198 '&']: s#65
[#198 '(']: s#80
[#198 '*']: s#64
[#198 '-']: s#61
[#198 'array']: s#76
[#198 'atomic']: s#88
[#198 'bitcast']: s#71
[#198 'bool']: s#81
[#198 'f16']: s#83
[#198 'f32']: s#82
[#198 'false']: s#107
[#198 'i32']: s#84
[#198 'mat2x2']: s#93
[#198 'mat2x3']: s#94
[#198 'mat2x4']: s#95
[#198 'mat3x2']: s#96
[#198 'mat3x3']: s#97
[#198 'mat3x4']: s#98
[#198 'mat4x2']: s#99
[#198 'mat4x3']: s#100
[#198 'mat4x4']: s#101
[#198 'ptr']: s#86
[#198 'sampler']: s#124
[#198 'sampler_comparison']: s#125
[#198 'texture_1d']: s#131
[#198 'texture_2d']: s#132
[#198 'texture_2d_array']: s#133
[#198 'texture_3d']: s#134
[#198 'texture_cube']: s#135
[#198 'texture_cube_array']: s#136
[#198 'texture_depth_2d']: s#126
[#198 'texture_depth_2d_array']: s#127
[#198 'texture_depth_cube']: s#128
[#198 'texture_depth_cube_array']: s#129
[#198 'texture_depth_multisampled_2d']: s#130
[#198 'texture_multisampled_2d']: s#137
[#198 'texture_storage_1d']: s#138
[#198 'texture_storage_2d']: s#139
[#198 'texture_storage_2d_array']: s#140
[#198 'texture_storage_3d']: s#141
[#198 'true']: s#106
[#198 'u32']: s#85
[#198 'vec2']: s#90
[#198 'vec3']: s#91
[#198 'vec4']: s#92
[#198 '~']: s#63
[#198 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#198 /0[fh]/]: s#116
[#198 /0[iu]?/]: s#113
[#198 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#198 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#198 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#198 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#198 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#198 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#198 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#198 /[1-9][0-9]*[fh]/]: s#117
[#198 /[1-9][0-9]*[iu]?/]: s#114
[#199 '!']: s#62
[#199 '&']: s#65
[#199 '(']: s#80
[#199 '*']: s#64
[#199 '-']: s#61
[#199 'array']: s#76
[#199 'atomic']: s#88
[#199 'bitcast']: s#71
[#199 'bool']: s#81
[#199 'f16']: s#83
[#199 'f32']: s#82
[#199 'false']: s#107
[#199 'i32']: s#84
[#199 'mat2x2']: s#93
[#199 'mat2x3']: s#94
[#199 'mat2x4']: s#95
[#199 'mat3x2']: s#96
[#199 'mat3x3']: s#97
[#199 'mat3x4']: s#98
[#199 'mat4x2']: s#99
[#199 'mat4x3']: s#100
[#199 'mat4x4']: s#101
[#199 'ptr']: s#86
[#199 'sampler']: s#124
[#199 'sampler_comparison']: s#125
[#199 'texture_1d']: s#131
[#199 'texture_2d']: s#132
[#199 'texture_2d_array']: s#133
[#199 'texture_3d']: s#134
[#199 'texture_cube']: s#135
[#199 'texture_cube_array']: s#136
[#199 'texture_depth_2d']: s#126
[#199 'texture_depth_2d_array']: s#127
[#199 'texture_depth_cube']: s#128
[#199 'texture_depth_cube_array']: s#129
[#199 'texture_depth_multisampled_2d']: s#130
[#199 'texture_multisampled_2d']: s#137
[#199 'texture_storage_1d']: s#138
[#199 'texture_storage_2d']: s#139
[#199 'texture_storage_2d_array']: s#140
[#199 'texture_storage_3d']: s#141
[#199 'true']: s#106
[#199 'u32']: s#85
[#199 'vec2']: s#90
[#199 'vec3']: s#91
[#199 'vec4']: s#92
[#199 '~']: s#63
[#199 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#199 /0[fh]/]: s#116
[#199 /0[iu]?/]: s#113
[#199 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#199 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#199 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#199 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#199 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#199 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#199 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#199 /[1-9][0-9]*[fh]/]: s#117
[#199 /[1-9][0-9]*[iu]?/]: s#114
[#200 'f16']: r#24
[#200 'texture_multisampled_2d']: r#24
[#200 /0[xX][0-9a-fA-F]+[iu]?/]: r#24
[#201 'f16']: r#25
[#201 'texture_multisampled_2d']: r#25
[#201 /0[xX][0-9a-fA-F]+[iu]?/]: r#25
[#202 '!']: s#62
[#202 '&']: s#65
[#202 '(']: s#80
[#202 '*']: s#64
[#202 '-']: s#61
[#202 'array']: s#76
[#202 'atomic']: s#88
[#202 'bitcast']: s#71
[#202 'bool']: s#81
[#202 'f16']: s#83
[#202 'f32']: s#82
[#202 'false']: s#107
[#202 'i32']: s#84
[#202 'mat2x2']: s#93
[#202 'mat2x3']: s#94
[#202 'mat2x4']: s#95
[#202 'mat3x2']: s#96
[#202 'mat3x3']: s#97
[#202 'mat3x4']: s#98
[#202 'mat4x2']: s#99
[#202 'mat4x3']: s#100
[#202 'mat4x4']: s#101
[#202 'ptr']: s#86
[#202 'sampler']: s#124
[#202 'sampler_comparison']: s#125
[#202 'texture_1d']: s#131
[#202 'texture_2d']: s#132
[#202 'texture_2d_array']: s#133
[#202 'texture_3d']: s#134
[#202 'texture_cube']: s#135
[#202 'texture_cube_array']: s#136
[#202 'texture_depth_2d']: s#126
[#202 'texture_depth_2d_array']: s#127
[#202 'texture_depth_cube']: s#128
[#202 'texture_depth_cube_array']: s#129
[#202 'texture_depth_multisampled_2d']: s#130
[#202 'texture_multisampled_2d']: s#137
[#202 'texture_storage_1d']: s#138
[#202 'texture_storage_2d']: s#139
[#202 'texture_storage_2d_array']: s#140
[#202 'texture_storage_3d']: s#141
[#202 'true']: s#106
[#202 'u32']: s#85
[#202 'vec2']: s#90
[#202 'vec3']: s#91
[#202 'vec4']: s#92
[#202 '~']: s#63
[#202 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#202 /0[fh]/]: s#116
[#202 /0[iu]?/]: s#113
[#202 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#202 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#202 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#202 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#202 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#202 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#202 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#202 /[1-9][0-9]*[fh]/]: s#117
[#202 /[1-9][0-9]*[iu]?/]: s#114
[#203 '!']: s#62
[#203 '&']: s#65
[#203 '(']: s#80
[#203 '*']: s#64
[#203 '-']: s#61
[#203 'array']: s#76
[#203 'atomic']: s#88
[#203 'bitcast']: s#71
[#203 'bool']: s#81
[#203 'f16']: s#83
[#203 'f32']: s#82
[#203 'false']: s#107
[#203 'i32']: s#84
[#203 'mat2x2']: s#93
[#203 'mat2x3']: s#94
[#203 'mat2x4']: s#95
[#203 'mat3x2']: s#96
[#203 'mat3x3']: s#97
[#203 'mat3x4']: s#98
[#203 'mat4x2']: s#99
[#203 'mat4x3']: s#100
[#203 'mat4x4']: s#101
[#203 'ptr']: s#86
[#203 'sampler']: s#124
[#203 'sampler_comparison']: s#125
[#203 'texture_1d']: s#131
[#203 'texture_2d']: s#132
[#203 'texture_2d_array']: s#133
[#203 'texture_3d']: s#134
[#203 'texture_cube']: s#135
[#203 'texture_cube_array']: s#136
[#203 'texture_depth_2d']: s#126
[#203 'texture_depth_2d_array']: s#127
[#203 'texture_depth_cube']: s#128
[#203 'texture_depth_cube_array']: s#129
[#203 'texture_depth_multisampled_2d']: s#130
[#203 'texture_multisampled_2d']: s#137
[#203 'texture_storage_1d']: s#138
[#203 'texture_storage_2d']: s#139
[#203 'texture_storage_2d_array']: s#140
[#203 'texture_storage_3d']: s#141
[#203 'true']: s#106
[#203 'u32']: s#85
[#203 'vec2']: s#90
[#203 'vec3']: s#91
[#203 'vec4']: s#92
[#203 '~']: s#63
[#203 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#203 /0[fh]/]: s#116
[#203 /0[iu]?/]: s#113
[#203 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#203 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#203 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#203 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#203 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#203 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#203 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#203 /[1-9][0-9]*[fh]/]: s#117
[#203 /[1-9][0-9]*[iu]?/]: s#114
[#204 '!']: s#62
[#204 '&']: s#65
[#204 '(']: s#80
[#204 '*']: s#64
[#204 '-']: s#61
[#204 'array']: s#76
[#204 'atomic']: s#88
[#204 'bitcast']: s#71
[#204 'bool']: s#81
[#204 'f16']: s#83
[#204 'f32']: s#82
[#204 'false']: s#107
[#204 'i32']: s#84
[#204 'mat2x2']: s#93
[#204 'mat2x3']: s#94
[#204 'mat2x4']: s#95
[#204 'mat3x2']: s#96
[#204 'mat3x3']: s#97
[#204 'mat3x4']: s#98
[#204 'mat4x2']: s#99
[#204 'mat4x3']: s#100
[#204 'mat4x4']: s#101
[#204 'ptr']: s#86
[#204 'sampler']: s#124
[#204 'sampler_comparison']: s#125
[#204 'texture_1d']: s#131
[#204 'texture_2d']: s#132
[#204 'texture_2d_array']: s#133
[#204 'texture_3d']: s#134
[#204 'texture_cube']: s#135
[#204 'texture_cube_array']: s#136
[#204 'texture_depth_2d']: s#126
[#204 'texture_depth_2d_array']: s#127
[#204 'texture_depth_cube']: s#128
[#204 'texture_depth_cube_array']: s#129
[#204 'texture_depth_multisampled_2d']: s#130
[#204 'texture_multisampled_2d']: s#137
[#204 'texture_storage_1d']: s#138
[#204 'texture_storage_2d']: s#139
[#204 'texture_storage_2d_array']: s#140
[#204 'texture_storage_3d']: s#141
[#204 'true']: s#106
[#204 'u32']: s#85
[#204 'vec2']: s#90
[#204 'vec3']: s#91
[#204 'vec4']: s#92
[#204 '~']: s#63
[#204 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#204 /0[fh]/]: s#116
[#204 /0[iu]?/]: s#113
[#204 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#204 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#204 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#204 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#204 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#204 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#204 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#204 /[1-9][0-9]*[fh]/]: s#117
[#204 /[1-9][0-9]*[iu]?/]: s#114
[#205 '!']: s#62
[#205 '&']: s#65
[#205 '(']: s#80
[#205 '*']: s#64
[#205 '-']: s#61
[#205 'array']: s#76
[#205 'atomic']: s#88
[#205 'bitcast']: s#71
[#205 'bool']: s#81
[#205 'f16']: s#83
[#205 'f32']: s#82
[#205 'false']: s#107
[#205 'i32']: s#84
[#205 'mat2x2']: s#93
[#205 'mat2x3']: s#94
[#205 'mat2x4']: s#95
[#205 'mat3x2']: s#96
[#205 'mat3x3']: s#97
[#205 'mat3x4']: s#98
[#205 'mat4x2']: s#99
[#205 'mat4x3']: s#100
[#205 'mat4x4']: s#101
[#205 'ptr']: s#86
[#205 'sampler']: s#124
[#205 'sampler_comparison']: s#125
[#205 'texture_1d']: s#131
[#205 'texture_2d']: s#132
[#205 'texture_2d_array']: s#133
[#205 'texture_3d']: s#134
[#205 'texture_cube']: s#135
[#205 'texture_cube_array']: s#136
[#205 'texture_depth_2d']: s#126
[#205 'texture_depth_2d_array']: s#127
[#205 'texture_depth_cube']: s#128
[#205 'texture_depth_cube_array']: s#129
[#205 'texture_depth_multisampled_2d']: s#130
[#205 'texture_multisampled_2d']: s#137
[#205 'texture_storage_1d']: s#138
[#205 'texture_storage_2d']: s#139
[#205 'texture_storage_2d_array']: s#140
[#205 'texture_storage_3d']: s#141
[#205 'true']: s#106
[#205 'u32']: s#85
[#205 'vec2']: s#90
[#205 'vec3']: s#91
[#205 'vec4']: s#92
[#205 '~']: s#63
[#205 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#205 /0[fh]/]: s#116
[#205 /0[iu]?/]: s#113
[#205 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#205 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#205 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#205 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#205 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#205 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#205 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#205 /[1-9][0-9]*[fh]/]: s#117
[#205 /[1-9][0-9]*[iu]?/]: s#114
[#206 '!']: s#62
[#206 '&']: s#65
[#206 '(']: s#80
[#206 '*']: s#64
[#206 '-']: s#61
[#206 'array']: s#76
[#206 'atomic']: s#88
[#206 'bitcast']: s#71
[#206 'bool']: s#81
[#206 'f16']: s#83
[#206 'f32']: s#82
[#206 'false']: s#107
[#206 'i32']: s#84
[#206 'mat2x2']: s#93
[#206 'mat2x3']: s#94
[#206 'mat2x4']: s#95
[#206 'mat3x2']: s#96
[#206 'mat3x3']: s#97
[#206 'mat3x4']: s#98
[#206 'mat4x2']: s#99
[#206 'mat4x3']: s#100
[#206 'mat4x4']: s#101
[#206 'ptr']: s#86
[#206 'sampler']: s#124
[#206 'sampler_comparison']: s#125
[#206 'texture_1d']: s#131
[#206 'texture_2d']: s#132
[#206 'texture_2d_array']: s#133
[#206 'texture_3d']: s#134
[#206 'texture_cube']: s#135
[#206 'texture_cube_array']: s#136
[#206 'texture_depth_2d']: s#126
[#206 'texture_depth_2d_array']: s#127
[#206 'texture_depth_cube']: s#128
[#206 'texture_depth_cube_array']: s#129
[#206 'texture_depth_multisampled_2d']: s#130
[#206 'texture_multisampled_2d']: s#137
[#206 'texture_storage_1d']: s#138
[#206 'texture_storage_2d']: s#139
[#206 'texture_storage_2d_array']: s#140
[#206 'texture_storage_3d']: s#141
[#206 'true']: s#106
[#206 'u32']: s#85
[#206 'vec2']: s#90
[#206 'vec3']: s#91
[#206 'vec4']: s#92
[#206 '~']: s#63
[#206 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#206 /0[fh]/]: s#116
[#206 /0[iu]?/]: s#113
[#206 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#206 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#206 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#206 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#206 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#206 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#206 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#206 /[1-9][0-9]*[fh]/]: s#117
[#206 /[1-9][0-9]*[iu]?/]: s#114
[#207 '!']: s#62
[#207 '&']: s#65
[#207 '(']: s#80
[#207 '*']: s#64
[#207 '-']: s#61
[#207 'array']: s#76
[#207 'atomic']: s#88
[#207 'bitcast']: s#71
[#207 'bool']: s#81
[#207 'f16']: s#83
[#207 'f32']: s#82
[#207 'false']: s#107
[#207 'i32']: s#84
[#207 'mat2x2']: s#93
[#207 'mat2x3']: s#94
[#207 'mat2x4']: s#95
[#207 'mat3x2']: s#96
[#207 'mat3x3']: s#97
[#207 'mat3x4']: s#98
[#207 'mat4x2']: s#99
[#207 'mat4x3']: s#100
[#207 'mat4x4']: s#101
[#207 'ptr']: s#86
[#207 'sampler']: s#124
[#207 'sampler_comparison']: s#125
[#207 'texture_1d']: s#131
[#207 'texture_2d']: s#132
[#207 'texture_2d_array']: s#133
[#207 'texture_3d']: s#134
[#207 'texture_cube']: s#135
[#207 'texture_cube_array']: s#136
[#207 'texture_depth_2d']: s#126
[#207 'texture_depth_2d_array']: s#127
[#207 'texture_depth_cube']: s#128
[#207 'texture_depth_cube_array']: s#129
[#207 'texture_depth_multisampled_2d']: s#130
[#207 'texture_multisampled_2d']: s#137
[#207 'texture_storage_1d']: s#138
[#207 'texture_storage_2d']: s#139
[#207 'texture_storage_2d_array']: s#140
[#207 'texture_storage_3d']: s#141
[#207 'true']: s#106
[#207 'u32']: s#85
[#207 'vec2']: s#90
[#207 'vec3']: s#91
[#207 'vec4']: s#92
[#207 '~']: s#63
[#207 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#207 /0[fh]/]: s#116
[#207 /0[iu]?/]: s#113
[#207 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#207 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#207 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#207 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#207 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#207 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#207 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#207 /[1-9][0-9]*[fh]/]: s#117
[#207 /[1-9][0-9]*[iu]?/]: s#114
[#208 '!']: s#62
[#208 '&']: s#65
[#208 '(']: s#80
[#208 '*']: s#64
[#208 '-']: s#61
[#208 'array']: s#76
[#208 'atomic']: s#88
[#208 'bitcast']: s#71
[#208 'bool']: s#81
[#208 'f16']: s#83
[#208 'f32']: s#82
[#208 'false']: s#107
[#208 'i32']: s#84
[#208 'mat2x2']: s#93
[#208 'mat2x3']: s#94
[#208 'mat2x4']: s#95
[#208 'mat3x2']: s#96
[#208 'mat3x3']: s#97
[#208 'mat3x4']: s#98
[#208 'mat4x2']: s#99
[#208 'mat4x3']: s#100
[#208 'mat4x4']: s#101
[#208 'ptr']: s#86
[#208 'sampler']: s#124
[#208 'sampler_comparison']: s#125
[#208 'texture_1d']: s#131
[#208 'texture_2d']: s#132
[#208 'texture_2d_array']: s#133
[#208 'texture_3d']: s#134
[#208 'texture_cube']: s#135
[#208 'texture_cube_array']: s#136
[#208 'texture_depth_2d']: s#126
[#208 'texture_depth_2d_array']: s#127
[#208 'texture_depth_cube']: s#128
[#208 'texture_depth_cube_array']: s#129
[#208 'texture_depth_multisampled_2d']: s#130
[#208 'texture_multisampled_2d']: s#137
[#208 'texture_storage_1d']: s#138
[#208 'texture_storage_2d']: s#139
[#208 'texture_storage_2d_array']: s#140
[#208 'texture_storage_3d']: s#141
[#208 'true']: s#106
[#208 'u32']: s#85
[#208 'vec2']: s#90
[#208 'vec3']: s#91
[#208 'vec4']: s#92
[#208 '~']: s#63
[#208 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#208 /0[fh]/]: s#116
[#208 /0[iu]?/]: s#113
[#208 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#208 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#208 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#208 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#208 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#208 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#208 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#208 /[1-9][0-9]*[fh]/]: s#117
[#208 /[1-9][0-9]*[iu]?/]: s#114
[#209 '!']: s#62
[#209 '&']: s#65
[#209 '(']: s#80
[#209 '*']: s#64
[#209 '-']: s#61
[#209 'array']: s#76
[#209 'atomic']: s#88
[#209 'bitcast']: s#71
[#209 'bool']: s#81
[#209 'f16']: s#83
[#209 'f32']: s#82
[#209 'false']: s#107
[#209 'i32']: s#84
[#209 'mat2x2']: s#93
[#209 'mat2x3']: s#94
[#209 'mat2x4']: s#95
[#209 'mat3x2']: s#96
[#209 'mat3x3']: s#97
[#209 'mat3x4']: s#98
[#209 'mat4x2']: s#99
[#209 'mat4x3']: s#100
[#209 'mat4x4']: s#101
[#209 'ptr']: s#86
[#209 'sampler']: s#124
[#209 'sampler_comparison']: s#125
[#209 'texture_1d']: s#131
[#209 'texture_2d']: s#132
[#209 'texture_2d_array']: s#133
[#209 'texture_3d']: s#134
[#209 'texture_cube']: s#135
[#209 'texture_cube_array']: s#136
[#209 'texture_depth_2d']: s#126
[#209 'texture_depth_2d_array']: s#127
[#209 'texture_depth_cube']: s#128
[#209 'texture_depth_cube_array']: s#129
[#209 'texture_depth_multisampled_2d']: s#130
[#209 'texture_multisampled_2d']: s#137
[#209 'texture_storage_1d']: s#138
[#209 'texture_storage_2d']: s#139
[#209 'texture_storage_2d_array']: s#140
[#209 'texture_storage_3d']: s#141
[#209 'true']: s#106
[#209 'u32']: s#85
[#209 'vec2']: s#90
[#209 'vec3']: s#91
[#209 'vec4']: s#92
[#209 '~']: s#63
[#209 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#209 /0[fh]/]: s#116
[#209 /0[iu]?/]: s#113
[#209 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#209 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#209 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#209 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#209 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#209 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#209 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#209 /[1-9][0-9]*[fh]/]: s#117
[#209 /[1-9][0-9]*[iu]?/]: s#114
[#210 '!']: s#62
[#210 '&']: s#65
[#210 '(']: s#80
[#210 '*']: s#64
[#210 '-']: s#61
[#210 'array']: s#76
[#210 'atomic']: s#88
[#210 'bitcast']: s#71
[#210 'bool']: s#81
[#210 'f16']: s#83
[#210 'f32']: s#82
[#210 'false']: s#107
[#210 'i32']: s#84
[#210 'mat2x2']: s#93
[#210 'mat2x3']: s#94
[#210 'mat2x4']: s#95
[#210 'mat3x2']: s#96
[#210 'mat3x3']: s#97
[#210 'mat3x4']: s#98
[#210 'mat4x2']: s#99
[#210 'mat4x3']: s#100
[#210 'mat4x4']: s#101
[#210 'ptr']: s#86
[#210 'sampler']: s#124
[#210 'sampler_comparison']: s#125
[#210 'texture_1d']: s#131
[#210 'texture_2d']: s#132
[#210 'texture_2d_array']: s#133
[#210 'texture_3d']: s#134
[#210 'texture_cube']: s#135
[#210 'texture_cube_array']: s#136
[#210 'texture_depth_2d']: s#126
[#210 'texture_depth_2d_array']: s#127
[#210 'texture_depth_cube']: s#128
[#210 'texture_depth_cube_array']: s#129
[#210 'texture_depth_multisampled_2d']: s#130
[#210 'texture_multisampled_2d']: s#137
[#210 'texture_storage_1d']: s#138
[#210 'texture_storage_2d']: s#139
[#210 'texture_storage_2d_array']: s#140
[#210 'texture_storage_3d']: s#141
[#210 'true']: s#106
[#210 'u32']: s#85
[#210 'vec2']: s#90
[#210 'vec3']: s#91
[#210 'vec4']: s#92
[#210 '~']: s#63
[#210 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#210 /0[fh]/]: s#116
[#210 /0[iu]?/]: s#113
[#210 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#210 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#210 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#210 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#210 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#210 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#210 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#210 /[1-9][0-9]*[fh]/]: s#117
[#210 /[1-9][0-9]*[iu]?/]: s#114
[#211 '!']: s#62
[#211 '&']: s#65
[#211 '(']: s#80
[#211 '*']: s#64
[#211 '-']: s#61
[#211 'array']: s#76
[#211 'atomic']: s#88
[#211 'bitcast']: s#71
[#211 'bool']: s#81
[#211 'f16']: s#83
[#211 'f32']: s#82
[#211 'false']: s#107
[#211 'i32']: s#84
[#211 'mat2x2']: s#93
[#211 'mat2x3']: s#94
[#211 'mat2x4']: s#95
[#211 'mat3x2']: s#96
[#211 'mat3x3']: s#97
[#211 'mat3x4']: s#98
[#211 'mat4x2']: s#99
[#211 'mat4x3']: s#100
[#211 'mat4x4']: s#101
[#211 'ptr']: s#86
[#211 'sampler']: s#124
[#211 'sampler_comparison']: s#125
[#211 'texture_1d']: s#131
[#211 'texture_2d']: s#132
[#211 'texture_2d_array']: s#133
[#211 'texture_3d']: s#134
[#211 'texture_cube']: s#135
[#211 'texture_cube_array']: s#136
[#211 'texture_depth_2d']: s#126
[#211 'texture_depth_2d_array']: s#127
[#211 'texture_depth_cube']: s#128
[#211 'texture_depth_cube_array']: s#129
[#211 'texture_depth_multisampled_2d']: s#130
[#211 'texture_multisampled_2d']: s#137
[#211 'texture_storage_1d']: s#138
[#211 'texture_storage_2d']: s#139
[#211 'texture_storage_2d_array']: s#140
[#211 'texture_storage_3d']: s#141
[#211 'true']: s#106
[#211 'u32']: s#85
[#211 'vec2']: s#90
[#211 'vec3']: s#91
[#211 'vec4']: s#92
[#211 '~']: s#63
[#211 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#211 /0[fh]/]: s#116
[#211 /0[iu]?/]: s#113
[#211 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#211 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#211 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#211 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#211 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#211 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#211 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#211 /[1-9][0-9]*[fh]/]: s#117
[#211 /[1-9][0-9]*[iu]?/]: s#114
[#212 '!']: s#62
[#212 '&']: s#65
[#212 '(']: s#80
[#212 '*']: s#64
[#212 '-']: s#61
[#212 'array']: s#76
[#212 'atomic']: s#88
[#212 'bitcast']: s#71
[#212 'bool']: s#81
[#212 'f16']: s#83
[#212 'f32']: s#82
[#212 'false']: s#107
[#212 'i32']: s#84
[#212 'mat2x2']: s#93
[#212 'mat2x3']: s#94
[#212 'mat2x4']: s#95
[#212 'mat3x2']: s#96
[#212 'mat3x3']: s#97
[#212 'mat3x4']: s#98
[#212 'mat4x2']: s#99
[#212 'mat4x3']: s#100
[#212 'mat4x4']: s#101
[#212 'ptr']: s#86
[#212 'sampler']: s#124
[#212 'sampler_comparison']: s#125
[#212 'texture_1d']: s#131
[#212 'texture_2d']: s#132
[#212 'texture_2d_array']: s#133
[#212 'texture_3d']: s#134
[#212 'texture_cube']: s#135
[#212 'texture_cube_array']: s#136
[#212 'texture_depth_2d']: s#126
[#212 'texture_depth_2d_array']: s#127
[#212 'texture_depth_cube']: s#128
[#212 'texture_depth_cube_array']: s#129
[#212 'texture_depth_multisampled_2d']: s#130
[#212 'texture_multisampled_2d']: s#137
[#212 'texture_storage_1d']: s#138
[#212 'texture_storage_2d']: s#139
[#212 'texture_storage_2d_array']: s#140
[#212 'texture_storage_3d']: s#141
[#212 'true']: s#106
[#212 'u32']: s#85
[#212 'vec2']: s#90
[#212 'vec3']: s#91
[#212 'vec4']: s#92
[#212 '~']: s#63
[#212 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#212 /0[fh]/]: s#116
[#212 /0[iu]?/]: s#113
[#212 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#212 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#212 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#212 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#212 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#212 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#212 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#212 /[1-9][0-9]*[fh]/]: s#117
[#212 /[1-9][0-9]*[iu]?/]: s#114
[#213 '!']: s#62
[#213 '&']: s#65
[#213 '(']: s#80
[#213 '*']: s#64
[#213 '-']: s#61
[#213 'array']: s#76
[#213 'atomic']: s#88
[#213 'bitcast']: s#71
[#213 'bool']: s#81
[#213 'f16']: s#83
[#213 'f32']: s#82
[#213 'false']: s#107
[#213 'i32']: s#84
[#213 'mat2x2']: s#93
[#213 'mat2x3']: s#94
[#213 'mat2x4']: s#95
[#213 'mat3x2']: s#96
[#213 'mat3x3']: s#97
[#213 'mat3x4']: s#98
[#213 'mat4x2']: s#99
[#213 'mat4x3']: s#100
[#213 'mat4x4']: s#101
[#213 'ptr']: s#86
[#213 'sampler']: s#124
[#213 'sampler_comparison']: s#125
[#213 'texture_1d']: s#131
[#213 'texture_2d']: s#132
[#213 'texture_2d_array']: s#133
[#213 'texture_3d']: s#134
[#213 'texture_cube']: s#135
[#213 'texture_cube_array']: s#136
[#213 'texture_depth_2d']: s#126
[#213 'texture_depth_2d_array']: s#127
[#213 'texture_depth_cube']: s#128
[#213 'texture_depth_cube_array']: s#129
[#213 'texture_depth_multisampled_2d']: s#130
[#213 'texture_multisampled_2d']: s#137
[#213 'texture_storage_1d']: s#138
[#213 'texture_storage_2d']: s#139
[#213 'texture_storage_2d_array']: s#140
[#213 'texture_storage_3d']: s#141
[#213 'true']: s#106
[#213 'u32']: s#85
[#213 'vec2']: s#90
[#213 'vec3']: s#91
[#213 'vec4']: s#92
[#213 '~']: s#63
[#213 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#213 /0[fh]/]: s#116
[#213 /0[iu]?/]: s#113
[#213 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#213 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#213 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#213 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#213 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#213 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#213 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#213 /[1-9][0-9]*[fh]/]: s#117
[#213 /[1-9][0-9]*[iu]?/]: s#114
[#214 '!']: s#62
[#214 '&']: s#65
[#214 '(']: s#80
[#214 '*']: s#64
[#214 '-']: s#61
[#214 'array']: s#76
[#214 'atomic']: s#88
[#214 'bitcast']: s#71
[#214 'bool']: s#81
[#214 'f16']: s#83
[#214 'f32']: s#82
[#214 'false']: s#107
[#214 'i32']: s#84
[#214 'mat2x2']: s#93
[#214 'mat2x3']: s#94
[#214 'mat2x4']: s#95
[#214 'mat3x2']: s#96
[#214 'mat3x3']: s#97
[#214 'mat3x4']: s#98
[#214 'mat4x2']: s#99
[#214 'mat4x3']: s#100
[#214 'mat4x4']: s#101
[#214 'ptr']: s#86
[#214 'sampler']: s#124
[#214 'sampler_comparison']: s#125
[#214 'texture_1d']: s#131
[#214 'texture_2d']: s#132
[#214 'texture_2d_array']: s#133
[#214 'texture_3d']: s#134
[#214 'texture_cube']: s#135
[#214 'texture_cube_array']: s#136
[#214 'texture_depth_2d']: s#126
[#214 'texture_depth_2d_array']: s#127
[#214 'texture_depth_cube']: s#128
[#214 'texture_depth_cube_array']: s#129
[#214 'texture_depth_multisampled_2d']: s#130
[#214 'texture_multisampled_2d']: s#137
[#214 'texture_storage_1d']: s#138
[#214 'texture_storage_2d']: s#139
[#214 'texture_storage_2d_array']: s#140
[#214 'texture_storage_3d']: s#141
[#214 'true']: s#106
[#214 'u32']: s#85
[#214 'vec2']: s#90
[#214 'vec3']: s#91
[#214 'vec4']: s#92
[#214 '~']: s#63
[#214 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#214 /0[fh]/]: s#116
[#214 /0[iu]?/]: s#113
[#214 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#214 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#214 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#214 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#214 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#214 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#214 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#214 /[1-9][0-9]*[fh]/]: s#117
[#214 /[1-9][0-9]*[iu]?/]: s#114
[#215 '!']: s#62
[#215 '&']: s#65
[#215 '(']: s#80
[#215 '*']: s#64
[#215 '-']: s#61
[#215 'array']: s#76
[#215 'atomic']: s#88
[#215 'bitcast']: s#71
[#215 'bool']: s#81
[#215 'f16']: s#83
[#215 'f32']: s#82
[#215 'false']: s#107
[#215 'i32']: s#84
[#215 'mat2x2']: s#93
[#215 'mat2x3']: s#94
[#215 'mat2x4']: s#95
[#215 'mat3x2']: s#96
[#215 'mat3x3']: s#97
[#215 'mat3x4']: s#98
[#215 'mat4x2']: s#99
[#215 'mat4x3']: s#100
[#215 'mat4x4']: s#101
[#215 'ptr']: s#86
[#215 'sampler']: s#124
[#215 'sampler_comparison']: s#125
[#215 'texture_1d']: s#131
[#215 'texture_2d']: s#132
[#215 'texture_2d_array']: s#133
[#215 'texture_3d']: s#134
[#215 'texture_cube']: s#135
[#215 'texture_cube_array']: s#136
[#215 'texture_depth_2d']: s#126
[#215 'texture_depth_2d_array']: s#127
[#215 'texture_depth_cube']: s#128
[#215 'texture_depth_cube_array']: s#129
[#215 'texture_depth_multisampled_2d']: s#130
[#215 'texture_multisampled_2d']: s#137
[#215 'texture_storage_1d']: s#138
[#215 'texture_storage_2d']: s#139
[#215 'texture_storage_2d_array']: s#140
[#215 'texture_storage_3d']: s#141
[#215 'true']: s#106
[#215 'u32']: s#85
[#215 'vec2']: s#90
[#215 'vec3']: s#91
[#215 'vec4']: s#92
[#215 '~']: s#63
[#215 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#215 /0[fh]/]: s#116
[#215 /0[iu]?/]: s#113
[#215 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#215 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#215 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#215 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#215 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#215 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#215 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#215 /[1-9][0-9]*[fh]/]: s#117
[#215 /[1-9][0-9]*[iu]?/]: s#114
[#216 'flat']: s#242
[#216 'linear']: s#241
[#216 'perspective']: s#240
[#217 '!']: s#62
[#217 '&']: s#65
[#217 '(']: s#80
[#217 '*']: s#64
[#217 '-']: s#61
[#217 'array']: s#76
[#217 'atomic']: s#88
[#217 'bitcast']: s#71
[#217 'bool']: s#81
[#217 'f16']: s#83
[#217 'f32']: s#82
[#217 'false']: s#107
[#217 'i32']: s#84
[#217 'mat2x2']: s#93
[#217 'mat2x3']: s#94
[#217 'mat2x4']: s#95
[#217 'mat3x2']: s#96
[#217 'mat3x3']: s#97
[#217 'mat3x4']: s#98
[#217 'mat4x2']: s#99
[#217 'mat4x3']: s#100
[#217 'mat4x4']: s#101
[#217 'ptr']: s#86
[#217 'sampler']: s#124
[#217 'sampler_comparison']: s#125
[#217 'texture_1d']: s#131
[#217 'texture_2d']: s#132
[#217 'texture_2d_array']: s#133
[#217 'texture_3d']: s#134
[#217 'texture_cube']: s#135
[#217 'texture_cube_array']: s#136
[#217 'texture_depth_2d']: s#126
[#217 'texture_depth_2d_array']: s#127
[#217 'texture_depth_cube']: s#128
[#217 'texture_depth_cube_array']: s#129
[#217 'texture_depth_multisampled_2d']: s#130
[#217 'texture_multisampled_2d']: s#137
[#217 'texture_storage_1d']: s#138
[#217 'texture_storage_2d']: s#139
[#217 'texture_storage_2d_array']: s#140
[#217 'texture_storage_3d']: s#141
[#217 'true']: s#106
[#217 'u32']: s#85
[#217 'vec2']: s#90
[#217 'vec3']: s#91
[#217 'vec4']: s#92
[#217 '~']: s#63
[#217 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#217 /0[fh]/]: s#116
[#217 /0[iu]?/]: s#113
[#217 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#217 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#217 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#217 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#217 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#217 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#217 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#217 /[1-9][0-9]*[fh]/]: s#117
[#217 /[1-9][0-9]*[iu]?/]: s#114
[#218 '!']: s#62
[#218 '&']: s#65
[#218 '(']: s#80
[#218 '*']: s#64
[#218 '-']: s#61
[#218 'array']: s#76
[#218 'atomic']: s#88
[#218 'bitcast']: s#71
[#218 'bool']: s#81
[#218 'f16']: s#83
[#218 'f32']: s#82
[#218 'false']: s#107
[#218 'i32']: s#84
[#218 'mat2x2']: s#93
[#218 'mat2x3']: s#94
[#218 'mat2x4']: s#95
[#218 'mat3x2']: s#96
[#218 'mat3x3']: s#97
[#218 'mat3x4']: s#98
[#218 'mat4x2']: s#99
[#218 'mat4x3']: s#100
[#218 'mat4x4']: s#101
[#218 'ptr']: s#86
[#218 'sampler']: s#124
[#218 'sampler_comparison']: s#125
[#218 'texture_1d']: s#131
[#218 'texture_2d']: s#132
[#218 'texture_2d_array']: s#133
[#218 'texture_3d']: s#134
[#218 'texture_cube']: s#135
[#218 'texture_cube_array']: s#136
[#218 'texture_depth_2d']: s#126
[#218 'texture_depth_2d_array']: s#127
[#218 'texture_depth_cube']: s#128
[#218 'texture_depth_cube_array']: s#129
[#218 'texture_depth_multisampled_2d']: s#130
[#218 'texture_multisampled_2d']: s#137
[#218 'texture_storage_1d']: s#138
[#218 'texture_storage_2d']: s#139
[#218 'texture_storage_2d_array']: s#140
[#218 'texture_storage_3d']: s#141
[#218 'true']: s#106
[#218 'u32']: s#85
[#218 'vec2']: s#90
[#218 'vec3']: s#91
[#218 'vec4']: s#92
[#218 '~']: s#63
[#218 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#218 /0[fh]/]: s#116
[#218 /0[iu]?/]: s#113
[#218 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#218 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#218 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#218 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#218 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#218 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#218 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#218 /[1-9][0-9]*[fh]/]: s#117
[#218 /[1-9][0-9]*[iu]?/]: s#114
[#219 'frag_depth']: s#229
[#219 'front_facing']: s#228
[#219 'global_invocation_id']: s#232
[#219 'instance_index']: s#226
[#219 'local_invocation_id']: s#230
[#219 'local_invocation_index']: s#231
[#219 'num_workgroups']: s#234
[#219 'position']: s#227
[#219 'sample_index']: s#235
[#219 'sample_mask']: s#236
[#219 'vertex_index']: s#225
[#219 'workgroup_id']: s#233
[#220 '!']: s#62
[#220 '&']: s#65
[#220 '(']: s#80
[#220 '*']: s#64
[#220 '-']: s#61
[#220 'array']: s#76
[#220 'atomic']: s#88
[#220 'bitcast']: s#71
[#220 'bool']: s#81
[#220 'f16']: s#83
[#220 'f32']: s#82
[#220 'false']: s#107
[#220 'i32']: s#84
[#220 'mat2x2']: s#93
[#220 'mat2x3']: s#94
[#220 'mat2x4']: s#95
[#220 'mat3x2']: s#96
[#220 'mat3x3']: s#97
[#220 'mat3x4']: s#98
[#220 'mat4x2']: s#99
[#220 'mat4x3']: s#100
[#220 'mat4x4']: s#101
[#220 'ptr']: s#86
[#220 'sampler']: s#124
[#220 'sampler_comparison']: s#125
[#220 'texture_1d']: s#131
[#220 'texture_2d']: s#132
[#220 'texture_2d_array']: s#133
[#220 'texture_3d']: s#134
[#220 'texture_cube']: s#135
[#220 'texture_cube_array']: s#136
[#220 'texture_depth_2d']: s#126
[#220 'texture_depth_2d_array']: s#127
[#220 'texture_depth_cube']: s#128
[#220 'texture_depth_cube_array']: s#129
[#220 'texture_depth_multisampled_2d']: s#130
[#220 'texture_multisampled_2d']: s#137
[#220 'texture_storage_1d']: s#138
[#220 'texture_storage_2d']: s#139
[#220 'texture_storage_2d_array']: s#140
[#220 'texture_storage_3d']: s#141
[#220 'true']: s#106
[#220 'u32']: s#85
[#220 'vec2']: s#90
[#220 'vec3']: s#91
[#220 'vec4']: s#92
[#220 '~']: s#63
[#220 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#220 /0[fh]/]: s#116
[#220 /0[iu]?/]: s#113
[#220 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#220 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#220 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#220 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#220 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#220 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#220 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#220 /[1-9][0-9]*[fh]/]: s#117
[#220 /[1-9][0-9]*[iu]?/]: s#114
[#221 '!']: s#62
[#221 '&']: s#65
[#221 '(']: s#80
[#221 '*']: s#64
[#221 '-']: s#61
[#221 'array']: s#76
[#221 'atomic']: s#88
[#221 'bitcast']: s#71
[#221 'bool']: s#81
[#221 'f16']: s#83
[#221 'f32']: s#82
[#221 'false']: s#107
[#221 'i32']: s#84
[#221 'mat2x2']: s#93
[#221 'mat2x3']: s#94
[#221 'mat2x4']: s#95
[#221 'mat3x2']: s#96
[#221 'mat3x3']: s#97
[#221 'mat3x4']: s#98
[#221 'mat4x2']: s#99
[#221 'mat4x3']: s#100
[#221 'mat4x4']: s#101
[#221 'ptr']: s#86
[#221 'sampler']: s#124
[#221 'sampler_comparison']: s#125
[#221 'texture_1d']: s#131
[#221 'texture_2d']: s#132
[#221 'texture_2d_array']: s#133
[#221 'texture_3d']: s#134
[#221 'texture_cube']: s#135
[#221 'texture_cube_array']: s#136
[#221 'texture_depth_2d']: s#126
[#221 'texture_depth_2d_array']: s#127
[#221 'texture_depth_cube']: s#128
[#221 'texture_depth_cube_array']: s#129
[#221 'texture_depth_multisampled_2d']: s#130
[#221 'texture_multisampled_2d']: s#137
[#221 'texture_storage_1d']: s#138
[#221 'texture_storage_2d']: s#139
[#221 'texture_storage_2d_array']: s#140
[#221 'texture_storage_3d']: s#141
[#221 'true']: s#106
[#221 'u32']: s#85
[#221 'vec2']: s#90
[#221 'vec3']: s#91
[#221 'vec4']: s#92
[#221 '~']: s#63
[#221 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#221 /0[fh]/]: s#116
[#221 /0[iu]?/]: s#113
[#221 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#221 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#221 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#221 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#221 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#221 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#221 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#221 /[1-9][0-9]*[fh]/]: s#117
[#221 /[1-9][0-9]*[iu]?/]: s#114
[#222 ',']: s#454
[#223 ',']: s#454
[#224 ',']: s#454
[#237 ',']: s#454
[#238 ',']: s#454
[#239 ',']: s#457
[#243 ',']: s#454
[#244 ',']: s#454
[#245 ',']: s#451
[#247 '<<']: s#197
[#247 '>>']: s#198
[#258 '%']: s#196
[#258 '*']: s#194
[#258 '/']: s#195
[#263 '.']: s#187
[#263 '[']: s#186
[#264 '.']: s#187
[#264 '[']: s#186
[#274 ']']: s#445
[#275 ')']: s#444
[#277 ',']: s#443
[#278 '>']: s#439
[#281 '<']: s#180
[#282 '<']: s#179
[#283 '<']: s#178
[#284 '>']: s#438
[#285 '>']: s#437
[#286 ',']: s#436
[#288 ',']: s#434
[#294 '>']: s#433
[#295 '>']: s#432
[#296 '>']: s#431
[#297 ',']: s#430
[#315 '}']: s#429
[#317 '&']: s#353
[#317 '(']: s#354
[#317 '*']: s#352
[#317 ';']: s#318
[#317 '_']: s#350
[#317 'break']: s#343
[#317 'const']: s#342
[#317 'continue']: s#344
[#317 'discard']: s#329
[#317 'for']: s#337
[#317 'if']: s#348
[#317 'let']: s#341
[#317 'loop']: s#336
[#317 'return']: s#333
[#317 'static_assert']: s#25
[#317 'switch']: s#335
[#317 'var']: s#150
[#317 'while']: s#338
[#317 '{']: s#171
[#317 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#318 'break']: r#26
[#318 'continue']: r#26
[#318 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#26
[#319 ';']: s#427
[#320 'break']: r#27
[#320 'continue']: r#27
[#320 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#27
[#321 'break']: r#28
[#321 'continue']: r#28
[#321 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#28
[#322 'break']: r#29
[#322 'continue']: r#29
[#322 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#29
[#323 'break']: r#30
[#323 'continue']: r#30
[#323 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#30
[#324 'break']: r#31
[#324 'continue']: r#31
[#324 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#31
[#325 ';']: s#426
[#326 ';']: s#425
[#327 ';']: s#424
[#328 ';']: s#423
[#329 ';']: s#422
[#330 ';']: s#421
[#331 'break']: r#32
[#331 'continue']: r#32
[#331 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#32
[#332 ';']: s#420
[#333 '!']: s#62
[#333 '&']: s#65
[#333 '(']: s#80
[#333 '*']: s#64
[#333 '-']: s#61
[#333 'array']: s#76
[#333 'atomic']: s#88
[#333 'bitcast']: s#71
[#333 'bool']: s#81
[#333 'f16']: s#83
[#333 'f32']: s#82
[#333 'false']: s#107
[#333 'i32']: s#84
[#333 'mat2x2']: s#93
[#333 'mat2x3']: s#94
[#333 'mat2x4']: s#95
[#333 'mat3x2']: s#96
[#333 'mat3x3']: s#97
[#333 'mat3x4']: s#98
[#333 'mat4x2']: s#99
[#333 'mat4x3']: s#100
[#333 'mat4x4']: s#101
[#333 'ptr']: s#86
[#333 'sampler']: s#124
[#333 'sampler_comparison']: s#125
[#333 'texture_1d']: s#131
[#333 'texture_2d']: s#132
[#333 'texture_2d_array']: s#133
[#333 'texture_3d']: s#134
[#333 'texture_cube']: s#135
[#333 'texture_cube_array']: s#136
[#333 'texture_depth_2d']: s#126
[#333 'texture_depth_2d_array']: s#127
[#333 'texture_depth_cube']: s#128
[#333 'texture_depth_cube_array']: s#129
[#333 'texture_depth_multisampled_2d']: s#130
[#333 'texture_multisampled_2d']: s#137
[#333 'texture_storage_1d']: s#138
[#333 'texture_storage_2d']: s#139
[#333 'texture_storage_2d_array']: s#140
[#333 'texture_storage_3d']: s#141
[#333 'true']: s#106
[#333 'u32']: s#85
[#333 'vec2']: s#90
[#333 'vec3']: s#91
[#333 'vec4']: s#92
[#333 '~']: s#63
[#333 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#333 /0[fh]/]: s#116
[#333 /0[iu]?/]: s#113
[#333 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#333 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#333 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#333 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#333 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#333 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#333 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#333 /[1-9][0-9]*[fh]/]: s#117
[#333 /[1-9][0-9]*[iu]?/]: s#114
[#334 'else']: s#417
[#335 '!']: s#62
[#335 '&']: s#65
[#335 '(']: s#80
[#335 '*']: s#64
[#335 '-']: s#61
[#335 'array']: s#76
[#335 'atomic']: s#88
[#335 'bitcast']: s#71
[#335 'bool']: s#81
[#335 'f16']: s#83
[#335 'f32']: s#82
[#335 'false']: s#107
[#335 'i32']: s#84
[#335 'mat2x2']: s#93
[#335 'mat2x3']: s#94
[#335 'mat2x4']: s#95
[#335 'mat3x2']: s#96
[#335 'mat3x3']: s#97
[#335 'mat3x4']: s#98
[#335 'mat4x2']: s#99
[#335 'mat4x3']: s#100
[#335 'mat4x4']: s#101
[#335 'ptr']: s#86
[#335 'sampler']: s#124
[#335 'sampler_comparison']: s#125
[#335 'texture_1d']: s#131
[#335 'texture_2d']: s#132
[#335 'texture_2d_array']: s#133
[#335 'texture_3d']: s#134
[#335 'texture_cube']: s#135
[#335 'texture_cube_array']: s#136
[#335 'texture_depth_2d']: s#126
[#335 'texture_depth_2d_array']: s#127
[#335 'texture_depth_cube']: s#128
[#335 'texture_depth_cube_array']: s#129
[#335 'texture_depth_multisampled_2d']: s#130
[#335 'texture_multisampled_2d']: s#137
[#335 'texture_storage_1d']: s#138
[#335 'texture_storage_2d']: s#139
[#335 'texture_storage_2d_array']: s#140
[#335 'texture_storage_3d']: s#141
[#335 'true']: s#106
[#335 'u32']: s#85
[#335 'vec2']: s#90
[#335 'vec3']: s#91
[#335 'vec4']: s#92
[#335 '~']: s#63
[#335 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#335 /0[fh]/]: s#116
[#335 /0[iu]?/]: s#113
[#335 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#335 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#335 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#335 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#335 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#335 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#335 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#335 /[1-9][0-9]*[fh]/]: s#117
[#335 /[1-9][0-9]*[iu]?/]: s#114
[#336 '{']: s#412
[#337 '(']: s#411
[#338 '!']: s#62
[#338 '&']: s#65
[#338 '(']: s#80
[#338 '*']: s#64
[#338 '-']: s#61
[#338 'array']: s#76
[#338 'atomic']: s#88
[#338 'bitcast']: s#71
[#338 'bool']: s#81
[#338 'f16']: s#83
[#338 'f32']: s#82
[#338 'false']: s#107
[#338 'i32']: s#84
[#338 'mat2x2']: s#93
[#338 'mat2x3']: s#94
[#338 'mat2x4']: s#95
[#338 'mat3x2']: s#96
[#338 'mat3x3']: s#97
[#338 'mat3x4']: s#98
[#338 'mat4x2']: s#99
[#338 'mat4x3']: s#100
[#338 'mat4x4']: s#101
[#338 'ptr']: s#86
[#338 'sampler']: s#124
[#338 'sampler_comparison']: s#125
[#338 'texture_1d']: s#131
[#338 'texture_2d']: s#132
[#338 'texture_2d_array']: s#133
[#338 'texture_3d']: s#134
[#338 'texture_cube']: s#135
[#338 'texture_cube_array']: s#136
[#338 'texture_depth_2d']: s#126
[#338 'texture_depth_2d_array']: s#127
[#338 'texture_depth_cube']: s#128
[#338 'texture_depth_cube_array']: s#129
[#338 'texture_depth_multisampled_2d']: s#130
[#338 'texture_multisampled_2d']: s#137
[#338 'texture_storage_1d']: s#138
[#338 'texture_storage_2d']: s#139
[#338 'texture_storage_2d_array']: s#140
[#338 'texture_storage_3d']: s#141
[#338 'true']: s#106
[#338 'u32']: s#85
[#338 'vec2']: s#90
[#338 'vec3']: s#91
[#338 'vec4']: s#92
[#338 '~']: s#63
[#338 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#338 /0[fh]/]: s#116
[#338 /0[iu]?/]: s#113
[#338 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#338 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#338 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#338 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#338 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#338 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#338 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#338 /[1-9][0-9]*[fh]/]: s#117
[#338 /[1-9][0-9]*[iu]?/]: s#114
[#339 '(']: s#183
[#340 '=']: s#408
[#341 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#342 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#348 '!']: s#62
[#348 '&']: s#65
[#348 '(']: s#80
[#348 '*']: s#64
[#348 '-']: s#61
[#348 'array']: s#76
[#348 'atomic']: s#88
[#348 'bitcast']: s#71
[#348 'bool']: s#81
[#348 'f16']: s#83
[#348 'f32']: s#82
[#348 'false']: s#107
[#348 'i32']: s#84
[#348 'mat2x2']: s#93
[#348 'mat2x3']: s#94
[#348 'mat2x4']: s#95
[#348 'mat3x2']: s#96
[#348 'mat3x3']: s#97
[#348 'mat3x4']: s#98
[#348 'mat4x2']: s#99
[#348 'mat4x3']: s#100
[#348 'mat4x4']: s#101
[#348 'ptr']: s#86
[#348 'sampler']: s#124
[#348 'sampler_comparison']: s#125
[#348 'texture_1d']: s#131
[#348 'texture_2d']: s#132
[#348 'texture_2d_array']: s#133
[#348 'texture_3d']: s#134
[#348 'texture_cube']: s#135
[#348 'texture_cube_array']: s#136
[#348 'texture_depth_2d']: s#126
[#348 'texture_depth_2d_array']: s#127
[#348 'texture_depth_cube']: s#128
[#348 'texture_depth_cube_array']: s#129
[#348 'texture_depth_multisampled_2d']: s#130
[#348 'texture_multisampled_2d']: s#137
[#348 'texture_storage_1d']: s#138
[#348 'texture_storage_2d']: s#139
[#348 'texture_storage_2d_array']: s#140
[#348 'texture_storage_3d']: s#141
[#348 'true']: s#106
[#348 'u32']: s#85
[#348 'vec2']: s#90
[#348 'vec3']: s#91
[#348 'vec4']: s#92
[#348 '~']: s#63
[#348 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#348 /0[fh]/]: s#116
[#348 /0[iu]?/]: s#113
[#348 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#348 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#348 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#348 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#348 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#348 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#348 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#348 /[1-9][0-9]*[fh]/]: s#117
[#348 /[1-9][0-9]*[iu]?/]: s#114
[#349 '%=']: s#399
[#349 '&=']: s#400
[#349 '*=']: s#397
[#349 '++']: s#391
[#349 '+=']: s#395
[#349 '--']: s#392
[#349 '-=']: s#396
[#349 '/=']: s#398
[#349 '<<=']: s#404
[#349 '=']: s#393
[#349 '>>=']: s#403
[#349 '^=']: s#402
[#349 '|=']: s#401
[#350 '=']: s#389
[#351 '.']: s#187
[#351 '[']: s#186
[#352 '&']: s#353
[#352 '(']: s#354
[#352 '*']: s#352
[#352 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#353 '&']: s#353
[#353 '(']: s#354
[#353 '*']: s#352
[#353 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#354 '&']: s#353
[#354 '(']: s#354
[#354 '*']: s#352
[#354 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#355 '@']: s#30
[#356 ',']: s#376
[#357 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#265
[#359 '@']: s#30
[#362 '!']: s#62
[#362 '&']: s#65
[#362 '(']: s#80
[#362 '*']: s#64
[#362 '-']: s#61
[#362 'array']: s#76
[#362 'atomic']: s#88
[#362 'bitcast']: s#71
[#362 'bool']: s#81
[#362 'f16']: s#83
[#362 'f32']: s#82
[#362 'false']: s#107
[#362 'i32']: s#84
[#362 'mat2x2']: s#93
[#362 'mat2x3']: s#94
[#362 'mat2x4']: s#95
[#362 'mat3x2']: s#96
[#362 'mat3x3']: s#97
[#362 'mat3x4']: s#98
[#362 'mat4x2']: s#99
[#362 'mat4x3']: s#100
[#362 'mat4x4']: s#101
[#362 'ptr']: s#86
[#362 'sampler']: s#124
[#362 'sampler_comparison']: s#125
[#362 'texture_1d']: s#131
[#362 'texture_2d']: s#132
[#362 'texture_2d_array']: s#133
[#362 'texture_3d']: s#134
[#362 'texture_cube']: s#135
[#362 'texture_cube_array']: s#136
[#362 'texture_depth_2d']: s#126
[#362 'texture_depth_2d_array']: s#127
[#362 'texture_depth_cube']: s#128
[#362 'texture_depth_cube_array']: s#129
[#362 'texture_depth_multisampled_2d']: s#130
[#362 'texture_multisampled_2d']: s#137
[#362 'texture_storage_1d']: s#138
[#362 'texture_storage_2d']: s#139
[#362 'texture_storage_2d_array']: s#140
[#362 'texture_storage_3d']: s#141
[#362 'true']: s#106
[#362 'u32']: s#85
[#362 'vec2']: s#90
[#362 'vec3']: s#91
[#362 'vec4']: s#92
[#362 '~']: s#63
[#362 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#362 /0[fh]/]: s#116
[#362 /0[iu]?/]: s#113
[#362 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#362 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#362 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#362 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#362 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#362 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#362 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#362 /[1-9][0-9]*[fh]/]: s#117
[#362 /[1-9][0-9]*[iu]?/]: s#114
[#366 ',']: s#369
[#368 '>']: s#522
[#369 'read']: s#483
[#369 'read_write']: s#485
[#369 'write']: s#484
[#372 ':']: s#520
[#373 ',']: s#519
[#375 ',']: s#376
[#376 '@']: s#30
[#377 ')']: s#515
[#379 ',']: s#514
[#380 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#382 '@']: s#30
[#383 ')']: s#508
[#389 '!']: s#62
[#389 '&']: s#65
[#389 '(']: s#80
[#389 '*']: s#64
[#389 '-']: s#61
[#389 'array']: s#76
[#389 'atomic']: s#88
[#389 'bitcast']: s#71
[#389 'bool']: s#81
[#389 'f16']: s#83
[#389 'f32']: s#82
[#389 'false']: s#107
[#389 'i32']: s#84
[#389 'mat2x2']: s#93
[#389 'mat2x3']: s#94
[#389 'mat2x4']: s#95
[#389 'mat3x2']: s#96
[#389 'mat3x3']: s#97
[#389 'mat3x4']: s#98
[#389 'mat4x2']: s#99
[#389 'mat4x3']: s#100
[#389 'mat4x4']: s#101
[#389 'ptr']: s#86
[#389 'sampler']: s#124
[#389 'sampler_comparison']: s#125
[#389 'texture_1d']: s#131
[#389 'texture_2d']: s#132
[#389 'texture_2d_array']: s#133
[#389 'texture_3d']: s#134
[#389 'texture_cube']: s#135
[#389 'texture_cube_array']: s#136
[#389 'texture_depth_2d']: s#126
[#389 'texture_depth_2d_array']: s#127
[#389 'texture_depth_cube']: s#128
[#389 'texture_depth_cube_array']: s#129
[#389 'texture_depth_multisampled_2d']: s#130
[#389 'texture_multisampled_2d']: s#137
[#389 'texture_storage_1d']: s#138
[#389 'texture_storage_2d']: s#139
[#389 'texture_storage_2d_array']: s#140
[#389 'texture_storage_3d']: s#141
[#389 'true']: s#106
[#389 'u32']: s#85
[#389 'vec2']: s#90
[#389 'vec3']: s#91
[#389 'vec4']: s#92
[#389 '~']: s#63
[#389 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#389 /0[fh]/]: s#116
[#389 /0[iu]?/]: s#113
[#389 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#389 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#389 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#389 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#389 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#389 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#389 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#389 /[1-9][0-9]*[fh]/]: s#117
[#389 /[1-9][0-9]*[iu]?/]: s#114
[#390 '!']: s#62
[#390 '&']: s#65
[#390 '(']: s#80
[#390 '*']: s#64
[#390 '-']: s#61
[#390 'array']: s#76
[#390 'atomic']: s#88
[#390 'bitcast']: s#71
[#390 'bool']: s#81
[#390 'f16']: s#83
[#390 'f32']: s#82
[#390 'false']: s#107
[#390 'i32']: s#84
[#390 'mat2x2']: s#93
[#390 'mat2x3']: s#94
[#390 'mat2x4']: s#95
[#390 'mat3x2']: s#96
[#390 'mat3x3']: s#97
[#390 'mat3x4']: s#98
[#390 'mat4x2']: s#99
[#390 'mat4x3']: s#100
[#390 'mat4x4']: s#101
[#390 'ptr']: s#86
[#390 'sampler']: s#124
[#390 'sampler_comparison']: s#125
[#390 'texture_1d']: s#131
[#390 'texture_2d']: s#132
[#390 'texture_2d_array']: s#133
[#390 'texture_3d']: s#134
[#390 'texture_cube']: s#135
[#390 'texture_cube_array']: s#136
[#390 'texture_depth_2d']: s#126
[#390 'texture_depth_2d_array']: s#127
[#390 'texture_depth_cube']: s#128
[#390 'texture_depth_cube_array']: s#129
[#390 'texture_depth_multisampled_2d']: s#130
[#390 'texture_multisampled_2d']: s#137
[#390 'texture_storage_1d']: s#138
[#390 'texture_storage_2d']: s#139
[#390 'texture_storage_2d_array']: s#140
[#390 'texture_storage_3d']: s#141
[#390 'true']: s#106
[#390 'u32']: s#85
[#390 'vec2']: s#90
[#390 'vec3']: s#91
[#390 'vec4']: s#92
[#390 '~']: s#63
[#390 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#390 /0[fh]/]: s#116
[#390 /0[iu]?/]: s#113
[#390 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#390 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#390 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#390 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#390 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#390 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#390 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#390 /[1-9][0-9]*[fh]/]: s#117
[#390 /[1-9][0-9]*[iu]?/]: s#114
[#393 'f16']: r#33
[#393 'texture_multisampled_2d']: r#33
[#393 /0[xX][0-9a-fA-F]+[iu]?/]: r#33
[#394 'f16']: r#34
[#394 'texture_multisampled_2d']: r#34
[#394 /0[xX][0-9a-fA-F]+[iu]?/]: r#34
[#395 'f16']: r#35
[#395 'texture_multisampled_2d']: r#35
[#395 /0[xX][0-9a-fA-F]+[iu]?/]: r#35
[#396 'f16']: r#36
[#396 'texture_multisampled_2d']: r#36
[#396 /0[xX][0-9a-fA-F]+[iu]?/]: r#36
[#397 'f16']: r#37
[#397 'texture_multisampled_2d']: r#37
[#397 /0[xX][0-9a-fA-F]+[iu]?/]: r#37
[#398 'f16']: r#38
[#398 'texture_multisampled_2d']: r#38
[#398 /0[xX][0-9a-fA-F]+[iu]?/]: r#38
[#399 'f16']: r#39
[#399 'texture_multisampled_2d']: r#39
[#399 /0[xX][0-9a-fA-F]+[iu]?/]: r#39
[#400 'f16']: r#40
[#400 'texture_multisampled_2d']: r#40
[#400 /0[xX][0-9a-fA-F]+[iu]?/]: r#40
[#401 'f16']: r#41
[#401 'texture_multisampled_2d']: r#41
[#401 /0[xX][0-9a-fA-F]+[iu]?/]: r#41
[#402 'f16']: r#42
[#402 'texture_multisampled_2d']: r#42
[#402 /0[xX][0-9a-fA-F]+[iu]?/]: r#42
[#403 'f16']: r#43
[#403 'texture_multisampled_2d']: r#43
[#403 /0[xX][0-9a-fA-F]+[iu]?/]: r#43
[#404 'f16']: r#44
[#404 'texture_multisampled_2d']: r#44
[#404 /0[xX][0-9a-fA-F]+[iu]?/]: r#44
[#405 '{']: s#171
[#406 '=']: s#504
[#407 '=']: s#503
[#408 '!']: s#62
[#408 '&']: s#65
[#408 '(']: s#80
[#408 '*']: s#64
[#408 '-']: s#61
[#408 'array']: s#76
[#408 'atomic']: s#88
[#408 'bitcast']: s#71
[#408 'bool']: s#81
[#408 'f16']: s#83
[#408 'f32']: s#82
[#408 'false']: s#107
[#408 'i32']: s#84
[#408 'mat2x2']: s#93
[#408 'mat2x3']: s#94
[#408 'mat2x4']: s#95
[#408 'mat3x2']: s#96
[#408 'mat3x3']: s#97
[#408 'mat3x4']: s#98
[#408 'mat4x2']: s#99
[#408 'mat4x3']: s#100
[#408 'mat4x4']: s#101
[#408 'ptr']: s#86
[#408 'sampler']: s#124
[#408 'sampler_comparison']: s#125
[#408 'texture_1d']: s#131
[#408 'texture_2d']: s#132
[#408 'texture_2d_array']: s#133
[#408 'texture_3d']: s#134
[#408 'texture_cube']: s#135
[#408 'texture_cube_array']: s#136
[#408 'texture_depth_2d']: s#126
[#408 'texture_depth_2d_array']: s#127
[#408 'texture_depth_cube']: s#128
[#408 'texture_depth_cube_array']: s#129
[#408 'texture_depth_multisampled_2d']: s#130
[#408 'texture_multisampled_2d']: s#137
[#408 'texture_storage_1d']: s#138
[#408 'texture_storage_2d']: s#139
[#408 'texture_storage_2d_array']: s#140
[#408 'texture_storage_3d']: s#141
[#408 'true']: s#106
[#408 'u32']: s#85
[#408 'vec2']: s#90
[#408 'vec3']: s#91
[#408 'vec4']: s#92
[#408 '~']: s#63
[#408 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#408 /0[fh]/]: s#116
[#408 /0[iu]?/]: s#113
[#408 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#408 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#408 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#408 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#408 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#408 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#408 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#408 /[1-9][0-9]*[fh]/]: s#117
[#408 /[1-9][0-9]*[iu]?/]: s#114
[#410 '{']: s#171
[#411 '&']: s#353
[#411 '(']: s#354
[#411 '*']: s#352
[#411 '_']: s#350
[#411 'const']: s#342
[#411 'let']: s#341
[#411 'var']: s#150
[#411 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#412 '&']: s#353
[#412 '(']: s#354
[#412 '*']: s#352
[#412 ';']: s#318
[#412 '_']: s#350
[#412 'break']: s#343
[#412 'const']: s#342
[#412 'continue']: s#344
[#412 'discard']: s#329
[#412 'for']: s#337
[#412 'if']: s#348
[#412 'let']: s#341
[#412 'loop']: s#336
[#412 'return']: s#333
[#412 'static_assert']: s#25
[#412 'switch']: s#335
[#412 'var']: s#150
[#412 'while']: s#338
[#412 '{']: s#171
[#412 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#413 '{']: s#491
[#414 'else']: s#490
[#415 'break']: r#45
[#415 'continue']: r#45
[#415 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#45
[#416 'else']: s#417
[#417 'if']: s#486
[#420 'break']: r#46
[#420 'continue']: r#46
[#420 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#46
[#421 'break']: r#47
[#421 'continue']: r#47
[#421 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#47
[#422 'break']: r#48
[#422 'continue']: r#48
[#422 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#48
[#423 'break']: r#49
[#423 'continue']: r#49
[#423 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#49
[#424 'break']: r#50
[#424 'continue']: r#50
[#424 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#50
[#425 'break']: r#51
[#425 'continue']: r#51
[#425 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#51
[#426 'break']: r#52
[#426 'continue']: r#52
[#426 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#52
[#427 'break']: r#53
[#427 'continue']: r#53
[#427 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#53
[#429 'break']: r#54
[#429 'continue']: r#54
[#429 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#54
[#429 EndOfText]: r#54
[#430 'read']: s#483
[#430 'read_write']: s#485
[#430 'write']: s#484
[#434 'array']: s#283
[#434 'atomic']: s#88
[#434 'bool']: s#81
[#434 'f16']: s#83
[#434 'f32']: s#82
[#434 'i32']: s#84
[#434 'mat2x2']: s#93
[#434 'mat2x3']: s#94
[#434 'mat2x4']: s#95
[#434 'mat3x2']: s#96
[#434 'mat3x3']: s#97
[#434 'mat3x4']: s#98
[#434 'mat4x2']: s#99
[#434 'mat4x3']: s#100
[#434 'mat4x4']: s#101
[#434 'ptr']: s#86
[#434 'sampler']: s#124
[#434 'sampler_comparison']: s#125
[#434 'texture_1d']: s#131
[#434 'texture_2d']: s#132
[#434 'texture_2d_array']: s#133
[#434 'texture_3d']: s#134
[#434 'texture_cube']: s#135
[#434 'texture_cube_array']: s#136
[#434 'texture_depth_2d']: s#126
[#434 'texture_depth_2d_array']: s#127
[#434 'texture_depth_cube']: s#128
[#434 'texture_depth_cube_array']: s#129
[#434 'texture_depth_multisampled_2d']: s#130
[#434 'texture_multisampled_2d']: s#137
[#434 'texture_storage_1d']: s#138
[#434 'texture_storage_2d']: s#139
[#434 'texture_storage_2d_array']: s#140
[#434 'texture_storage_3d']: s#141
[#434 'u32']: s#85
[#434 'vec2']: s#90
[#434 'vec3']: s#91
[#434 'vec4']: s#92
[#434 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#435 '>']: s#480
[#436 '!']: s#62
[#436 '&']: s#65
[#436 '(']: s#80
[#436 '*']: s#64
[#436 '-']: s#61
[#436 'array']: s#76
[#436 'atomic']: s#88
[#436 'bitcast']: s#71
[#436 'bool']: s#81
[#436 'f16']: s#83
[#436 'f32']: s#82
[#436 'false']: s#107
[#436 'i32']: s#84
[#436 'mat2x2']: s#93
[#436 'mat2x3']: s#94
[#436 'mat2x4']: s#95
[#436 'mat3x2']: s#96
[#436 'mat3x3']: s#97
[#436 'mat3x4']: s#98
[#436 'mat4x2']: s#99
[#436 'mat4x3']: s#100
[#436 'mat4x4']: s#101
[#436 'ptr']: s#86
[#436 'sampler']: s#124
[#436 'sampler_comparison']: s#125
[#436 'texture_1d']: s#131
[#436 'texture_2d']: s#132
[#436 'texture_2d_array']: s#133
[#436 'texture_3d']: s#134
[#436 'texture_cube']: s#135
[#436 'texture_cube_array']: s#136
[#436 'texture_depth_2d']: s#126
[#436 'texture_depth_2d_array']: s#127
[#436 'texture_depth_cube']: s#128
[#436 'texture_depth_cube_array']: s#129
[#436 'texture_depth_multisampled_2d']: s#130
[#436 'texture_multisampled_2d']: s#137
[#436 'texture_storage_1d']: s#138
[#436 'texture_storage_2d']: s#139
[#436 'texture_storage_2d_array']: s#140
[#436 'texture_storage_3d']: s#141
[#436 'true']: s#106
[#436 'u32']: s#85
[#436 'vec2']: s#90
[#436 'vec3']: s#91
[#436 'vec4']: s#92
[#436 '~']: s#63
[#436 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#436 /0[fh]/]: s#116
[#436 /0[iu]?/]: s#113
[#436 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#436 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#436 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#436 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#436 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#436 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#436 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#436 /[1-9][0-9]*[fh]/]: s#117
[#436 /[1-9][0-9]*[iu]?/]: s#114
[#439 '(']: s#80
[#440 ',']: s#474
[#442 ',']: s#443
[#443 '!']: s#62
[#443 '&']: s#65
[#443 '(']: s#80
[#443 '*']: s#64
[#443 '-']: s#61
[#443 'array']: s#76
[#443 'atomic']: s#88
[#443 'bitcast']: s#71
[#443 'bool']: s#81
[#443 'f16']: s#83
[#443 'f32']: s#82
[#443 'false']: s#107
[#443 'i32']: s#84
[#443 'mat2x2']: s#93
[#443 'mat2x3']: s#94
[#443 'mat2x4']: s#95
[#443 'mat3x2']: s#96
[#443 'mat3x3']: s#97
[#443 'mat3x4']: s#98
[#443 'mat4x2']: s#99
[#443 'mat4x3']: s#100
[#443 'mat4x4']: s#101
[#443 'ptr']: s#86
[#443 'sampler']: s#124
[#443 'sampler_comparison']: s#125
[#443 'texture_1d']: s#131
[#443 'texture_2d']: s#132
[#443 'texture_2d_array']: s#133
[#443 'texture_3d']: s#134
[#443 'texture_cube']: s#135
[#443 'texture_cube_array']: s#136
[#443 'texture_depth_2d']: s#126
[#443 'texture_depth_2d_array']: s#127
[#443 'texture_depth_cube']: s#128
[#443 'texture_depth_cube_array']: s#129
[#443 'texture_depth_multisampled_2d']: s#130
[#443 'texture_multisampled_2d']: s#137
[#443 'texture_storage_1d']: s#138
[#443 'texture_storage_2d']: s#139
[#443 'texture_storage_2d_array']: s#140
[#443 'texture_storage_3d']: s#141
[#443 'true']: s#106
[#443 'u32']: s#85
[#443 'vec2']: s#90
[#443 'vec3']: s#91
[#443 'vec4']: s#92
[#443 '~']: s#63
[#443 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#443 /0[fh]/]: s#116
[#443 /0[iu]?/]: s#113
[#443 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#443 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#443 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#443 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#443 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#443 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#443 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#443 /[1-9][0-9]*[fh]/]: s#117
[#443 /[1-9][0-9]*[iu]?/]: s#114
[#445 '.']: s#187
[#445 '[']: s#186
[#450 'f16']: r#55
[#450 'texture_multisampled_2d']: r#55
[#451 '!']: s#62
[#451 '&']: s#65
[#451 '(']: s#80
[#451 '*']: s#64
[#451 '-']: s#61
[#451 'array']: s#76
[#451 'atomic']: s#88
[#451 'bitcast']: s#71
[#451 'bool']: s#81
[#451 'f16']: s#83
[#451 'f32']: s#82
[#451 'false']: s#107
[#451 'i32']: s#84
[#451 'mat2x2']: s#93
[#451 'mat2x3']: s#94
[#451 'mat2x4']: s#95
[#451 'mat3x2']: s#96
[#451 'mat3x3']: s#97
[#451 'mat3x4']: s#98
[#451 'mat4x2']: s#99
[#451 'mat4x3']: s#100
[#451 'mat4x4']: s#101
[#451 'ptr']: s#86
[#451 'sampler']: s#124
[#451 'sampler_comparison']: s#125
[#451 'texture_1d']: s#131
[#451 'texture_2d']: s#132
[#451 'texture_2d_array']: s#133
[#451 'texture_3d']: s#134
[#451 'texture_cube']: s#135
[#451 'texture_cube_array']: s#136
[#451 'texture_depth_2d']: s#126
[#451 'texture_depth_2d_array']: s#127
[#451 'texture_depth_cube']: s#128
[#451 'texture_depth_cube_array']: s#129
[#451 'texture_depth_multisampled_2d']: s#130
[#451 'texture_multisampled_2d']: s#137
[#451 'texture_storage_1d']: s#138
[#451 'texture_storage_2d']: s#139
[#451 'texture_storage_2d_array']: s#140
[#451 'texture_storage_3d']: s#141
[#451 'true']: s#106
[#451 'u32']: s#85
[#451 'vec2']: s#90
[#451 'vec3']: s#91
[#451 'vec4']: s#92
[#451 '~']: s#63
[#451 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#451 /0[fh]/]: s#116
[#451 /0[iu]?/]: s#113
[#451 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#451 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#451 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#451 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#451 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#451 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#451 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#451 /[1-9][0-9]*[fh]/]: s#117
[#451 /[1-9][0-9]*[iu]?/]: s#114
[#452 ')']: s#467
[#453 'f16']: r#56
[#453 'texture_multisampled_2d']: r#56
[#455 'f16']: r#57
[#455 'texture_multisampled_2d']: r#57
[#456 'f16']: r#58
[#456 'texture_multisampled_2d']: r#58
[#457 'center']: s#464
[#457 'centroid']: s#465
[#457 'sample']: s#466
[#458 'f16']: r#59
[#458 'texture_multisampled_2d']: r#59
[#459 'f16']: r#60
[#459 'texture_multisampled_2d']: r#60
[#460 'f16']: r#61
[#460 'texture_multisampled_2d']: r#61
[#461 'f16']: r#62
[#461 'texture_multisampled_2d']: r#62
[#462 'f16']: r#63
[#462 'texture_multisampled_2d']: r#63
[#463 ',']: s#454
[#467 'f16']: r#64
[#467 'texture_multisampled_2d']: r#64
[#468 ',']: s#553
[#477 '+']: s#200
[#477 '-']: s#201
[#481 ',']: s#551
[#482 '>']: s#549
[#486 '!']: s#62
[#486 '&']: s#65
[#486 '(']: s#80
[#486 '*']: s#64
[#486 '-']: s#61
[#486 'array']: s#76
[#486 'atomic']: s#88
[#486 'bitcast']: s#71
[#486 'bool']: s#81
[#486 'f16']: s#83
[#486 'f32']: s#82
[#486 'false']: s#107
[#486 'i32']: s#84
[#486 'mat2x2']: s#93
[#486 'mat2x3']: s#94
[#486 'mat2x4']: s#95
[#486 'mat3x2']: s#96
[#486 'mat3x3']: s#97
[#486 'mat3x4']: s#98
[#486 'mat4x2']: s#99
[#486 'mat4x3']: s#100
[#486 'mat4x4']: s#101
[#486 'ptr']: s#86
[#486 'sampler']: s#124
[#486 'sampler_comparison']: s#125
[#486 'texture_1d']: s#131
[#486 'texture_2d']: s#132
[#486 'texture_2d_array']: s#133
[#486 'texture_3d']: s#134
[#486 'texture_cube']: s#135
[#486 'texture_cube_array']: s#136
[#486 'texture_depth_2d']: s#126
[#486 'texture_depth_2d_array']: s#127
[#486 'texture_depth_cube']: s#128
[#486 'texture_depth_cube_array']: s#129
[#486 'texture_depth_multisampled_2d']: s#130
[#486 'texture_multisampled_2d']: s#137
[#486 'texture_storage_1d']: s#138
[#486 'texture_storage_2d']: s#139
[#486 'texture_storage_2d_array']: s#140
[#486 'texture_storage_3d']: s#141
[#486 'true']: s#106
[#486 'u32']: s#85
[#486 'vec2']: s#90
[#486 'vec3']: s#91
[#486 'vec4']: s#92
[#486 '~']: s#63
[#486 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#486 /0[fh]/]: s#116
[#486 /0[iu]?/]: s#113
[#486 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#486 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#486 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#486 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#486 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#486 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#486 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#486 /[1-9][0-9]*[fh]/]: s#117
[#486 /[1-9][0-9]*[iu]?/]: s#114
[#487 'break']: r#65
[#487 'continue']: r#65
[#487 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#65
[#488 'break']: r#66
[#488 'continue']: r#66
[#488 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#66
[#489 'break']: r#67
[#489 'continue']: r#67
[#489 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#67
[#490 '{']: s#171
[#491 'case']: s#545
[#491 'default']: s#546
[#492 'continuing']: s#539
[#494 '&']: s#353
[#494 '(']: s#354
[#494 '*']: s#352
[#494 ';']: s#318
[#494 '_']: s#350
[#494 'break']: s#343
[#494 'const']: s#342
[#494 'continue']: s#344
[#494 'discard']: s#329
[#494 'for']: s#337
[#494 'if']: s#348
[#494 'let']: s#341
[#494 'loop']: s#336
[#494 'return']: s#333
[#494 'static_assert']: s#25
[#494 'switch']: s#335
[#494 'var']: s#150
[#494 'while']: s#338
[#494 '{']: s#171
[#494 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#495 ')']: s#535
[#496 ';']: s#534
[#501 'break']: r#68
[#501 'continue']: r#68
[#501 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#68
[#503 '!']: s#62
[#503 '&']: s#65
[#503 '(']: s#80
[#503 '*']: s#64
[#503 '-']: s#61
[#503 'array']: s#76
[#503 'atomic']: s#88
[#503 'bitcast']: s#71
[#503 'bool']: s#81
[#503 'f16']: s#83
[#503 'f32']: s#82
[#503 'false']: s#107
[#503 'i32']: s#84
[#503 'mat2x2']: s#93
[#503 'mat2x3']: s#94
[#503 'mat2x4']: s#95
[#503 'mat3x2']: s#96
[#503 'mat3x3']: s#97
[#503 'mat3x4']: s#98
[#503 'mat4x2']: s#99
[#503 'mat4x3']: s#100
[#503 'mat4x4']: s#101
[#503 'ptr']: s#86
[#503 'sampler']: s#124
[#503 'sampler_comparison']: s#125
[#503 'texture_1d']: s#131
[#503 'texture_2d']: s#132
[#503 'texture_2d_array']: s#133
[#503 'texture_3d']: s#134
[#503 'texture_cube']: s#135
[#503 'texture_cube_array']: s#136
[#503 'texture_depth_2d']: s#126
[#503 'texture_depth_2d_array']: s#127
[#503 'texture_depth_cube']: s#128
[#503 'texture_depth_cube_array']: s#129
[#503 'texture_depth_multisampled_2d']: s#130
[#503 'texture_multisampled_2d']: s#137
[#503 'texture_storage_1d']: s#138
[#503 'texture_storage_2d']: s#139
[#503 'texture_storage_2d_array']: s#140
[#503 'texture_storage_3d']: s#141
[#503 'true']: s#106
[#503 'u32']: s#85
[#503 'vec2']: s#90
[#503 'vec3']: s#91
[#503 'vec4']: s#92
[#503 '~']: s#63
[#503 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#503 /0[fh]/]: s#116
[#503 /0[iu]?/]: s#113
[#503 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#503 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#503 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#503 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#503 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#503 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#503 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#503 /[1-9][0-9]*[fh]/]: s#117
[#503 /[1-9][0-9]*[iu]?/]: s#114
[#504 '!']: s#62
[#504 '&']: s#65
[#504 '(']: s#80
[#504 '*']: s#64
[#504 '-']: s#61
[#504 'array']: s#76
[#504 'atomic']: s#88
[#504 'bitcast']: s#71
[#504 'bool']: s#81
[#504 'f16']: s#83
[#504 'f32']: s#82
[#504 'false']: s#107
[#504 'i32']: s#84
[#504 'mat2x2']: s#93
[#504 'mat2x3']: s#94
[#504 'mat2x4']: s#95
[#504 'mat3x2']: s#96
[#504 'mat3x3']: s#97
[#504 'mat3x4']: s#98
[#504 'mat4x2']: s#99
[#504 'mat4x3']: s#100
[#504 'mat4x4']: s#101
[#504 'ptr']: s#86
[#504 'sampler']: s#124
[#504 'sampler_comparison']: s#125
[#504 'texture_1d']: s#131
[#504 'texture_2d']: s#132
[#504 'texture_2d_array']: s#133
[#504 'texture_3d']: s#134
[#504 'texture_cube']: s#135
[#504 'texture_cube_array']: s#136
[#504 'texture_depth_2d']: s#126
[#504 'texture_depth_2d_array']: s#127
[#504 'texture_depth_cube']: s#128
[#504 'texture_depth_cube_array']: s#129
[#504 'texture_depth_multisampled_2d']: s#130
[#504 'texture_multisampled_2d']: s#137
[#504 'texture_storage_1d']: s#138
[#504 'texture_storage_2d']: s#139
[#504 'texture_storage_2d_array']: s#140
[#504 'texture_storage_3d']: s#141
[#504 'true']: s#106
[#504 'u32']: s#85
[#504 'vec2']: s#90
[#504 'vec3']: s#91
[#504 'vec4']: s#92
[#504 '~']: s#63
[#504 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#504 /0[fh]/]: s#116
[#504 /0[iu]?/]: s#113
[#504 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#504 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#504 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#504 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#504 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#504 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#504 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#504 /[1-9][0-9]*[fh]/]: s#117
[#504 /[1-9][0-9]*[iu]?/]: s#114
[#505 'break']: r#69
[#505 'continue']: r#69
[#505 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#69
[#510 ':']: s#531
[#511 ',']: s#530
[#513 ',']: s#514
[#514 '@']: s#30
[#515 '->']: s#526
[#518 '}']: s#524
[#520 'array']: s#283
[#520 'atomic']: s#88
[#520 'bool']: s#81
[#520 'f16']: s#83
[#520 'f32']: s#82
[#520 'i32']: s#84
[#520 'mat2x2']: s#93
[#520 'mat2x3']: s#94
[#520 'mat2x4']: s#95
[#520 'mat3x2']: s#96
[#520 'mat3x3']: s#97
[#520 'mat3x4']: s#98
[#520 'mat4x2']: s#99
[#520 'mat4x3']: s#100
[#520 'mat4x4']: s#101
[#520 'ptr']: s#86
[#520 'sampler']: s#124
[#520 'sampler_comparison']: s#125
[#520 'texture_1d']: s#131
[#520 'texture_2d']: s#132
[#520 'texture_2d_array']: s#133
[#520 'texture_3d']: s#134
[#520 'texture_cube']: s#135
[#520 'texture_cube_array']: s#136
[#520 'texture_depth_2d']: s#126
[#520 'texture_depth_2d_array']: s#127
[#520 'texture_depth_cube']: s#128
[#520 'texture_depth_cube_array']: s#129
[#520 'texture_depth_multisampled_2d']: s#130
[#520 'texture_multisampled_2d']: s#137
[#520 'texture_storage_1d']: s#138
[#520 'texture_storage_2d']: s#139
[#520 'texture_storage_2d_array']: s#140
[#520 'texture_storage_3d']: s#141
[#520 'u32']: s#85
[#520 'vec2']: s#90
[#520 'vec3']: s#91
[#520 'vec4']: s#92
[#520 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#522 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#70
[#524 EndOfText]: r#71
[#526 '@']: s#30
[#531 'array']: s#283
[#531 'atomic']: s#88
[#531 'bool']: s#81
[#531 'f16']: s#83
[#531 'f32']: s#82
[#531 'i32']: s#84
[#531 'mat2x2']: s#93
[#531 'mat2x3']: s#94
[#531 'mat2x4']: s#95
[#531 'mat3x2']: s#96
[#531 'mat3x3']: s#97
[#531 'mat3x4']: s#98
[#531 'mat4x2']: s#99
[#531 'mat4x3']: s#100
[#531 'mat4x4']: s#101
[#531 'ptr']: s#86
[#531 'sampler']: s#124
[#531 'sampler_comparison']: s#125
[#531 'texture_1d']: s#131
[#531 'texture_2d']: s#132
[#531 'texture_2d_array']: s#133
[#531 'texture_3d']: s#134
[#531 'texture_cube']: s#135
[#531 'texture_cube_array']: s#136
[#531 'texture_depth_2d']: s#126
[#531 'texture_depth_2d_array']: s#127
[#531 'texture_depth_cube']: s#128
[#531 'texture_depth_cube_array']: s#129
[#531 'texture_depth_multisampled_2d']: s#130
[#531 'texture_multisampled_2d']: s#137
[#531 'texture_storage_1d']: s#138
[#531 'texture_storage_2d']: s#139
[#531 'texture_storage_2d_array']: s#140
[#531 'texture_storage_3d']: s#141
[#531 'u32']: s#85
[#531 'vec2']: s#90
[#531 'vec3']: s#91
[#531 'vec4']: s#92
[#531 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#534 '!']: s#62
[#534 '&']: s#65
[#534 '(']: s#80
[#534 '*']: s#64
[#534 '-']: s#61
[#534 'array']: s#76
[#534 'atomic']: s#88
[#534 'bitcast']: s#71
[#534 'bool']: s#81
[#534 'f16']: s#83
[#534 'f32']: s#82
[#534 'false']: s#107
[#534 'i32']: s#84
[#534 'mat2x2']: s#93
[#534 'mat2x3']: s#94
[#534 'mat2x4']: s#95
[#534 'mat3x2']: s#96
[#534 'mat3x3']: s#97
[#534 'mat3x4']: s#98
[#534 'mat4x2']: s#99
[#534 'mat4x3']: s#100
[#534 'mat4x4']: s#101
[#534 'ptr']: s#86
[#534 'sampler']: s#124
[#534 'sampler_comparison']: s#125
[#534 'texture_1d']: s#131
[#534 'texture_2d']: s#132
[#534 'texture_2d_array']: s#133
[#534 'texture_3d']: s#134
[#534 'texture_cube']: s#135
[#534 'texture_cube_array']: s#136
[#534 'texture_depth_2d']: s#126
[#534 'texture_depth_2d_array']: s#127
[#534 'texture_depth_cube']: s#128
[#534 'texture_depth_cube_array']: s#129
[#534 'texture_depth_multisampled_2d']: s#130
[#534 'texture_multisampled_2d']: s#137
[#534 'texture_storage_1d']: s#138
[#534 'texture_storage_2d']: s#139
[#534 'texture_storage_2d_array']: s#140
[#534 'texture_storage_3d']: s#141
[#534 'true']: s#106
[#534 'u32']: s#85
[#534 'vec2']: s#90
[#534 'vec3']: s#91
[#534 'vec4']: s#92
[#534 '~']: s#63
[#534 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#534 /0[fh]/]: s#116
[#534 /0[iu]?/]: s#113
[#534 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#534 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#534 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#534 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#534 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#534 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#534 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#534 /[1-9][0-9]*[fh]/]: s#117
[#534 /[1-9][0-9]*[iu]?/]: s#114
[#535 '{']: s#171
[#537 '}']: s#569
[#539 '{']: s#568
[#540 '}']: s#566
[#542 'case']: s#545
[#542 'default']: s#546
[#545 '!']: s#62
[#545 '&']: s#65
[#545 '(']: s#80
[#545 '*']: s#64
[#545 '-']: s#61
[#545 'array']: s#76
[#545 'atomic']: s#88
[#545 'bitcast']: s#71
[#545 'bool']: s#81
[#545 'default']: s#563
[#545 'f16']: s#83
[#545 'f32']: s#82
[#545 'false']: s#107
[#545 'i32']: s#84
[#545 'mat2x2']: s#93
[#545 'mat2x3']: s#94
[#545 'mat2x4']: s#95
[#545 'mat3x2']: s#96
[#545 'mat3x3']: s#97
[#545 'mat3x4']: s#98
[#545 'mat4x2']: s#99
[#545 'mat4x3']: s#100
[#545 'mat4x4']: s#101
[#545 'ptr']: s#86
[#545 'sampler']: s#124
[#545 'sampler_comparison']: s#125
[#545 'texture_1d']: s#131
[#545 'texture_2d']: s#132
[#545 'texture_2d_array']: s#133
[#545 'texture_3d']: s#134
[#545 'texture_cube']: s#135
[#545 'texture_cube_array']: s#136
[#545 'texture_depth_2d']: s#126
[#545 'texture_depth_2d_array']: s#127
[#545 'texture_depth_cube']: s#128
[#545 'texture_depth_cube_array']: s#129
[#545 'texture_depth_multisampled_2d']: s#130
[#545 'texture_multisampled_2d']: s#137
[#545 'texture_storage_1d']: s#138
[#545 'texture_storage_2d']: s#139
[#545 'texture_storage_2d_array']: s#140
[#545 'texture_storage_3d']: s#141
[#545 'true']: s#106
[#545 'u32']: s#85
[#545 'vec2']: s#90
[#545 'vec3']: s#91
[#545 'vec4']: s#92
[#545 '~']: s#63
[#545 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#545 /0[fh]/]: s#116
[#545 /0[iu]?/]: s#113
[#545 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#545 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#545 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#545 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#545 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#545 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#545 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#545 /[1-9][0-9]*[fh]/]: s#117
[#545 /[1-9][0-9]*[iu]?/]: s#114
[#546 ':']: s#560
[#547 'break']: r#72
[#547 'continue']: r#72
[#547 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#72
[#548 '{']: s#171
[#550 '>']: s#557
[#551 'read']: s#483
[#551 'read_write']: s#485
[#551 'write']: s#484
[#552 'f16']: r#73
[#552 'texture_multisampled_2d']: r#73
[#553 '!']: s#62
[#553 '&']: s#65
[#553 '(']: s#80
[#553 '*']: s#64
[#553 '-']: s#61
[#553 'array']: s#76
[#553 'atomic']: s#88
[#553 'bitcast']: s#71
[#553 'bool']: s#81
[#553 'f16']: s#83
[#553 'f32']: s#82
[#553 'false']: s#107
[#553 'i32']: s#84
[#553 'mat2x2']: s#93
[#553 'mat2x3']: s#94
[#553 'mat2x4']: s#95
[#553 'mat3x2']: s#96
[#553 'mat3x3']: s#97
[#553 'mat3x4']: s#98
[#553 'mat4x2']: s#99
[#553 'mat4x3']: s#100
[#553 'mat4x4']: s#101
[#553 'ptr']: s#86
[#553 'sampler']: s#124
[#553 'sampler_comparison']: s#125
[#553 'texture_1d']: s#131
[#553 'texture_2d']: s#132
[#553 'texture_2d_array']: s#133
[#553 'texture_3d']: s#134
[#553 'texture_cube']: s#135
[#553 'texture_cube_array']: s#136
[#553 'texture_depth_2d']: s#126
[#553 'texture_depth_2d_array']: s#127
[#553 'texture_depth_cube']: s#128
[#553 'texture_depth_cube_array']: s#129
[#553 'texture_depth_multisampled_2d']: s#130
[#553 'texture_multisampled_2d']: s#137
[#553 'texture_storage_1d']: s#138
[#553 'texture_storage_2d']: s#139
[#553 'texture_storage_2d_array']: s#140
[#553 'texture_storage_3d']: s#141
[#553 'true']: s#106
[#553 'u32']: s#85
[#553 'vec2']: s#90
[#553 'vec3']: s#91
[#553 'vec4']: s#92
[#553 '~']: s#63
[#553 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#553 /0[fh]/]: s#116
[#553 /0[iu]?/]: s#113
[#553 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#553 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#553 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#553 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#553 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#553 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#553 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#553 /[1-9][0-9]*[fh]/]: s#117
[#553 /[1-9][0-9]*[iu]?/]: s#114
[#554 'f16']: r#74
[#554 'texture_multisampled_2d']: r#74
[#555 ',']: s#454
[#558 'break']: r#75
[#558 'continue']: r#75
[#558 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#75
[#559 '{']: s#171
[#561 ':']: s#588
[#562 ',']: s#586
[#566 'break']: r#76
[#566 'continue']: r#76
[#566 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#76
[#568 '&']: s#353
[#568 '(']: s#354
[#568 '*']: s#352
[#568 ';']: s#318
[#568 '_']: s#350
[#568 'break']: s#343
[#568 'const']: s#342
[#568 'continue']: s#344
[#568 'discard']: s#329
[#568 'for']: s#337
[#568 'if']: s#348
[#568 'let']: s#341
[#568 'loop']: s#336
[#568 'return']: s#333
[#568 'static_assert']: s#25
[#568 'switch']: s#335
[#568 'var']: s#150
[#568 'while']: s#338
[#568 '{']: s#171
[#568 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#569 'break']: r#77
[#569 'continue']: r#77
[#569 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#77
[#570 'break']: r#78
[#570 'continue']: r#78
[#570 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#78
[#571 ';']: s#579
[#574 'array']: s#283
[#574 'atomic']: s#88
[#574 'bool']: s#81
[#574 'f16']: s#83
[#574 'f32']: s#82
[#574 'i32']: s#84
[#574 'mat2x2']: s#93
[#574 'mat2x3']: s#94
[#574 'mat2x4']: s#95
[#574 'mat3x2']: s#96
[#574 'mat3x3']: s#97
[#574 'mat3x4']: s#98
[#574 'mat4x2']: s#99
[#574 'mat4x3']: s#100
[#574 'mat4x4']: s#101
[#574 'ptr']: s#86
[#574 'sampler']: s#124
[#574 'sampler_comparison']: s#125
[#574 'texture_1d']: s#131
[#574 'texture_2d']: s#132
[#574 'texture_2d_array']: s#133
[#574 'texture_3d']: s#134
[#574 'texture_cube']: s#135
[#574 'texture_cube_array']: s#136
[#574 'texture_depth_2d']: s#126
[#574 'texture_depth_2d_array']: s#127
[#574 'texture_depth_cube']: s#128
[#574 'texture_depth_cube_array']: s#129
[#574 'texture_depth_multisampled_2d']: s#130
[#574 'texture_multisampled_2d']: s#137
[#574 'texture_storage_1d']: s#138
[#574 'texture_storage_2d']: s#139
[#574 'texture_storage_2d_array']: s#140
[#574 'texture_storage_3d']: s#141
[#574 'u32']: s#85
[#574 'vec2']: s#90
[#574 'vec3']: s#91
[#574 'vec4']: s#92
[#574 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#575 'f16']: r#79
[#575 'texture_multisampled_2d']: r#79
[#576 '@']: s#30
[#577 'f16']: r#80
[#577 'texture_multisampled_2d']: r#80
[#579 '&']: s#353
[#579 '(']: s#354
[#579 '*']: s#352
[#579 '_']: s#350
[#579 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#580 'break']: s#599
[#581 'break']: r#81
[#582 '&']: s#353
[#582 '(']: s#354
[#582 '*']: s#352
[#582 ';']: s#318
[#582 '_']: s#350
[#582 'break']: s#343
[#582 'const']: s#342
[#582 'continue']: s#344
[#582 'discard']: s#329
[#582 'for']: s#337
[#582 'if']: s#348
[#582 'let']: s#341
[#582 'loop']: s#336
[#582 'return']: s#333
[#582 'static_assert']: s#25
[#582 'switch']: s#335
[#582 'var']: s#150
[#582 'while']: s#338
[#582 '{']: s#171
[#582 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#583 ',']: s#595
[#585 ',']: s#586
[#586 '!']: s#62
[#586 '&']: s#65
[#586 '(']: s#80
[#586 '*']: s#64
[#586 '-']: s#61
[#586 'array']: s#76
[#586 'atomic']: s#88
[#586 'bitcast']: s#71
[#586 'bool']: s#81
[#586 'default']: s#563
[#586 'f16']: s#83
[#586 'f32']: s#82
[#586 'false']: s#107
[#586 'i32']: s#84
[#586 'mat2x2']: s#93
[#586 'mat2x3']: s#94
[#586 'mat2x4']: s#95
[#586 'mat3x2']: s#96
[#586 'mat3x3']: s#97
[#586 'mat3x4']: s#98
[#586 'mat4x2']: s#99
[#586 'mat4x3']: s#100
[#586 'mat4x4']: s#101
[#586 'ptr']: s#86
[#586 'sampler']: s#124
[#586 'sampler_comparison']: s#125
[#586 'texture_1d']: s#131
[#586 'texture_2d']: s#132
[#586 'texture_2d_array']: s#133
[#586 'texture_3d']: s#134
[#586 'texture_cube']: s#135
[#586 'texture_cube_array']: s#136
[#586 'texture_depth_2d']: s#126
[#586 'texture_depth_2d_array']: s#127
[#586 'texture_depth_cube']: s#128
[#586 'texture_depth_cube_array']: s#129
[#586 'texture_depth_multisampled_2d']: s#130
[#586 'texture_multisampled_2d']: s#137
[#586 'texture_storage_1d']: s#138
[#586 'texture_storage_2d']: s#139
[#586 'texture_storage_2d_array']: s#140
[#586 'texture_storage_3d']: s#141
[#586 'true']: s#106
[#586 'u32']: s#85
[#586 'vec2']: s#90
[#586 'vec3']: s#91
[#586 'vec4']: s#92
[#586 '~']: s#63
[#586 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#586 /0[fh]/]: s#116
[#586 /0[iu]?/]: s#113
[#586 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#586 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#586 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#586 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#586 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#586 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#586 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#586 /[1-9][0-9]*[fh]/]: s#117
[#586 /[1-9][0-9]*[iu]?/]: s#114
[#587 '{']: s#171
[#590 'f16']: r#82
[#590 'texture_multisampled_2d']: r#82
[#596 'break']: r#83
[#597 '}']: s#605
[#599 'if']: s#604
[#604 '!']: s#62
[#604 '&']: s#65
[#604 '(']: s#80
[#604 '*']: s#64
[#604 '-']: s#61
[#604 'array']: s#76
[#604 'atomic']: s#88
[#604 'bitcast']: s#71
[#604 'bool']: s#81
[#604 'f16']: s#83
[#604 'f32']: s#82
[#604 'false']: s#107
[#604 'i32']: s#84
[#604 'mat2x2']: s#93
[#604 'mat2x3']: s#94
[#604 'mat2x4']: s#95
[#604 'mat3x2']: s#96
[#604 'mat3x3']: s#97
[#604 'mat3x4']: s#98
[#604 'mat4x2']: s#99
[#604 'mat4x3']: s#100
[#604 'mat4x4']: s#101
[#604 'ptr']: s#86
[#604 'sampler']: s#124
[#604 'sampler_comparison']: s#125
[#604 'texture_1d']: s#131
[#604 'texture_2d']: s#132
[#604 'texture_2d_array']: s#133
[#604 'texture_3d']: s#134
[#604 'texture_cube']: s#135
[#604 'texture_cube_array']: s#136
[#604 'texture_depth_2d']: s#126
[#604 'texture_depth_2d_array']: s#127
[#604 'texture_depth_cube']: s#128
[#604 'texture_depth_cube_array']: s#129
[#604 'texture_depth_multisampled_2d']: s#130
[#604 'texture_multisampled_2d']: s#137
[#604 'texture_storage_1d']: s#138
[#604 'texture_storage_2d']: s#139
[#604 'texture_storage_2d_array']: s#140
[#604 'texture_storage_3d']: s#141
[#604 'true']: s#106
[#604 'u32']: s#85
[#604 'vec2']: s#90
[#604 'vec3']: s#91
[#604 'vec4']: s#92
[#604 '~']: s#63
[#604 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#604 /0[fh]/]: s#116
[#604 /0[iu]?/]: s#113
[#604 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#121
[#604 /0[xX][0-9a-fA-F]+[iu]?/]: s#115
[#604 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#123
[#604 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#122
[#604 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#118
[#604 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#120
[#604 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#119
[#604 /[1-9][0-9]*[fh]/]: s#117
[#604 /[1-9][0-9]*[iu]?/]: s#114
[#606 ';']: s#607

=Goto:
[#0 global_directive]: #4
[#0 translation_unit]: #1
[#0 translation_unit/0.0]: #2
[#0 translation_unit/0.0/0]: #3
[#2 attribute]: #29
[#2 function_decl]: #17
[#2 function_decl/0.0]: #24
[#2 function_decl/0.0/0]: #28
[#2 global_constant_decl]: #14
[#2 global_constant_decl/1.0]: #21
[#2 global_constant_decl/1.0/0]: #27
[#2 global_decl]: #11
[#2 global_variable_decl]: #13
[#2 global_variable_decl/0.0]: #19
[#2 global_variable_decl/0.0/0]: #26
[#2 static_assert_statement]: #18
[#2 struct_decl]: #16
[#2 translation_unit/0.1]: #9
[#2 translation_unit/0.1/0]: #10
[#2 type_alias_decl]: #15
[#4 global_directive]: #4
[#4 translation_unit/0.0/0]: #8
[#5 extension_name]: #6
[#11 attribute]: #29
[#11 function_decl]: #17
[#11 function_decl/0.0]: #24
[#11 function_decl/0.0/0]: #28
[#11 global_constant_decl]: #14
[#11 global_constant_decl/1.0]: #21
[#11 global_constant_decl/1.0/0]: #27
[#11 global_decl]: #11
[#11 global_variable_decl]: #13
[#11 global_variable_decl/0.0]: #19
[#11 global_variable_decl/0.0/0]: #26
[#11 static_assert_statement]: #18
[#11 struct_decl]: #16
[#11 translation_unit/0.1/0]: #155
[#11 type_alias_decl]: #15
[#19 variable_decl]: #149
[#20 ident]: #148
[#20 optionally_typed_ident]: #147
[#22 ident]: #145
[#23 ident]: #144
[#24 function_header]: #142
[#25 additive_expression]: #57
[#25 array_type_specifier]: #87
[#25 binary_and_expression]: #54
[#25 binary_or_expression]: #55
[#25 binary_xor_expression]: #56
[#25 bitwise_expression]: #52
[#25 bool_literal]: #79
[#25 callable]: #68
[#25 decimal_float_literal]: #104
[#25 decimal_int_literal]: #102
[#25 depth_texture_type]: #109
[#25 expression]: #48
[#25 float_literal]: #78
[#25 hex_float_literal]: #105
[#25 hex_int_literal]: #103
[#25 ident]: #67
[#25 int_literal]: #77
[#25 literal]: #69
[#25 mat_prefix]: #75
[#25 multiplicative_expression]: #59
[#25 multisampled_texture_type]: #111
[#25 paren_expression]: #70
[#25 primary_expression]: #66
[#25 relational_expression]: #49
[#25 sampled_texture_type]: #110
[#25 sampler_type]: #108
[#25 shift_expression]: #53
[#25 short_circuit_and_expression]: #51
[#25 short_circuit_or_expression]: #50
[#25 singular_expression]: #60
[#25 storage_texture_type]: #112
[#25 texture_and_sampler_types]: #89
[#25 type_specifier_without_ident]: #73
[#25 unary_expression]: #58
[#25 vec_prefix]: #74
[#29 attribute]: #29
[#29 function_decl/0.0/0]: #47
[#29 global_constant_decl/1.0/0]: #46
[#29 global_variable_decl/0.0/0]: #45
[#57 additive_operator]: #199
[#59 multiplicative_operator]: #193
[#61 array_type_specifier]: #87
[#61 bool_literal]: #79
[#61 callable]: #68
[#61 decimal_float_literal]: #104
[#61 decimal_int_literal]: #102
[#61 depth_texture_type]: #109
[#61 float_literal]: #78
[#61 hex_float_literal]: #105
[#61 hex_int_literal]: #103
[#61 ident]: #67
[#61 int_literal]: #77
[#61 literal]: #69
[#61 mat_prefix]: #75
[#61 multisampled_texture_type]: #111
[#61 paren_expression]: #70
[#61 primary_expression]: #66
[#61 sampled_texture_type]: #110
[#61 sampler_type]: #108
[#61 singular_expression]: #60
[#61 storage_texture_type]: #112
[#61 texture_and_sampler_types]: #89
[#61 type_specifier_without_ident]: #73
[#61 unary_expression]: #192
[#61 vec_prefix]: #74
[#62 array_type_specifier]: #87
[#62 bool_literal]: #79
[#62 callable]: #68
[#62 decimal_float_literal]: #104
[#62 decimal_int_literal]: #102
[#62 depth_texture_type]: #109
[#62 float_literal]: #78
[#62 hex_float_literal]: #105
[#62 hex_int_literal]: #103
[#62 ident]: #67
[#62 int_literal]: #77
[#62 literal]: #69
[#62 mat_prefix]: #75
[#62 multisampled_texture_type]: #111
[#62 paren_expression]: #70
[#62 primary_expression]: #66
[#62 sampled_texture_type]: #110
[#62 sampler_type]: #108
[#62 singular_expression]: #60
[#62 storage_texture_type]: #112
[#62 texture_and_sampler_types]: #89
[#62 type_specifier_without_ident]: #73
[#62 unary_expression]: #191
[#62 vec_prefix]: #74
[#63 array_type_specifier]: #87
[#63 bool_literal]: #79
[#63 callable]: #68
[#63 decimal_float_literal]: #104
[#63 decimal_int_literal]: #102
[#63 depth_texture_type]: #109
[#63 float_literal]: #78
[#63 hex_float_literal]: #105
[#63 hex_int_literal]: #103
[#63 ident]: #67
[#63 int_literal]: #77
[#63 literal]: #69
[#63 mat_prefix]: #75
[#63 multisampled_texture_type]: #111
[#63 paren_expression]: #70
[#63 primary_expression]: #66
[#63 sampled_texture_type]: #110
[#63 sampler_type]: #108
[#63 singular_expression]: #60
[#63 storage_texture_type]: #112
[#63 texture_and_sampler_types]: #89
[#63 type_specifier_without_ident]: #73
[#63 unary_expression]: #190
[#63 vec_prefix]: #74
[#64 array_type_specifier]: #87
[#64 bool_literal]: #79
[#64 callable]: #68
[#64 decimal_float_literal]: #104
[#64 decimal_int_literal]: #102
[#64 depth_texture_type]: #109
[#64 float_literal]: #78
[#64 hex_float_literal]: #105
[#64 hex_int_literal]: #103
[#64 ident]: #67
[#64 int_literal]: #77
[#64 literal]: #69
[#64 mat_prefix]: #75
[#64 multisampled_texture_type]: #111
[#64 paren_expression]: #70
[#64 primary_expression]: #66
[#64 sampled_texture_type]: #110
[#64 sampler_type]: #108
[#64 singular_expression]: #60
[#64 storage_texture_type]: #112
[#64 texture_and_sampler_types]: #89
[#64 type_specifier_without_ident]: #73
[#64 unary_expression]: #189
[#64 vec_prefix]: #74
[#65 array_type_specifier]: #87
[#65 bool_literal]: #79
[#65 callable]: #68
[#65 decimal_float_literal]: #104
[#65 decimal_int_literal]: #102
[#65 depth_texture_type]: #109
[#65 float_literal]: #78
[#65 hex_float_literal]: #105
[#65 hex_int_literal]: #103
[#65 ident]: #67
[#65 int_literal]: #77
[#65 literal]: #69
[#65 mat_prefix]: #75
[#65 multisampled_texture_type]: #111
[#65 paren_expression]: #70
[#65 primary_expression]: #66
[#65 sampled_texture_type]: #110
[#65 sampler_type]: #108
[#65 singular_expression]: #60
[#65 storage_texture_type]: #112
[#65 texture_and_sampler_types]: #89
[#65 type_specifier_without_ident]: #73
[#65 unary_expression]: #188
[#65 vec_prefix]: #74
[#66 component_or_swizzle_specifier]: #185
[#66 singular_expression/0.1]: #184
[#68 argument_expression_list]: #182
[#80 additive_expression]: #57
[#80 array_type_specifier]: #87
[#80 binary_and_expression]: #54
[#80 binary_or_expression]: #55
[#80 binary_xor_expression]: #56
[#80 bitwise_expression]: #52
[#80 bool_literal]: #79
[#80 callable]: #68
[#80 decimal_float_literal]: #104
[#80 decimal_int_literal]: #102
[#80 depth_texture_type]: #109
[#80 expression]: #177
[#80 float_literal]: #78
[#80 hex_float_literal]: #105
[#80 hex_int_literal]: #103
[#80 ident]: #67
[#80 int_literal]: #77
[#80 literal]: #69
[#80 mat_prefix]: #75
[#80 multiplicative_expression]: #59
[#80 multisampled_texture_type]: #111
[#80 paren_expression]: #70
[#80 primary_expression]: #66
[#80 relational_expression]: #49
[#80 sampled_texture_type]: #110
[#80 sampler_type]: #108
[#80 shift_expression]: #53
[#80 short_circuit_and_expression]: #51
[#80 short_circuit_or_expression]: #50
[#80 singular_expression]: #60
[#80 storage_texture_type]: #112
[#80 texture_and_sampler_types]: #89
[#80 type_specifier_without_ident]: #73
[#80 unary_expression]: #58
[#80 vec_prefix]: #74
[#142 compound_statement]: #170
[#143 ident]: #169
[#144 struct_body_decl]: #167
[#146 ident]: #148
[#146 optionally_typed_ident]: #165
[#148 optionally_typed_ident/0.1]: #162
[#149 global_variable_decl/0.2]: #160
[#150 variable_decl/0.1]: #157
[#150 variable_qualifier]: #158
[#157 ident]: #148
[#157 optionally_typed_ident]: #367
[#159 address_space]: #366
[#161 additive_expression]: #57
[#161 array_type_specifier]: #87
[#161 binary_and_expression]: #54
[#161 binary_or_expression]: #55
[#161 binary_xor_expression]: #56
[#161 bitwise_expression]: #52
[#161 bool_literal]: #79
[#161 callable]: #68
[#161 decimal_float_literal]: #104
[#161 decimal_int_literal]: #102
[#161 depth_texture_type]: #109
[#161 expression]: #365
[#161 float_literal]: #78
[#161 hex_float_literal]: #105
[#161 hex_int_literal]: #103
[#161 ident]: #67
[#161 int_literal]: #77
[#161 literal]: #69
[#161 mat_prefix]: #75
[#161 multiplicative_expression]: #59
[#161 multisampled_texture_type]: #111
[#161 paren_expression]: #70
[#161 primary_expression]: #66
[#161 relational_expression]: #49
[#161 sampled_texture_type]: #110
[#161 sampler_type]: #108
[#161 shift_expression]: #53
[#161 short_circuit_and_expression]: #51
[#161 short_circuit_or_expression]: #50
[#161 singular_expression]: #60
[#161 storage_texture_type]: #112
[#161 texture_and_sampler_types]: #89
[#161 type_specifier_without_ident]: #73
[#161 unary_expression]: #58
[#161 vec_prefix]: #74
[#163 array_type_specifier]: #87
[#163 depth_texture_type]: #109
[#163 ident]: #279
[#163 mat_prefix]: #282
[#163 multisampled_texture_type]: #111
[#163 sampled_texture_type]: #110
[#163 sampler_type]: #108
[#163 storage_texture_type]: #112
[#163 texture_and_sampler_types]: #89
[#163 type_specifier]: #364
[#163 type_specifier_without_ident]: #280
[#163 vec_prefix]: #281
[#164 additive_expression]: #57
[#164 array_type_specifier]: #87
[#164 binary_and_expression]: #54
[#164 binary_or_expression]: #55
[#164 binary_xor_expression]: #56
[#164 bitwise_expression]: #52
[#164 bool_literal]: #79
[#164 callable]: #68
[#164 decimal_float_literal]: #104
[#164 decimal_int_literal]: #102
[#164 depth_texture_type]: #109
[#164 expression]: #363
[#164 float_literal]: #78
[#164 hex_float_literal]: #105
[#164 hex_int_literal]: #103
[#164 ident]: #67
[#164 int_literal]: #77
[#164 literal]: #69
[#164 mat_prefix]: #75
[#164 multiplicative_expression]: #59
[#164 multisampled_texture_type]: #111
[#164 paren_expression]: #70
[#164 primary_expression]: #66
[#164 relational_expression]: #49
[#164 sampled_texture_type]: #110
[#164 sampler_type]: #108
[#164 shift_expression]: #53
[#164 short_circuit_and_expression]: #51
[#164 short_circuit_or_expression]: #50
[#164 singular_expression]: #60
[#164 storage_texture_type]: #112
[#164 texture_and_sampler_types]: #89
[#164 type_specifier_without_ident]: #73
[#164 unary_expression]: #58
[#164 vec_prefix]: #74
[#165 global_constant_decl/1.3]: #361
[#166 array_type_specifier]: #87
[#166 depth_texture_type]: #109
[#166 ident]: #279
[#166 mat_prefix]: #282
[#166 multisampled_texture_type]: #111
[#166 sampled_texture_type]: #110
[#166 sampler_type]: #108
[#166 storage_texture_type]: #112
[#166 texture_and_sampler_types]: #89
[#166 type_specifier]: #360
[#166 type_specifier_without_ident]: #280
[#166 vec_prefix]: #281
[#168 attribute]: #359
[#168 struct_member]: #356
[#168 struct_member/0.0]: #357
[#168 struct_member/0.0/0]: #358
[#171 assignment_statement]: #345
[#171 break_statement]: #327
[#171 compound_statement]: #331
[#171 compound_statement/0.1]: #315
[#171 compound_statement/0.1/0]: #316
[#171 continue_statement]: #328
[#171 core_lhs_expression]: #351
[#171 decrement_statement]: #347
[#171 for_statement]: #323
[#171 func_call_statement]: #325
[#171 ident]: #339
[#171 if_clause]: #334
[#171 if_statement]: #320
[#171 increment_statement]: #346
[#171 lhs_expression]: #349
[#171 loop_statement]: #322
[#171 return_statement]: #319
[#171 statement]: #317
[#171 static_assert_statement]: #332
[#171 switch_statement]: #321
[#171 variable_decl]: #340
[#171 variable_statement]: #326
[#171 variable_updating_statement]: #330
[#171 while_statement]: #324
[#172 texel_format]: #297
[#173 array_type_specifier]: #87
[#173 depth_texture_type]: #109
[#173 ident]: #279
[#173 mat_prefix]: #282
[#173 multisampled_texture_type]: #111
[#173 sampled_texture_type]: #110
[#173 sampler_type]: #108
[#173 storage_texture_type]: #112
[#173 texture_and_sampler_types]: #89
[#173 type_specifier]: #296
[#173 type_specifier_without_ident]: #280
[#173 vec_prefix]: #281
[#174 array_type_specifier]: #87
[#174 depth_texture_type]: #109
[#174 ident]: #279
[#174 mat_prefix]: #282
[#174 multisampled_texture_type]: #111
[#174 sampled_texture_type]: #110
[#174 sampler_type]: #108
[#174 storage_texture_type]: #112
[#174 texture_and_sampler_types]: #89
[#174 type_specifier]: #295
[#174 type_specifier_without_ident]: #280
[#174 vec_prefix]: #281
[#175 array_type_specifier]: #87
[#175 depth_texture_type]: #109
[#175 ident]: #279
[#175 mat_prefix]: #282
[#175 multisampled_texture_type]: #111
[#175 sampled_texture_type]: #110
[#175 sampler_type]: #108
[#175 storage_texture_type]: #112
[#175 texture_and_sampler_types]: #89
[#175 type_specifier]: #294
[#175 type_specifier_without_ident]: #280
[#175 vec_prefix]: #281
[#176 address_space]: #288
[#178 array_type_specifier]: #87
[#178 depth_texture_type]: #109
[#178 ident]: #279
[#178 mat_prefix]: #282
[#178 multisampled_texture_type]: #111
[#178 sampled_texture_type]: #110
[#178 sampler_type]: #108
[#178 storage_texture_type]: #112
[#178 texture_and_sampler_types]: #89
[#178 type_specifier]: #286
[#178 type_specifier_without_ident]: #280
[#178 vec_prefix]: #281
[#179 array_type_specifier]: #87
[#179 depth_texture_type]: #109
[#179 ident]: #279
[#179 mat_prefix]: #282
[#179 multisampled_texture_type]: #111
[#179 sampled_texture_type]: #110
[#179 sampler_type]: #108
[#179 storage_texture_type]: #112
[#179 texture_and_sampler_types]: #89
[#179 type_specifier]: #285
[#179 type_specifier_without_ident]: #280
[#179 vec_prefix]: #281
[#180 array_type_specifier]: #87
[#180 depth_texture_type]: #109
[#180 ident]: #279
[#180 mat_prefix]: #282
[#180 multisampled_texture_type]: #111
[#180 sampled_texture_type]: #110
[#180 sampler_type]: #108
[#180 storage_texture_type]: #112
[#180 texture_and_sampler_types]: #89
[#180 type_specifier]: #284
[#180 type_specifier_without_ident]: #280
[#180 vec_prefix]: #281
[#181 array_type_specifier]: #87
[#181 depth_texture_type]: #109
[#181 ident]: #279
[#181 mat_prefix]: #282
[#181 multisampled_texture_type]: #111
[#181 sampled_texture_type]: #110
[#181 sampler_type]: #108
[#181 storage_texture_type]: #112
[#181 texture_and_sampler_types]: #89
[#181 type_specifier]: #278
[#181 type_specifier_without_ident]: #280
[#181 vec_prefix]: #281
[#183 additive_expression]: #57
[#183 argument_expression_list/0.1]: #275
[#183 array_type_specifier]: #87
[#183 binary_and_expression]: #54
[#183 binary_or_expression]: #55
[#183 binary_xor_expression]: #56
[#183 bitwise_expression]: #52
[#183 bool_literal]: #79
[#183 callable]: #68
[#183 decimal_float_literal]: #104
[#183 decimal_int_literal]: #102
[#183 depth_texture_type]: #109
[#183 expression]: #277
[#183 expression_comma_list]: #276
[#183 float_literal]: #78
[#183 hex_float_literal]: #105
[#183 hex_int_literal]: #103
[#183 ident]: #67
[#183 int_literal]: #77
[#183 literal]: #69
[#183 mat_prefix]: #75
[#183 multiplicative_expression]: #59
[#183 multisampled_texture_type]: #111
[#183 paren_expression]: #70
[#183 primary_expression]: #66
[#183 relational_expression]: #49
[#183 sampled_texture_type]: #110
[#183 sampler_type]: #108
[#183 shift_expression]: #53
[#183 short_circuit_and_expression]: #51
[#183 short_circuit_or_expression]: #50
[#183 singular_expression]: #60
[#183 storage_texture_type]: #112
[#183 texture_and_sampler_types]: #89
[#183 type_specifier_without_ident]: #73
[#183 unary_expression]: #58
[#183 vec_prefix]: #74
[#186 additive_expression]: #57
[#186 array_type_specifier]: #87
[#186 binary_and_expression]: #54
[#186 binary_or_expression]: #55
[#186 binary_xor_expression]: #56
[#186 bitwise_expression]: #52
[#186 bool_literal]: #79
[#186 callable]: #68
[#186 decimal_float_literal]: #104
[#186 decimal_int_literal]: #102
[#186 depth_texture_type]: #109
[#186 expression]: #274
[#186 float_literal]: #78
[#186 hex_float_literal]: #105
[#186 hex_int_literal]: #103
[#186 ident]: #67
[#186 int_literal]: #77
[#186 literal]: #69
[#186 mat_prefix]: #75
[#186 multiplicative_expression]: #59
[#186 multisampled_texture_type]: #111
[#186 paren_expression]: #70
[#186 primary_expression]: #66
[#186 relational_expression]: #49
[#186 sampled_texture_type]: #110
[#186 sampler_type]: #108
[#186 shift_expression]: #53
[#186 short_circuit_and_expression]: #51
[#186 short_circuit_or_expression]: #50
[#186 singular_expression]: #60
[#186 storage_texture_type]: #112
[#186 texture_and_sampler_types]: #89
[#186 type_specifier_without_ident]: #73
[#186 unary_expression]: #58
[#186 vec_prefix]: #74
[#187 member_ident]: #263
[#187 swizzle_name]: #264
[#193 array_type_specifier]: #87
[#193 bool_literal]: #79
[#193 callable]: #68
[#193 decimal_float_literal]: #104
[#193 decimal_int_literal]: #102
[#193 depth_texture_type]: #109
[#193 float_literal]: #78
[#193 hex_float_literal]: #105
[#193 hex_int_literal]: #103
[#193 ident]: #67
[#193 int_literal]: #77
[#193 literal]: #69
[#193 mat_prefix]: #75
[#193 multisampled_texture_type]: #111
[#193 paren_expression]: #70
[#193 primary_expression]: #66
[#193 sampled_texture_type]: #110
[#193 sampler_type]: #108
[#193 singular_expression]: #60
[#193 storage_texture_type]: #112
[#193 texture_and_sampler_types]: #89
[#193 type_specifier_without_ident]: #73
[#193 unary_expression]: #262
[#193 vec_prefix]: #74
[#197 array_type_specifier]: #87
[#197 bool_literal]: #79
[#197 callable]: #68
[#197 decimal_float_literal]: #104
[#197 decimal_int_literal]: #102
[#197 depth_texture_type]: #109
[#197 float_literal]: #78
[#197 hex_float_literal]: #105
[#197 hex_int_literal]: #103
[#197 ident]: #67
[#197 int_literal]: #77
[#197 literal]: #69
[#197 mat_prefix]: #75
[#197 multisampled_texture_type]: #111
[#197 paren_expression]: #70
[#197 primary_expression]: #66
[#197 sampled_texture_type]: #110
[#197 sampler_type]: #108
[#197 singular_expression]: #60
[#197 storage_texture_type]: #112
[#197 texture_and_sampler_types]: #89
[#197 type_specifier_without_ident]: #73
[#197 unary_expression]: #261
[#197 vec_prefix]: #74
[#198 array_type_specifier]: #87
[#198 bool_literal]: #79
[#198 callable]: #68
[#198 decimal_float_literal]: #104
[#198 decimal_int_literal]: #102
[#198 depth_texture_type]: #109
[#198 float_literal]: #78
[#198 hex_float_literal]: #105
[#198 hex_int_literal]: #103
[#198 ident]: #67
[#198 int_literal]: #77
[#198 literal]: #69
[#198 mat_prefix]: #75
[#198 multisampled_texture_type]: #111
[#198 paren_expression]: #70
[#198 primary_expression]: #66
[#198 sampled_texture_type]: #110
[#198 sampler_type]: #108
[#198 singular_expression]: #60
[#198 storage_texture_type]: #112
[#198 texture_and_sampler_types]: #89
[#198 type_specifier_without_ident]: #73
[#198 unary_expression]: #260
[#198 vec_prefix]: #74
[#199 array_type_specifier]: #87
[#199 bool_literal]: #79
[#199 callable]: #68
[#199 decimal_float_literal]: #104
[#199 decimal_int_literal]: #102
[#199 depth_texture_type]: #109
[#199 float_literal]: #78
[#199 hex_float_literal]: #105
[#199 hex_int_literal]: #103
[#199 ident]: #67
[#199 int_literal]: #77
[#199 literal]: #69
[#199 mat_prefix]: #75
[#199 multiplicative_expression]: #258
[#199 multisampled_texture_type]: #111
[#199 paren_expression]: #70
[#199 primary_expression]: #66
[#199 sampled_texture_type]: #110
[#199 sampler_type]: #108
[#199 singular_expression]: #60
[#199 storage_texture_type]: #112
[#199 texture_and_sampler_types]: #89
[#199 type_specifier_without_ident]: #73
[#199 unary_expression]: #259
[#199 vec_prefix]: #74
[#202 array_type_specifier]: #87
[#202 bool_literal]: #79
[#202 callable]: #68
[#202 decimal_float_literal]: #104
[#202 decimal_int_literal]: #102
[#202 depth_texture_type]: #109
[#202 float_literal]: #78
[#202 hex_float_literal]: #105
[#202 hex_int_literal]: #103
[#202 ident]: #67
[#202 int_literal]: #77
[#202 literal]: #69
[#202 mat_prefix]: #75
[#202 multisampled_texture_type]: #111
[#202 paren_expression]: #70
[#202 primary_expression]: #66
[#202 sampled_texture_type]: #110
[#202 sampler_type]: #108
[#202 singular_expression]: #60
[#202 storage_texture_type]: #112
[#202 texture_and_sampler_types]: #89
[#202 type_specifier_without_ident]: #73
[#202 unary_expression]: #257
[#202 vec_prefix]: #74
[#203 array_type_specifier]: #87
[#203 bool_literal]: #79
[#203 callable]: #68
[#203 decimal_float_literal]: #104
[#203 decimal_int_literal]: #102
[#203 depth_texture_type]: #109
[#203 float_literal]: #78
[#203 hex_float_literal]: #105
[#203 hex_int_literal]: #103
[#203 ident]: #67
[#203 int_literal]: #77
[#203 literal]: #69
[#203 mat_prefix]: #75
[#203 multisampled_texture_type]: #111
[#203 paren_expression]: #70
[#203 primary_expression]: #66
[#203 sampled_texture_type]: #110
[#203 sampler_type]: #108
[#203 singular_expression]: #60
[#203 storage_texture_type]: #112
[#203 texture_and_sampler_types]: #89
[#203 type_specifier_without_ident]: #73
[#203 unary_expression]: #256
[#203 vec_prefix]: #74
[#204 array_type_specifier]: #87
[#204 bool_literal]: #79
[#204 callable]: #68
[#204 decimal_float_literal]: #104
[#204 decimal_int_literal]: #102
[#204 depth_texture_type]: #109
[#204 float_literal]: #78
[#204 hex_float_literal]: #105
[#204 hex_int_literal]: #103
[#204 ident]: #67
[#204 int_literal]: #77
[#204 literal]: #69
[#204 mat_prefix]: #75
[#204 multisampled_texture_type]: #111
[#204 paren_expression]: #70
[#204 primary_expression]: #66
[#204 sampled_texture_type]: #110
[#204 sampler_type]: #108
[#204 singular_expression]: #60
[#204 storage_texture_type]: #112
[#204 texture_and_sampler_types]: #89
[#204 type_specifier_without_ident]: #73
[#204 unary_expression]: #255
[#204 vec_prefix]: #74
[#205 additive_expression]: #57
[#205 array_type_specifier]: #87
[#205 bool_literal]: #79
[#205 callable]: #68
[#205 decimal_float_literal]: #104
[#205 decimal_int_literal]: #102
[#205 depth_texture_type]: #109
[#205 float_literal]: #78
[#205 hex_float_literal]: #105
[#205 hex_int_literal]: #103
[#205 ident]: #67
[#205 int_literal]: #77
[#205 literal]: #69
[#205 mat_prefix]: #75
[#205 multiplicative_expression]: #59
[#205 multisampled_texture_type]: #111
[#205 paren_expression]: #70
[#205 primary_expression]: #66
[#205 sampled_texture_type]: #110
[#205 sampler_type]: #108
[#205 shift_expression]: #254
[#205 singular_expression]: #60
[#205 storage_texture_type]: #112
[#205 texture_and_sampler_types]: #89
[#205 type_specifier_without_ident]: #73
[#205 unary_expression]: #247
[#205 vec_prefix]: #74
[#206 additive_expression]: #57
[#206 array_type_specifier]: #87
[#206 bool_literal]: #79
[#206 callable]: #68
[#206 decimal_float_literal]: #104
[#206 decimal_int_literal]: #102
[#206 depth_texture_type]: #109
[#206 float_literal]: #78
[#206 hex_float_literal]: #105
[#206 hex_int_literal]: #103
[#206 ident]: #67
[#206 int_literal]: #77
[#206 literal]: #69
[#206 mat_prefix]: #75
[#206 multiplicative_expression]: #59
[#206 multisampled_texture_type]: #111
[#206 paren_expression]: #70
[#206 primary_expression]: #66
[#206 sampled_texture_type]: #110
[#206 sampler_type]: #108
[#206 shift_expression]: #253
[#206 singular_expression]: #60
[#206 storage_texture_type]: #112
[#206 texture_and_sampler_types]: #89
[#206 type_specifier_without_ident]: #73
[#206 unary_expression]: #247
[#206 vec_prefix]: #74
[#207 additive_expression]: #57
[#207 array_type_specifier]: #87
[#207 bool_literal]: #79
[#207 callable]: #68
[#207 decimal_float_literal]: #104
[#207 decimal_int_literal]: #102
[#207 depth_texture_type]: #109
[#207 float_literal]: #78
[#207 hex_float_literal]: #105
[#207 hex_int_literal]: #103
[#207 ident]: #67
[#207 int_literal]: #77
[#207 literal]: #69
[#207 mat_prefix]: #75
[#207 multiplicative_expression]: #59
[#207 multisampled_texture_type]: #111
[#207 paren_expression]: #70
[#207 primary_expression]: #66
[#207 sampled_texture_type]: #110
[#207 sampler_type]: #108
[#207 shift_expression]: #252
[#207 singular_expression]: #60
[#207 storage_texture_type]: #112
[#207 texture_and_sampler_types]: #89
[#207 type_specifier_without_ident]: #73
[#207 unary_expression]: #247
[#207 vec_prefix]: #74
[#208 additive_expression]: #57
[#208 array_type_specifier]: #87
[#208 bool_literal]: #79
[#208 callable]: #68
[#208 decimal_float_literal]: #104
[#208 decimal_int_literal]: #102
[#208 depth_texture_type]: #109
[#208 float_literal]: #78
[#208 hex_float_literal]: #105
[#208 hex_int_literal]: #103
[#208 ident]: #67
[#208 int_literal]: #77
[#208 literal]: #69
[#208 mat_prefix]: #75
[#208 multiplicative_expression]: #59
[#208 multisampled_texture_type]: #111
[#208 paren_expression]: #70
[#208 primary_expression]: #66
[#208 sampled_texture_type]: #110
[#208 sampler_type]: #108
[#208 shift_expression]: #251
[#208 singular_expression]: #60
[#208 storage_texture_type]: #112
[#208 texture_and_sampler_types]: #89
[#208 type_specifier_without_ident]: #73
[#208 unary_expression]: #247
[#208 vec_prefix]: #74
[#209 additive_expression]: #57
[#209 array_type_specifier]: #87
[#209 bool_literal]: #79
[#209 callable]: #68
[#209 decimal_float_literal]: #104
[#209 decimal_int_literal]: #102
[#209 depth_texture_type]: #109
[#209 float_literal]: #78
[#209 hex_float_literal]: #105
[#209 hex_int_literal]: #103
[#209 ident]: #67
[#209 int_literal]: #77
[#209 literal]: #69
[#209 mat_prefix]: #75
[#209 multiplicative_expression]: #59
[#209 multisampled_texture_type]: #111
[#209 paren_expression]: #70
[#209 primary_expression]: #66
[#209 sampled_texture_type]: #110
[#209 sampler_type]: #108
[#209 shift_expression]: #250
[#209 singular_expression]: #60
[#209 storage_texture_type]: #112
[#209 texture_and_sampler_types]: #89
[#209 type_specifier_without_ident]: #73
[#209 unary_expression]: #247
[#209 vec_prefix]: #74
[#210 additive_expression]: #57
[#210 array_type_specifier]: #87
[#210 bool_literal]: #79
[#210 callable]: #68
[#210 decimal_float_literal]: #104
[#210 decimal_int_literal]: #102
[#210 depth_texture_type]: #109
[#210 float_literal]: #78
[#210 hex_float_literal]: #105
[#210 hex_int_literal]: #103
[#210 ident]: #67
[#210 int_literal]: #77
[#210 literal]: #69
[#210 mat_prefix]: #75
[#210 multiplicative_expression]: #59
[#210 multisampled_texture_type]: #111
[#210 paren_expression]: #70
[#210 primary_expression]: #66
[#210 sampled_texture_type]: #110
[#210 sampler_type]: #108
[#210 shift_expression]: #249
[#210 singular_expression]: #60
[#210 storage_texture_type]: #112
[#210 texture_and_sampler_types]: #89
[#210 type_specifier_without_ident]: #73
[#210 unary_expression]: #247
[#210 vec_prefix]: #74
[#211 additive_expression]: #57
[#211 array_type_specifier]: #87
[#211 bool_literal]: #79
[#211 callable]: #68
[#211 decimal_float_literal]: #104
[#211 decimal_int_literal]: #102
[#211 depth_texture_type]: #109
[#211 float_literal]: #78
[#211 hex_float_literal]: #105
[#211 hex_int_literal]: #103
[#211 ident]: #67
[#211 int_literal]: #77
[#211 literal]: #69
[#211 mat_prefix]: #75
[#211 multiplicative_expression]: #59
[#211 multisampled_texture_type]: #111
[#211 paren_expression]: #70
[#211 primary_expression]: #66
[#211 relational_expression]: #248
[#211 sampled_texture_type]: #110
[#211 sampler_type]: #108
[#211 shift_expression]: #53
[#211 singular_expression]: #60
[#211 storage_texture_type]: #112
[#211 texture_and_sampler_types]: #89
[#211 type_specifier_without_ident]: #73
[#211 unary_expression]: #247
[#211 vec_prefix]: #74
[#212 additive_expression]: #57
[#212 array_type_specifier]: #87
[#212 bool_literal]: #79
[#212 callable]: #68
[#212 decimal_float_literal]: #104
[#212 decimal_int_literal]: #102
[#212 depth_texture_type]: #109
[#212 float_literal]: #78
[#212 hex_float_literal]: #105
[#212 hex_int_literal]: #103
[#212 ident]: #67
[#212 int_literal]: #77
[#212 literal]: #69
[#212 mat_prefix]: #75
[#212 multiplicative_expression]: #59
[#212 multisampled_texture_type]: #111
[#212 paren_expression]: #70
[#212 primary_expression]: #66
[#212 relational_expression]: #246
[#212 sampled_texture_type]: #110
[#212 sampler_type]: #108
[#212 shift_expression]: #53
[#212 singular_expression]: #60
[#212 storage_texture_type]: #112
[#212 texture_and_sampler_types]: #89
[#212 type_specifier_without_ident]: #73
[#212 unary_expression]: #247
[#212 vec_prefix]: #74
[#213 additive_expression]: #57
[#213 array_type_specifier]: #87
[#213 binary_and_expression]: #54
[#213 binary_or_expression]: #55
[#213 binary_xor_expression]: #56
[#213 bitwise_expression]: #52
[#213 bool_literal]: #79
[#213 callable]: #68
[#213 decimal_float_literal]: #104
[#213 decimal_int_literal]: #102
[#213 depth_texture_type]: #109
[#213 expression]: #245
[#213 float_literal]: #78
[#213 hex_float_literal]: #105
[#213 hex_int_literal]: #103
[#213 ident]: #67
[#213 int_literal]: #77
[#213 literal]: #69
[#213 mat_prefix]: #75
[#213 multiplicative_expression]: #59
[#213 multisampled_texture_type]: #111
[#213 paren_expression]: #70
[#213 primary_expression]: #66
[#213 relational_expression]: #49
[#213 sampled_texture_type]: #110
[#213 sampler_type]: #108
[#213 shift_expression]: #53
[#213 short_circuit_and_expression]: #51
[#213 short_circuit_or_expression]: #50
[#213 singular_expression]: #60
[#213 storage_texture_type]: #112
[#213 texture_and_sampler_types]: #89
[#213 type_specifier_without_ident]: #73
[#213 unary_expression]: #58
[#213 vec_prefix]: #74
[#214 additive_expression]: #57
[#214 array_type_specifier]: #87
[#214 binary_and_expression]: #54
[#214 binary_or_expression]: #55
[#214 binary_xor_expression]: #56
[#214 bitwise_expression]: #52
[#214 bool_literal]: #79
[#214 callable]: #68
[#214 decimal_float_literal]: #104
[#214 decimal_int_literal]: #102
[#214 depth_texture_type]: #109
[#214 expression]: #244
[#214 float_literal]: #78
[#214 hex_float_literal]: #105
[#214 hex_int_literal]: #103
[#214 ident]: #67
[#214 int_literal]: #77
[#214 literal]: #69
[#214 mat_prefix]: #75
[#214 multiplicative_expression]: #59
[#214 multisampled_texture_type]: #111
[#214 paren_expression]: #70
[#214 primary_expression]: #66
[#214 relational_expression]: #49
[#214 sampled_texture_type]: #110
[#214 sampler_type]: #108
[#214 shift_expression]: #53
[#214 short_circuit_and_expression]: #51
[#214 short_circuit_or_expression]: #50
[#214 singular_expression]: #60
[#214 storage_texture_type]: #112
[#214 texture_and_sampler_types]: #89
[#214 type_specifier_without_ident]: #73
[#214 unary_expression]: #58
[#214 vec_prefix]: #74
[#215 additive_expression]: #57
[#215 array_type_specifier]: #87
[#215 binary_and_expression]: #54
[#215 binary_or_expression]: #55
[#215 binary_xor_expression]: #56
[#215 bitwise_expression]: #52
[#215 bool_literal]: #79
[#215 callable]: #68
[#215 decimal_float_literal]: #104
[#215 decimal_int_literal]: #102
[#215 depth_texture_type]: #109
[#215 expression]: #243
[#215 float_literal]: #78
[#215 hex_float_literal]: #105
[#215 hex_int_literal]: #103
[#215 ident]: #67
[#215 int_literal]: #77
[#215 literal]: #69
[#215 mat_prefix]: #75
[#215 multiplicative_expression]: #59
[#215 multisampled_texture_type]: #111
[#215 paren_expression]: #70
[#215 primary_expression]: #66
[#215 relational_expression]: #49
[#215 sampled_texture_type]: #110
[#215 sampler_type]: #108
[#215 shift_expression]: #53
[#215 short_circuit_and_expression]: #51
[#215 short_circuit_or_expression]: #50
[#215 singular_expression]: #60
[#215 storage_texture_type]: #112
[#215 texture_and_sampler_types]: #89
[#215 type_specifier_without_ident]: #73
[#215 unary_expression]: #58
[#215 vec_prefix]: #74
[#216 interpolation_type_name]: #239
[#217 additive_expression]: #57
[#217 array_type_specifier]: #87
[#217 binary_and_expression]: #54
[#217 binary_or_expression]: #55
[#217 binary_xor_expression]: #56
[#217 bitwise_expression]: #52
[#217 bool_literal]: #79
[#217 callable]: #68
[#217 decimal_float_literal]: #104
[#217 decimal_int_literal]: #102
[#217 depth_texture_type]: #109
[#217 expression]: #238
[#217 float_literal]: #78
[#217 hex_float_literal]: #105
[#217 hex_int_literal]: #103
[#217 ident]: #67
[#217 int_literal]: #77
[#217 literal]: #69
[#217 mat_prefix]: #75
[#217 multiplicative_expression]: #59
[#217 multisampled_texture_type]: #111
[#217 paren_expression]: #70
[#217 primary_expression]: #66
[#217 relational_expression]: #49
[#217 sampled_texture_type]: #110
[#217 sampler_type]: #108
[#217 shift_expression]: #53
[#217 short_circuit_and_expression]: #51
[#217 short_circuit_or_expression]: #50
[#217 singular_expression]: #60
[#217 storage_texture_type]: #112
[#217 texture_and_sampler_types]: #89
[#217 type_specifier_without_ident]: #73
[#217 unary_expression]: #58
[#217 vec_prefix]: #74
[#218 additive_expression]: #57
[#218 array_type_specifier]: #87
[#218 binary_and_expression]: #54
[#218 binary_or_expression]: #55
[#218 binary_xor_expression]: #56
[#218 bitwise_expression]: #52
[#218 bool_literal]: #79
[#218 callable]: #68
[#218 decimal_float_literal]: #104
[#218 decimal_int_literal]: #102
[#218 depth_texture_type]: #109
[#218 expression]: #237
[#218 float_literal]: #78
[#218 hex_float_literal]: #105
[#218 hex_int_literal]: #103
[#218 ident]: #67
[#218 int_literal]: #77
[#218 literal]: #69
[#218 mat_prefix]: #75
[#218 multiplicative_expression]: #59
[#218 multisampled_texture_type]: #111
[#218 paren_expression]: #70
[#218 primary_expression]: #66
[#218 relational_expression]: #49
[#218 sampled_texture_type]: #110
[#218 sampler_type]: #108
[#218 shift_expression]: #53
[#218 short_circuit_and_expression]: #51
[#218 short_circuit_or_expression]: #50
[#218 singular_expression]: #60
[#218 storage_texture_type]: #112
[#218 texture_and_sampler_types]: #89
[#218 type_specifier_without_ident]: #73
[#218 unary_expression]: #58
[#218 vec_prefix]: #74
[#219 builtin_value_name]: #224
[#220 additive_expression]: #57
[#220 array_type_specifier]: #87
[#220 binary_and_expression]: #54
[#220 binary_or_expression]: #55
[#220 binary_xor_expression]: #56
[#220 bitwise_expression]: #52
[#220 bool_literal]: #79
[#220 callable]: #68
[#220 decimal_float_literal]: #104
[#220 decimal_int_literal]: #102
[#220 depth_texture_type]: #109
[#220 expression]: #223
[#220 float_literal]: #78
[#220 hex_float_literal]: #105
[#220 hex_int_literal]: #103
[#220 ident]: #67
[#220 int_literal]: #77
[#220 literal]: #69
[#220 mat_prefix]: #75
[#220 multiplicative_expression]: #59
[#220 multisampled_texture_type]: #111
[#220 paren_expression]: #70
[#220 primary_expression]: #66
[#220 relational_expression]: #49
[#220 sampled_texture_type]: #110
[#220 sampler_type]: #108
[#220 shift_expression]: #53
[#220 short_circuit_and_expression]: #51
[#220 short_circuit_or_expression]: #50
[#220 singular_expression]: #60
[#220 storage_texture_type]: #112
[#220 texture_and_sampler_types]: #89
[#220 type_specifier_without_ident]: #73
[#220 unary_expression]: #58
[#220 vec_prefix]: #74
[#221 additive_expression]: #57
[#221 array_type_specifier]: #87
[#221 binary_and_expression]: #54
[#221 binary_or_expression]: #55
[#221 binary_xor_expression]: #56
[#221 bitwise_expression]: #52
[#221 bool_literal]: #79
[#221 callable]: #68
[#221 decimal_float_literal]: #104
[#221 decimal_int_literal]: #102
[#221 depth_texture_type]: #109
[#221 expression]: #222
[#221 float_literal]: #78
[#221 hex_float_literal]: #105
[#221 hex_int_literal]: #103
[#221 ident]: #67
[#221 int_literal]: #77
[#221 literal]: #69
[#221 mat_prefix]: #75
[#221 multiplicative_expression]: #59
[#221 multisampled_texture_type]: #111
[#221 paren_expression]: #70
[#221 primary_expression]: #66
[#221 relational_expression]: #49
[#221 sampled_texture_type]: #110
[#221 sampler_type]: #108
[#221 shift_expression]: #53
[#221 short_circuit_and_expression]: #51
[#221 short_circuit_or_expression]: #50
[#221 singular_expression]: #60
[#221 storage_texture_type]: #112
[#221 texture_and_sampler_types]: #89
[#221 type_specifier_without_ident]: #73
[#221 unary_expression]: #58
[#221 vec_prefix]: #74
[#222 attrib_end]: #462
[#222 attrib_end/0.0]: #452
[#223 attrib_end]: #461
[#223 attrib_end/0.0]: #452
[#224 attrib_end]: #460
[#224 attrib_end/0.0]: #452
[#237 attrib_end]: #459
[#237 attrib_end/0.0]: #452
[#238 attrib_end]: #458
[#238 attrib_end/0.0]: #452
[#239 attrib_end]: #456
[#239 attrib_end/0.0]: #452
[#243 attrib_end]: #455
[#243 attrib_end/0.0]: #452
[#244 attrib_end]: #453
[#244 attrib_end/0.0]: #452
[#245 attrib_end]: #450
[#245 attrib_end/0.0]: #452
[#258 multiplicative_operator]: #193
[#263 component_or_swizzle_specifier]: #449
[#263 component_or_swizzle_specifier/1.2]: #448
[#264 component_or_swizzle_specifier]: #447
[#264 component_or_swizzle_specifier/2.2]: #446
[#277 expression_comma_list/0.1]: #440
[#277 expression_comma_list/0.1/0]: #441
[#277 expression_comma_list/0.1/0/0.0]: #442
[#286 array_type_specifier/0.3]: #435
[#317 assignment_statement]: #345
[#317 break_statement]: #327
[#317 compound_statement]: #331
[#317 compound_statement/0.1/0]: #428
[#317 continue_statement]: #328
[#317 core_lhs_expression]: #351
[#317 decrement_statement]: #347
[#317 for_statement]: #323
[#317 func_call_statement]: #325
[#317 ident]: #339
[#317 if_clause]: #334
[#317 if_statement]: #320
[#317 increment_statement]: #346
[#317 lhs_expression]: #349
[#317 loop_statement]: #322
[#317 return_statement]: #319
[#317 statement]: #317
[#317 static_assert_statement]: #332
[#317 switch_statement]: #321
[#317 variable_decl]: #340
[#317 variable_statement]: #326
[#317 variable_updating_statement]: #330
[#317 while_statement]: #324
[#333 additive_expression]: #57
[#333 array_type_specifier]: #87
[#333 binary_and_expression]: #54
[#333 binary_or_expression]: #55
[#333 binary_xor_expression]: #56
[#333 bitwise_expression]: #52
[#333 bool_literal]: #79
[#333 callable]: #68
[#333 decimal_float_literal]: #104
[#333 decimal_int_literal]: #102
[#333 depth_texture_type]: #109
[#333 expression]: #419
[#333 float_literal]: #78
[#333 hex_float_literal]: #105
[#333 hex_int_literal]: #103
[#333 ident]: #67
[#333 int_literal]: #77
[#333 literal]: #69
[#333 mat_prefix]: #75
[#333 multiplicative_expression]: #59
[#333 multisampled_texture_type]: #111
[#333 paren_expression]: #70
[#333 primary_expression]: #66
[#333 relational_expression]: #49
[#333 return_statement/0.1]: #418
[#333 sampled_texture_type]: #110
[#333 sampler_type]: #108
[#333 shift_expression]: #53
[#333 short_circuit_and_expression]: #51
[#333 short_circuit_or_expression]: #50
[#333 singular_expression]: #60
[#333 storage_texture_type]: #112
[#333 texture_and_sampler_types]: #89
[#333 type_specifier_without_ident]: #73
[#333 unary_expression]: #58
[#333 vec_prefix]: #74
[#334 else_if_clause]: #416
[#334 if_statement/0.1]: #414
[#334 if_statement/0.1/0]: #415
[#335 additive_expression]: #57
[#335 array_type_specifier]: #87
[#335 binary_and_expression]: #54
[#335 binary_or_expression]: #55
[#335 binary_xor_expression]: #56
[#335 bitwise_expression]: #52
[#335 bool_literal]: #79
[#335 callable]: #68
[#335 decimal_float_literal]: #104
[#335 decimal_int_literal]: #102
[#335 depth_texture_type]: #109
[#335 expression]: #413
[#335 float_literal]: #78
[#335 hex_float_literal]: #105
[#335 hex_int_literal]: #103
[#335 ident]: #67
[#335 int_literal]: #77
[#335 literal]: #69
[#335 mat_prefix]: #75
[#335 multiplicative_expression]: #59
[#335 multisampled_texture_type]: #111
[#335 paren_expression]: #70
[#335 primary_expression]: #66
[#335 relational_expression]: #49
[#335 sampled_texture_type]: #110
[#335 sampler_type]: #108
[#335 shift_expression]: #53
[#335 short_circuit_and_expression]: #51
[#335 short_circuit_or_expression]: #50
[#335 singular_expression]: #60
[#335 storage_texture_type]: #112
[#335 texture_and_sampler_types]: #89
[#335 type_specifier_without_ident]: #73
[#335 unary_expression]: #58
[#335 vec_prefix]: #74
[#338 additive_expression]: #57
[#338 array_type_specifier]: #87
[#338 binary_and_expression]: #54
[#338 binary_or_expression]: #55
[#338 binary_xor_expression]: #56
[#338 bitwise_expression]: #52
[#338 bool_literal]: #79
[#338 callable]: #68
[#338 decimal_float_literal]: #104
[#338 decimal_int_literal]: #102
[#338 depth_texture_type]: #109
[#338 expression]: #410
[#338 float_literal]: #78
[#338 hex_float_literal]: #105
[#338 hex_int_literal]: #103
[#338 ident]: #67
[#338 int_literal]: #77
[#338 literal]: #69
[#338 mat_prefix]: #75
[#338 multiplicative_expression]: #59
[#338 multisampled_texture_type]: #111
[#338 paren_expression]: #70
[#338 primary_expression]: #66
[#338 relational_expression]: #49
[#338 sampled_texture_type]: #110
[#338 sampler_type]: #108
[#338 shift_expression]: #53
[#338 short_circuit_and_expression]: #51
[#338 short_circuit_or_expression]: #50
[#338 singular_expression]: #60
[#338 storage_texture_type]: #112
[#338 texture_and_sampler_types]: #89
[#338 type_specifier_without_ident]: #73
[#338 unary_expression]: #58
[#338 vec_prefix]: #74
[#339 argument_expression_list]: #409
[#341 ident]: #148
[#341 optionally_typed_ident]: #407
[#342 ident]: #148
[#342 optionally_typed_ident]: #406
[#348 additive_expression]: #57
[#348 array_type_specifier]: #87
[#348 binary_and_expression]: #54
[#348 binary_or_expression]: #55
[#348 binary_xor_expression]: #56
[#348 bitwise_expression]: #52
[#348 bool_literal]: #79
[#348 callable]: #68
[#348 decimal_float_literal]: #104
[#348 decimal_int_literal]: #102
[#348 depth_texture_type]: #109
[#348 expression]: #405
[#348 float_literal]: #78
[#348 hex_float_literal]: #105
[#348 hex_int_literal]: #103
[#348 ident]: #67
[#348 int_literal]: #77
[#348 literal]: #69
[#348 mat_prefix]: #75
[#348 multiplicative_expression]: #59
[#348 multisampled_texture_type]: #111
[#348 paren_expression]: #70
[#348 primary_expression]: #66
[#348 relational_expression]: #49
[#348 sampled_texture_type]: #110
[#348 sampler_type]: #108
[#348 shift_expression]: #53
[#348 short_circuit_and_expression]: #51
[#348 short_circuit_or_expression]: #50
[#348 singular_expression]: #60
[#348 storage_texture_type]: #112
[#348 texture_and_sampler_types]: #89
[#348 type_specifier_without_ident]: #73
[#348 unary_expression]: #58
[#348 vec_prefix]: #74
[#349 assignment_statement/0.1]: #390
[#349 compound_assignment_operator]: #394
[#351 component_or_swizzle_specifier]: #388
[#351 lhs_expression/0.1]: #387
[#352 core_lhs_expression]: #351
[#352 ident]: #384
[#352 lhs_expression]: #386
[#353 core_lhs_expression]: #351
[#353 ident]: #384
[#353 lhs_expression]: #385
[#354 core_lhs_expression]: #351
[#354 ident]: #384
[#354 lhs_expression]: #383
[#355 attribute]: #382
[#355 function_header/0.3]: #377
[#355 param]: #379
[#355 param/0.0]: #380
[#355 param/0.0/0]: #381
[#355 param_list]: #378
[#356 struct_body_decl/0.2]: #373
[#356 struct_body_decl/0.2/0]: #374
[#356 struct_body_decl/0.2/0/0.0]: #375
[#357 member_ident]: #372
[#359 attribute]: #359
[#359 struct_member/0.0/0]: #371
[#362 additive_expression]: #57
[#362 array_type_specifier]: #87
[#362 binary_and_expression]: #54
[#362 binary_or_expression]: #55
[#362 binary_xor_expression]: #56
[#362 bitwise_expression]: #52
[#362 bool_literal]: #79
[#362 callable]: #68
[#362 decimal_float_literal]: #104
[#362 decimal_int_literal]: #102
[#362 depth_texture_type]: #109
[#362 expression]: #370
[#362 float_literal]: #78
[#362 hex_float_literal]: #105
[#362 hex_int_literal]: #103
[#362 ident]: #67
[#362 int_literal]: #77
[#362 literal]: #69
[#362 mat_prefix]: #75
[#362 multiplicative_expression]: #59
[#362 multisampled_texture_type]: #111
[#362 paren_expression]: #70
[#362 primary_expression]: #66
[#362 relational_expression]: #49
[#362 sampled_texture_type]: #110
[#362 sampler_type]: #108
[#362 shift_expression]: #53
[#362 short_circuit_and_expression]: #51
[#362 short_circuit_or_expression]: #50
[#362 singular_expression]: #60
[#362 storage_texture_type]: #112
[#362 texture_and_sampler_types]: #89
[#362 type_specifier_without_ident]: #73
[#362 unary_expression]: #58
[#362 vec_prefix]: #74
[#366 variable_qualifier/0.2]: #368
[#369 access_mode]: #521
[#373 struct_body_decl/0.3]: #518
[#375 struct_body_decl/0.2/0]: #517
[#375 struct_body_decl/0.2/0/0.0]: #375
[#376 attribute]: #359
[#376 struct_member]: #516
[#376 struct_member/0.0]: #357
[#376 struct_member/0.0/0]: #358
[#379 param_list/0.1]: #511
[#379 param_list/0.1/0]: #512
[#379 param_list/0.1/0/0.0]: #513
[#380 ident]: #510
[#382 attribute]: #382
[#382 param/0.0/0]: #509
[#389 additive_expression]: #57
[#389 array_type_specifier]: #87
[#389 binary_and_expression]: #54
[#389 binary_or_expression]: #55
[#389 binary_xor_expression]: #56
[#389 bitwise_expression]: #52
[#389 bool_literal]: #79
[#389 callable]: #68
[#389 decimal_float_literal]: #104
[#389 decimal_int_literal]: #102
[#389 depth_texture_type]: #109
[#389 expression]: #507
[#389 float_literal]: #78
[#389 hex_float_literal]: #105
[#389 hex_int_literal]: #103
[#389 ident]: #67
[#389 int_literal]: #77
[#389 literal]: #69
[#389 mat_prefix]: #75
[#389 multiplicative_expression]: #59
[#389 multisampled_texture_type]: #111
[#389 paren_expression]: #70
[#389 primary_expression]: #66
[#389 relational_expression]: #49
[#389 sampled_texture_type]: #110
[#389 sampler_type]: #108
[#389 shift_expression]: #53
[#389 short_circuit_and_expression]: #51
[#389 short_circuit_or_expression]: #50
[#389 singular_expression]: #60
[#389 storage_texture_type]: #112
[#389 texture_and_sampler_types]: #89
[#389 type_specifier_without_ident]: #73
[#389 unary_expression]: #58
[#389 vec_prefix]: #74
[#390 additive_expression]: #57
[#390 array_type_specifier]: #87
[#390 binary_and_expression]: #54
[#390 binary_or_expression]: #55
[#390 binary_xor_expression]: #56
[#390 bitwise_expression]: #52
[#390 bool_literal]: #79
[#390 callable]: #68
[#390 decimal_float_literal]: #104
[#390 decimal_int_literal]: #102
[#390 depth_texture_type]: #109
[#390 expression]: #506
[#390 float_literal]: #78
[#390 hex_float_literal]: #105
[#390 hex_int_literal]: #103
[#390 ident]: #67
[#390 int_literal]: #77
[#390 literal]: #69
[#390 mat_prefix]: #75
[#390 multiplicative_expression]: #59
[#390 multisampled_texture_type]: #111
[#390 paren_expression]: #70
[#390 primary_expression]: #66
[#390 relational_expression]: #49
[#390 sampled_texture_type]: #110
[#390 sampler_type]: #108
[#390 shift_expression]: #53
[#390 short_circuit_and_expression]: #51
[#390 short_circuit_or_expression]: #50
[#390 singular_expression]: #60
[#390 storage_texture_type]: #112
[#390 texture_and_sampler_types]: #89
[#390 type_specifier_without_ident]: #73
[#390 unary_expression]: #58
[#390 vec_prefix]: #74
[#405 compound_statement]: #505
[#408 additive_expression]: #57
[#408 array_type_specifier]: #87
[#408 binary_and_expression]: #54
[#408 binary_or_expression]: #55
[#408 binary_xor_expression]: #56
[#408 bitwise_expression]: #52
[#408 bool_literal]: #79
[#408 callable]: #68
[#408 decimal_float_literal]: #104
[#408 decimal_int_literal]: #102
[#408 depth_texture_type]: #109
[#408 expression]: #502
[#408 float_literal]: #78
[#408 hex_float_literal]: #105
[#408 hex_int_literal]: #103
[#408 ident]: #67
[#408 int_literal]: #77
[#408 literal]: #69
[#408 mat_prefix]: #75
[#408 multiplicative_expression]: #59
[#408 multisampled_texture_type]: #111
[#408 paren_expression]: #70
[#408 primary_expression]: #66
[#408 relational_expression]: #49
[#408 sampled_texture_type]: #110
[#408 sampler_type]: #108
[#408 shift_expression]: #53
[#408 short_circuit_and_expression]: #51
[#408 short_circuit_or_expression]: #50
[#408 singular_expression]: #60
[#408 storage_texture_type]: #112
[#408 texture_and_sampler_types]: #89
[#408 type_specifier_without_ident]: #73
[#408 unary_expression]: #58
[#408 vec_prefix]: #74
[#410 compound_statement]: #501
[#411 assignment_statement]: #345
[#411 core_lhs_expression]: #351
[#411 decrement_statement]: #347
[#411 for_header]: #495
[#411 for_header/0.0]: #496
[#411 for_init]: #497
[#411 func_call_statement]: #500
[#411 ident]: #339
[#411 increment_statement]: #346
[#411 lhs_expression]: #349
[#411 variable_decl]: #340
[#411 variable_statement]: #498
[#411 variable_updating_statement]: #499
[#412 assignment_statement]: #345
[#412 break_statement]: #327
[#412 compound_statement]: #331
[#412 continue_statement]: #328
[#412 core_lhs_expression]: #351
[#412 decrement_statement]: #347
[#412 for_statement]: #323
[#412 func_call_statement]: #325
[#412 ident]: #339
[#412 if_clause]: #334
[#412 if_statement]: #320
[#412 increment_statement]: #346
[#412 lhs_expression]: #349
[#412 loop_statement]: #322
[#412 loop_statement/0.2]: #492
[#412 loop_statement/0.2/0]: #493
[#412 return_statement]: #319
[#412 statement]: #494
[#412 static_assert_statement]: #332
[#412 switch_statement]: #321
[#412 variable_decl]: #340
[#412 variable_statement]: #326
[#412 variable_updating_statement]: #330
[#412 while_statement]: #324
[#414 else_clause]: #489
[#414 if_statement/0.2]: #488
[#416 else_if_clause]: #416
[#416 if_statement/0.1/0]: #487
[#430 access_mode]: #482
[#434 array_type_specifier]: #87
[#434 depth_texture_type]: #109
[#434 ident]: #279
[#434 mat_prefix]: #282
[#434 multisampled_texture_type]: #111
[#434 sampled_texture_type]: #110
[#434 sampler_type]: #108
[#434 storage_texture_type]: #112
[#434 texture_and_sampler_types]: #89
[#434 type_specifier]: #481
[#434 type_specifier_without_ident]: #280
[#434 vec_prefix]: #281
[#436 additive_expression]: #477
[#436 array_type_specifier]: #87
[#436 binary_and_expression]: #54
[#436 binary_or_expression]: #55
[#436 binary_xor_expression]: #56
[#436 bitwise_expression]: #478
[#436 bool_literal]: #79
[#436 callable]: #68
[#436 decimal_float_literal]: #104
[#436 decimal_int_literal]: #102
[#436 depth_texture_type]: #109
[#436 element_count_expression]: #476
[#436 float_literal]: #78
[#436 hex_float_literal]: #105
[#436 hex_int_literal]: #103
[#436 ident]: #67
[#436 int_literal]: #77
[#436 literal]: #69
[#436 mat_prefix]: #75
[#436 multiplicative_expression]: #59
[#436 multisampled_texture_type]: #111
[#436 paren_expression]: #70
[#436 primary_expression]: #66
[#436 sampled_texture_type]: #110
[#436 sampler_type]: #108
[#436 singular_expression]: #60
[#436 storage_texture_type]: #112
[#436 texture_and_sampler_types]: #89
[#436 type_specifier_without_ident]: #73
[#436 unary_expression]: #479
[#436 vec_prefix]: #74
[#439 paren_expression]: #475
[#440 expression_comma_list/0.2]: #473
[#442 expression_comma_list/0.1/0]: #472
[#442 expression_comma_list/0.1/0/0.0]: #442
[#443 additive_expression]: #57
[#443 array_type_specifier]: #87
[#443 binary_and_expression]: #54
[#443 binary_or_expression]: #55
[#443 binary_xor_expression]: #56
[#443 bitwise_expression]: #52
[#443 bool_literal]: #79
[#443 callable]: #68
[#443 decimal_float_literal]: #104
[#443 decimal_int_literal]: #102
[#443 depth_texture_type]: #109
[#443 expression]: #471
[#443 float_literal]: #78
[#443 hex_float_literal]: #105
[#443 hex_int_literal]: #103
[#443 ident]: #67
[#443 int_literal]: #77
[#443 literal]: #69
[#443 mat_prefix]: #75
[#443 multiplicative_expression]: #59
[#443 multisampled_texture_type]: #111
[#443 paren_expression]: #70
[#443 primary_expression]: #66
[#443 relational_expression]: #49
[#443 sampled_texture_type]: #110
[#443 sampler_type]: #108
[#443 shift_expression]: #53
[#443 short_circuit_and_expression]: #51
[#443 short_circuit_or_expression]: #50
[#443 singular_expression]: #60
[#443 storage_texture_type]: #112
[#443 texture_and_sampler_types]: #89
[#443 type_specifier_without_ident]: #73
[#443 unary_expression]: #58
[#443 vec_prefix]: #74
[#445 component_or_swizzle_specifier]: #470
[#445 component_or_swizzle_specifier/0.3]: #469
[#451 additive_expression]: #57
[#451 array_type_specifier]: #87
[#451 binary_and_expression]: #54
[#451 binary_or_expression]: #55
[#451 binary_xor_expression]: #56
[#451 bitwise_expression]: #52
[#451 bool_literal]: #79
[#451 callable]: #68
[#451 decimal_float_literal]: #104
[#451 decimal_int_literal]: #102
[#451 depth_texture_type]: #109
[#451 expression]: #468
[#451 float_literal]: #78
[#451 hex_float_literal]: #105
[#451 hex_int_literal]: #103
[#451 ident]: #67
[#451 int_literal]: #77
[#451 literal]: #69
[#451 mat_prefix]: #75
[#451 multiplicative_expression]: #59
[#451 multisampled_texture_type]: #111
[#451 paren_expression]: #70
[#451 primary_expression]: #66
[#451 relational_expression]: #49
[#451 sampled_texture_type]: #110
[#451 sampler_type]: #108
[#451 shift_expression]: #53
[#451 short_circuit_and_expression]: #51
[#451 short_circuit_or_expression]: #50
[#451 singular_expression]: #60
[#451 storage_texture_type]: #112
[#451 texture_and_sampler_types]: #89
[#451 type_specifier_without_ident]: #73
[#451 unary_expression]: #58
[#451 vec_prefix]: #74
[#457 interpolation_sample_name]: #463
[#463 attrib_end]: #554
[#463 attrib_end/0.0]: #452
[#468 attrib_end]: #552
[#468 attrib_end/0.0]: #452
[#477 additive_operator]: #199
[#481 type_specifier_without_ident/7.5]: #550
[#486 additive_expression]: #57
[#486 array_type_specifier]: #87
[#486 binary_and_expression]: #54
[#486 binary_or_expression]: #55
[#486 binary_xor_expression]: #56
[#486 bitwise_expression]: #52
[#486 bool_literal]: #79
[#486 callable]: #68
[#486 decimal_float_literal]: #104
[#486 decimal_int_literal]: #102
[#486 depth_texture_type]: #109
[#486 expression]: #548
[#486 float_literal]: #78
[#486 hex_float_literal]: #105
[#486 hex_int_literal]: #103
[#486 ident]: #67
[#486 int_literal]: #77
[#486 literal]: #69
[#486 mat_prefix]: #75
[#486 multiplicative_expression]: #59
[#486 multisampled_texture_type]: #111
[#486 paren_expression]: #70
[#486 primary_expression]: #66
[#486 relational_expression]: #49
[#486 sampled_texture_type]: #110
[#486 sampler_type]: #108
[#486 shift_expression]: #53
[#486 short_circuit_and_expression]: #51
[#486 short_circuit_or_expression]: #50
[#486 singular_expression]: #60
[#486 storage_texture_type]: #112
[#486 texture_and_sampler_types]: #89
[#486 type_specifier_without_ident]: #73
[#486 unary_expression]: #58
[#486 vec_prefix]: #74
[#490 compound_statement]: #547
[#491 case_clause]: #543
[#491 default_alone_clause]: #544
[#491 switch_body]: #542
[#491 switch_statement/0.3]: #540
[#491 switch_statement/0.3/0]: #541
[#492 continuing_statement]: #538
[#492 loop_statement/0.3]: #537
[#494 assignment_statement]: #345
[#494 break_statement]: #327
[#494 compound_statement]: #331
[#494 continue_statement]: #328
[#494 core_lhs_expression]: #351
[#494 decrement_statement]: #347
[#494 for_statement]: #323
[#494 func_call_statement]: #325
[#494 ident]: #339
[#494 if_clause]: #334
[#494 if_statement]: #320
[#494 increment_statement]: #346
[#494 lhs_expression]: #349
[#494 loop_statement]: #322
[#494 loop_statement/0.2/0]: #536
[#494 return_statement]: #319
[#494 statement]: #494
[#494 static_assert_statement]: #332
[#494 switch_statement]: #321
[#494 variable_decl]: #340
[#494 variable_statement]: #326
[#494 variable_updating_statement]: #330
[#494 while_statement]: #324
[#503 additive_expression]: #57
[#503 array_type_specifier]: #87
[#503 binary_and_expression]: #54
[#503 binary_or_expression]: #55
[#503 binary_xor_expression]: #56
[#503 bitwise_expression]: #52
[#503 bool_literal]: #79
[#503 callable]: #68
[#503 decimal_float_literal]: #104
[#503 decimal_int_literal]: #102
[#503 depth_texture_type]: #109
[#503 expression]: #533
[#503 float_literal]: #78
[#503 hex_float_literal]: #105
[#503 hex_int_literal]: #103
[#503 ident]: #67
[#503 int_literal]: #77
[#503 literal]: #69
[#503 mat_prefix]: #75
[#503 multiplicative_expression]: #59
[#503 multisampled_texture_type]: #111
[#503 paren_expression]: #70
[#503 primary_expression]: #66
[#503 relational_expression]: #49
[#503 sampled_texture_type]: #110
[#503 sampler_type]: #108
[#503 shift_expression]: #53
[#503 short_circuit_and_expression]: #51
[#503 short_circuit_or_expression]: #50
[#503 singular_expression]: #60
[#503 storage_texture_type]: #112
[#503 texture_and_sampler_types]: #89
[#503 type_specifier_without_ident]: #73
[#503 unary_expression]: #58
[#503 vec_prefix]: #74
[#504 additive_expression]: #57
[#504 array_type_specifier]: #87
[#504 binary_and_expression]: #54
[#504 binary_or_expression]: #55
[#504 binary_xor_expression]: #56
[#504 bitwise_expression]: #52
[#504 bool_literal]: #79
[#504 callable]: #68
[#504 decimal_float_literal]: #104
[#504 decimal_int_literal]: #102
[#504 depth_texture_type]: #109
[#504 expression]: #532
[#504 float_literal]: #78
[#504 hex_float_literal]: #105
[#504 hex_int_literal]: #103
[#504 ident]: #67
[#504 int_literal]: #77
[#504 literal]: #69
[#504 mat_prefix]: #75
[#504 multiplicative_expression]: #59
[#504 multisampled_texture_type]: #111
[#504 paren_expression]: #70
[#504 primary_expression]: #66
[#504 relational_expression]: #49
[#504 sampled_texture_type]: #110
[#504 sampler_type]: #108
[#504 shift_expression]: #53
[#504 short_circuit_and_expression]: #51
[#504 short_circuit_or_expression]: #50
[#504 singular_expression]: #60
[#504 storage_texture_type]: #112
[#504 texture_and_sampler_types]: #89
[#504 type_specifier_without_ident]: #73
[#504 unary_expression]: #58
[#504 vec_prefix]: #74
[#511 param_list/0.2]: #529
[#513 param_list/0.1/0]: #528
[#513 param_list/0.1/0/0.0]: #513
[#514 attribute]: #382
[#514 param]: #527
[#514 param/0.0]: #380
[#514 param/0.0/0]: #381
[#515 function_header/0.5]: #525
[#520 array_type_specifier]: #87
[#520 depth_texture_type]: #109
[#520 ident]: #279
[#520 mat_prefix]: #282
[#520 multisampled_texture_type]: #111
[#520 sampled_texture_type]: #110
[#520 sampler_type]: #108
[#520 storage_texture_type]: #112
[#520 texture_and_sampler_types]: #89
[#520 type_specifier]: #523
[#520 type_specifier_without_ident]: #280
[#520 vec_prefix]: #281
[#526 attribute]: #576
[#526 function_header/0.5/0.1]: #574
[#526 function_header/0.5/0.1/0]: #575
[#531 array_type_specifier]: #87
[#531 depth_texture_type]: #109
[#531 ident]: #279
[#531 mat_prefix]: #282
[#531 multisampled_texture_type]: #111
[#531 sampled_texture_type]: #110
[#531 sampler_type]: #108
[#531 storage_texture_type]: #112
[#531 texture_and_sampler_types]: #89
[#531 type_specifier]: #573
[#531 type_specifier_without_ident]: #280
[#531 vec_prefix]: #281
[#534 additive_expression]: #57
[#534 array_type_specifier]: #87
[#534 binary_and_expression]: #54
[#534 binary_or_expression]: #55
[#534 binary_xor_expression]: #56
[#534 bitwise_expression]: #52
[#534 bool_literal]: #79
[#534 callable]: #68
[#534 decimal_float_literal]: #104
[#534 decimal_int_literal]: #102
[#534 depth_texture_type]: #109
[#534 expression]: #572
[#534 float_literal]: #78
[#534 for_header/0.2]: #571
[#534 hex_float_literal]: #105
[#534 hex_int_literal]: #103
[#534 ident]: #67
[#534 int_literal]: #77
[#534 literal]: #69
[#534 mat_prefix]: #75
[#534 multiplicative_expression]: #59
[#534 multisampled_texture_type]: #111
[#534 paren_expression]: #70
[#534 primary_expression]: #66
[#534 relational_expression]: #49
[#534 sampled_texture_type]: #110
[#534 sampler_type]: #108
[#534 shift_expression]: #53
[#534 short_circuit_and_expression]: #51
[#534 short_circuit_or_expression]: #50
[#534 singular_expression]: #60
[#534 storage_texture_type]: #112
[#534 texture_and_sampler_types]: #89
[#534 type_specifier_without_ident]: #73
[#534 unary_expression]: #58
[#534 vec_prefix]: #74
[#535 compound_statement]: #570
[#539 continuing_compound_statement]: #567
[#542 case_clause]: #543
[#542 default_alone_clause]: #544
[#542 switch_body]: #542
[#542 switch_statement/0.3/0]: #565
[#545 additive_expression]: #57
[#545 array_type_specifier]: #87
[#545 binary_and_expression]: #54
[#545 binary_or_expression]: #55
[#545 binary_xor_expression]: #56
[#545 bitwise_expression]: #52
[#545 bool_literal]: #79
[#545 callable]: #68
[#545 case_selector]: #562
[#545 case_selectors]: #561
[#545 decimal_float_literal]: #104
[#545 decimal_int_literal]: #102
[#545 depth_texture_type]: #109
[#545 expression]: #564
[#545 float_literal]: #78
[#545 hex_float_literal]: #105
[#545 hex_int_literal]: #103
[#545 ident]: #67
[#545 int_literal]: #77
[#545 literal]: #69
[#545 mat_prefix]: #75
[#545 multiplicative_expression]: #59
[#545 multisampled_texture_type]: #111
[#545 paren_expression]: #70
[#545 primary_expression]: #66
[#545 relational_expression]: #49
[#545 sampled_texture_type]: #110
[#545 sampler_type]: #108
[#545 shift_expression]: #53
[#545 short_circuit_and_expression]: #51
[#545 short_circuit_or_expression]: #50
[#545 singular_expression]: #60
[#545 storage_texture_type]: #112
[#545 texture_and_sampler_types]: #89
[#545 type_specifier_without_ident]: #73
[#545 unary_expression]: #58
[#545 vec_prefix]: #74
[#546 default_alone_clause/0.1]: #559
[#548 compound_statement]: #558
[#551 access_mode]: #556
[#553 additive_expression]: #57
[#553 array_type_specifier]: #87
[#553 binary_and_expression]: #54
[#553 binary_or_expression]: #55
[#553 binary_xor_expression]: #56
[#553 bitwise_expression]: #52
[#553 bool_literal]: #79
[#553 callable]: #68
[#553 decimal_float_literal]: #104
[#553 decimal_int_literal]: #102
[#553 depth_texture_type]: #109
[#553 expression]: #555
[#553 float_literal]: #78
[#553 hex_float_literal]: #105
[#553 hex_int_literal]: #103
[#553 ident]: #67
[#553 int_literal]: #77
[#553 literal]: #69
[#553 mat_prefix]: #75
[#553 multiplicative_expression]: #59
[#553 multisampled_texture_type]: #111
[#553 paren_expression]: #70
[#553 primary_expression]: #66
[#553 relational_expression]: #49
[#553 sampled_texture_type]: #110
[#553 sampler_type]: #108
[#553 shift_expression]: #53
[#553 short_circuit_and_expression]: #51
[#553 short_circuit_or_expression]: #50
[#553 singular_expression]: #60
[#553 storage_texture_type]: #112
[#553 texture_and_sampler_types]: #89
[#553 type_specifier_without_ident]: #73
[#553 unary_expression]: #58
[#553 vec_prefix]: #74
[#555 attrib_end]: #590
[#555 attrib_end/0.0]: #452
[#559 compound_statement]: #589
[#561 case_clause/0.2]: #587
[#562 case_selectors/0.1]: #583
[#562 case_selectors/0.1/0]: #584
[#562 case_selectors/0.1/0/0.0]: #585
[#568 assignment_statement]: #345
[#568 break_statement]: #327
[#568 compound_statement]: #331
[#568 continue_statement]: #328
[#568 continuing_compound_statement/0.1]: #580
[#568 continuing_compound_statement/0.1/0]: #581
[#568 core_lhs_expression]: #351
[#568 decrement_statement]: #347
[#568 for_statement]: #323
[#568 func_call_statement]: #325
[#568 ident]: #339
[#568 if_clause]: #334
[#568 if_statement]: #320
[#568 increment_statement]: #346
[#568 lhs_expression]: #349
[#568 loop_statement]: #322
[#568 return_statement]: #319
[#568 statement]: #582
[#568 static_assert_statement]: #332
[#568 switch_statement]: #321
[#568 variable_decl]: #340
[#568 variable_statement]: #326
[#568 variable_updating_statement]: #330
[#568 while_statement]: #324
[#574 array_type_specifier]: #87
[#574 depth_texture_type]: #109
[#574 ident]: #279
[#574 mat_prefix]: #282
[#574 multisampled_texture_type]: #111
[#574 sampled_texture_type]: #110
[#574 sampler_type]: #108
[#574 storage_texture_type]: #112
[#574 texture_and_sampler_types]: #89
[#574 type_specifier]: #578
[#574 type_specifier_without_ident]: #280
[#574 vec_prefix]: #281
[#576 attribute]: #576
[#576 function_header/0.5/0.1/0]: #577
[#579 assignment_statement]: #345
[#579 core_lhs_expression]: #351
[#579 decrement_statement]: #347
[#579 for_header/0.4]: #600
[#579 for_update]: #601
[#579 func_call_statement]: #603
[#579 ident]: #339
[#579 increment_statement]: #346
[#579 lhs_expression]: #349
[#579 variable_updating_statement]: #602
[#580 break_if_statement]: #598
[#580 continuing_compound_statement/0.2]: #597
[#582 assignment_statement]: #345
[#582 break_statement]: #327
[#582 compound_statement]: #331
[#582 continue_statement]: #328
[#582 continuing_compound_statement/0.1/0]: #596
[#582 core_lhs_expression]: #351
[#582 decrement_statement]: #347
[#582 for_statement]: #323
[#582 func_call_statement]: #325
[#582 ident]: #339
[#582 if_clause]: #334
[#582 if_statement]: #320
[#582 increment_statement]: #346
[#582 lhs_expression]: #349
[#582 loop_statement]: #322
[#582 return_statement]: #319
[#582 statement]: #582
[#582 static_assert_statement]: #332
[#582 switch_statement]: #321
[#582 variable_decl]: #340
[#582 variable_statement]: #326
[#582 variable_updating_statement]: #330
[#582 while_statement]: #324
[#583 case_selectors/0.2]: #594
[#585 case_selectors/0.1/0]: #593
[#585 case_selectors/0.1/0/0.0]: #585
[#586 additive_expression]: #57
[#586 array_type_specifier]: #87
[#586 binary_and_expression]: #54
[#586 binary_or_expression]: #55
[#586 binary_xor_expression]: #56
[#586 bitwise_expression]: #52
[#586 bool_literal]: #79
[#586 callable]: #68
[#586 case_selector]: #592
[#586 decimal_float_literal]: #104
[#586 decimal_int_literal]: #102
[#586 depth_texture_type]: #109
[#586 expression]: #564
[#586 float_literal]: #78
[#586 hex_float_literal]: #105
[#586 hex_int_literal]: #103
[#586 ident]: #67
[#586 int_literal]: #77
[#586 literal]: #69
[#586 mat_prefix]: #75
[#586 multiplicative_expression]: #59
[#586 multisampled_texture_type]: #111
[#586 paren_expression]: #70
[#586 primary_expression]: #66
[#586 relational_expression]: #49
[#586 sampled_texture_type]: #110
[#586 sampler_type]: #108
[#586 shift_expression]: #53
[#586 short_circuit_and_expression]: #51
[#586 short_circuit_or_expression]: #50
[#586 singular_expression]: #60
[#586 storage_texture_type]: #112
[#586 texture_and_sampler_types]: #89
[#586 type_specifier_without_ident]: #73
[#586 unary_expression]: #58
[#586 vec_prefix]: #74
[#587 compound_statement]: #591
[#604 additive_expression]: #57
[#604 array_type_specifier]: #87
[#604 binary_and_expression]: #54
[#604 binary_or_expression]: #55
[#604 binary_xor_expression]: #56
[#604 bitwise_expression]: #52
[#604 bool_literal]: #79
[#604 callable]: #68
[#604 decimal_float_literal]: #104
[#604 decimal_int_literal]: #102
[#604 depth_texture_type]: #109
[#604 expression]: #606
[#604 float_literal]: #78
[#604 hex_float_literal]: #105
[#604 hex_int_literal]: #103
[#604 ident]: #67
[#604 int_literal]: #77
[#604 literal]: #69
[#604 mat_prefix]: #75
[#604 multiplicative_expression]: #59
[#604 multisampled_texture_type]: #111
[#604 paren_expression]: #70
[#604 primary_expression]: #66
[#604 relational_expression]: #49
[#604 sampled_texture_type]: #110
[#604 sampler_type]: #108
[#604 shift_expression]: #53
[#604 short_circuit_and_expression]: #51
[#604 short_circuit_or_expression]: #50
[#604 singular_expression]: #60
[#604 storage_texture_type]: #112
[#604 texture_and_sampler_types]: #89
[#604 type_specifier_without_ident]: #73
[#604 unary_expression]: #58
[#604 vec_prefix]: #74
